{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fluxion Pipeline Engine","text":"<p>Fluxion lets you execute Mongo-style pipelines directly in your JVM services. It preserves the familiar stage and operator vocabulary while focusing on single-document and request/response scenarios today (bulk aggregation support will arrive later).</p>"},{"location":"#key-capabilities","title":"Key Capabilities","text":"<ul> <li>End-to-end pipeline execution via <code>PipelineExecutor</code></li> <li>200+ documented operators and 40+ stages with Mongo semantics</li> <li>System variables such as <code>$$ROOT</code>, <code>$$CURRENT</code>, <code>$$NOW</code>, <code>$$REMOVE</code></li> <li>JSON-first workflow with helpers for parsing pipelines and documents</li> <li>Extension hooks for custom operators or stages</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>List&lt;Document&gt; input = DocumentParser.getDocumentsFromJsonArray(\"\"\"\n  [\n    { \"device\": \"sensor-1\", \"status\": \"active\", \"temperature\": 18.6 },\n    { \"device\": \"sensor-1\", \"status\": \"active\", \"temperature\": 19.1 }\n  ]\n\"\"\");\n\nList&lt;Stage&gt; pipeline = DocumentParser.getStagesFromJsonArray(\"\"\"\n  [\n    { \"$match\": { \"status\": \"active\" } },\n    { \"$addFields\": { \"fahrenheit\": { \"$add\": [{ \"$multiply\": [\"$temperature\", 1.8] }, 32] } } }\n  ]\n\"\"\");\n\nPipelineExecutor executor = new PipelineExecutor();\nList&lt;Document&gt; transformed = executor.run(input, pipeline, Map.of());\n</code></pre> <p>Check the Usage Guide for a step-by-step walkthrough and additional examples.</p>"},{"location":"#navigate-the-docs","title":"Navigate the Docs","text":"<ul> <li>\ud83d\udcd8 Usage Guide \u2013 load documents, run pipelines, inspect results</li> <li>\ud83e\uddf0 Integration Developer Guide \u2013 API details and extension patterns</li> <li>\ud83d\udcca Stages Reference \u2013 payload shapes and examples</li> <li>\ud83e\uddee Operators Reference \u2013 syntax and behaviour</li> <li>\ud83e\udde0 Glossary \u2013 terminology used across the project</li> <li>\ud83d\uddfa\ufe0f Roadmap \u2013 upcoming features and milestones</li> </ul> <p>Fluxion is designed to embed cleanly into your applications. Start experimenting with the quick start above, then dive into the references when you need exact syntax. Continuous feedback is welcome!</p>"},{"location":"changelog/","title":"What's New","text":"<p>This lightweight changelog tracks notable documentation and API updates that affect integrators and LLM assistants.</p>"},{"location":"changelog/#2025-02-11","title":"2025-02-11","text":"<ul> <li>Reworked stage documentation with syntax + before/after examples (<code>$match</code>, <code>$project</code>, <code>$limit</code>, <code>$skip</code>, <code>$sortByCount</code>, <code>$sampleRate</code>, <code>$densify</code>, <code>$fill</code>, <code>$setWindowFields</code>).</li> <li>Documented unsupported stages (<code>$merge</code>, <code>$out</code>, <code>$search</code>, <code>$vectorSearch</code>) so assistants respond with the correct guidance.</li> <li>Expanded the usage and integration guides to cover caching parsed pipelines, error handling, and registry patterns.</li> <li>Added enrichment and connector status tables to flag beta/experimental APIs, plus concrete HTTP/SQL examples.</li> <li>Introduced LLM assistant notes and glossary clarifications to emphasise Fluxion's single-document focus.</li> </ul> <p>Earlier history lives in commit messages while the project stabilises. Significant releases will be summarised here as they ship.</p>"},{"location":"glossary/","title":"\ud83e\udde0 Glossary","text":""},{"location":"glossary/#key-concepts","title":"\ud83d\udce6 Key Concepts","text":"<p>Pipeline A series of stages executed in order for each document. In Fluxion Core the focus is currently on single-document transformations (fan-out writes are on the roadmap).</p> <p>Stage A pipeline step (e.g., <code>$match</code>, <code>$group</code>, <code>$project</code>) that transforms documents.</p> <p>Operator An expression keyword like <code>$sum</code>, <code>$map</code>, <code>$add</code>, used inside stages.</p> <p>Accumulator Operators like <code>$sum</code>, <code>$avg</code>, <code>$min</code>, <code>$max</code> used within <code>$group</code>.</p> <p>System Variables - <code>$$ROOT</code>: The entire document. - <code>$$CURRENT</code>: The current level of the document. - <code>$$NOW</code>: Current timestamp. - <code>$$REMOVE</code>: Removes a field from projection. - <code>$$CLUSTER_TIME</code>: Simulated logical timestamp.</p> <p>Executor <code>PipelineExecutor</code> \u2013 the Java entry point that evaluates stages and expressions.</p> <p>Expression Any logic within fields: computations, filters, conditions.</p>"},{"location":"glossary/#stage-operator-catalogues","title":"\ud83e\uddf1 Stage &amp; Operator Catalogues","text":"<p>See the Stages and Operators references for the up-to-date catalogues, syntax, and examples. Stages such as <code>$merge</code>, <code>$out</code>, <code>$search</code>, and <code>$vectorSearch</code> are reserved but not supported in Fluxion Core yet.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>Step-by-step walkthrough for running Fluxion pipelines inside a Java service. This focuses on single-document/request-response scenarios; streaming pipelines have separate guides.</p>"},{"location":"usage/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Fluxion module Add <code>ai.fluxion:fluxion-core</code> to your build. Runtime Java 21+ Pipeline definition JSON file or programmatic builder. Optional helpers Caching library (e.g., Caffeine) if you want to reuse parsed stages."},{"location":"usage/#2-describe-the-pipeline","title":"2. Describe the pipeline","text":"<p>Pipelines reuse MongoDB\u2019s stage syntax. Store them in JSON or construct them in code. Example: enrich a device reading with derived fields.</p> <pre><code>[\n  { \"$match\": { \"status\": \"active\" } },\n  { \"$addFields\": {\n      \"isHot\": { \"$gt\": [\"$temperatureC\", 30] },\n      \"temperatureF\": { \"$add\": [{ \"$multiply\": [\"$temperatureC\", 1.8] }, 32] }\n    }\n  }\n]\n</code></pre>"},{"location":"usage/#3-parse-documents-and-stages","title":"3. Parse documents and stages","text":"<p>Use <code>DocumentParser</code> to load JSON into Fluxion types (or build them manually).</p> <pre><code>List&lt;Document&gt; input = DocumentParser.getDocumentsFromJsonArray(\"\"\"\n  [\n    { \"device\": \"sensor-1\", \"status\": \"active\", \"temperatureC\": 18.6 },\n    { \"device\": \"sensor-2\", \"status\": \"offline\", \"temperatureC\": 31.2 }\n  ]\n\"\"\");\n\nList&lt;Stage&gt; pipeline = DocumentParser.getStagesFromJsonArray(\n    Files.readString(Path.of(\"pipelines/temperature.json\"))\n);\n</code></pre>"},{"location":"usage/#4-execute-with-pipelineexecutor","title":"4. Execute with <code>PipelineExecutor</code>","text":"<p><code>PipelineExecutor</code> runs each document independently against the stage list. Optionally pass globals.</p> <pre><code>PipelineExecutor executor = new PipelineExecutor();\nMap&lt;String, Object&gt; globals = Map.of(\"tenantId\", \"acme\");\nList&lt;Document&gt; transformed = executor.run(input, pipeline, globals);\n</code></pre>"},{"location":"usage/#5-inspect-results","title":"5. Inspect results","text":"<p>Documents are mutable JSON wrappers. Log them or extract fields for downstream processing.</p> <pre><code>transformed.forEach(doc -&gt; {\n    System.out.println(doc.toJson());\n    boolean isHot = (boolean) doc.get(\"isHot\");\n    alertService.recordTemperature(doc.getString(\"device\"), isHot);\n});\n</code></pre> <p>System variables (<code>$$ROOT</code>, <code>$$CURRENT</code>, <code>$$NOW</code>, etc.) are available during execution.</p>"},{"location":"usage/#6-cache-parsed-pipelines","title":"6. Cache parsed pipelines","text":"<p>Parsing JSON on every request is wasteful. Cache the <code>List&lt;Stage&gt;</code> once per pipeline/tenant and reuse it.</p> <pre><code>private final LoadingCache&lt;String, List&lt;Stage&gt;&gt; pipelineCache =\n    Caffeine.newBuilder()\n            .maximumSize(128)\n            .build(name -&gt; DocumentParser.getStagesFromJsonArray(loadPipelineJson(name)));\n\npublic List&lt;Document&gt; execute(String pipelineName, List&lt;Document&gt; input) {\n    List&lt;Stage&gt; stages = pipelineCache.get(pipelineName);\n    return executor.run(input, stages, Map.of());\n}\n</code></pre> <p>Invalidate the cache entry whenever the pipeline definition changes.</p>"},{"location":"usage/#7-error-handling-cheat-sheet","title":"7. Error-handling cheat sheet","text":"Exception When it appears Suggested response <code>IllegalArgumentException</code> Stage/operator payload malformed (missing fields, wrong types). Return a 400-style error with the message for debugging. <code>UnsupportedOperationException</code> Pipeline contains an unimplemented stage (<code>$merge</code>, <code>$out</code>, <code>$search</code>, <code>$vectorSearch</code>). Remove/replace the stage; check the roadmap. Custom <code>RuntimeException</code> User-defined operator/stage threw an error. Validate inputs and wrap exceptions with context. <p>Wrap executor calls in try/catch blocks to translate these into your API\u2019s error model.</p>"},{"location":"usage/#8-testing-validation","title":"8. Testing &amp; validation","text":"<ol> <li>Write regression tests using the examples from <code>docs/examples/</code> or your own fixtures.</li> <li>Run the core module tests to ensure behaviour matches expectations:    <code>bash    mvn -pl fluxion-core test</code></li> <li>Use debug tracing (<code>PipelineDebugStageTrace</code>) when troubleshooting stage behaviour.</li> </ol>"},{"location":"usage/#9-going-further","title":"9. Going further","text":"<ul> <li>Integration Developer Guide \u2013 custom   operators/stages, SPI registration.</li> <li>Stages &amp; Operators \u2013 reference material.</li> <li>Examples Gallery \u2013 advanced pipelines to copy and adapt.</li> <li>Workflow \u2192 Temporal Bridge \u2013 orchestrate rules inside Temporal workflows.</li> </ul> <p>This pattern scales from simple request/response services to complex rule engines. Iterate on the pipeline JSON, rerun the executor, and deploy when the results look right.</p>"},{"location":"connect/","title":"Connector Module Overview","text":"<p>Fluxion Connect packages the ingress/egress connectors that feed streaming pipelines. Use it when you need Kafka, Event Hubs, MongoDB, or custom sources and sinks beyond in-process pipelines.</p>"},{"location":"connect/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Fluxion modules <code>fluxion-core</code>, <code>fluxion-connect</code>, <code>fluxion-enrich</code> (optional for enrichment operators). Runtime host JVM service/worker running the streaming orchestrator. Connector credentials Bootstrap servers, connection strings, auth secrets. Checkpoint store JDBC/Redis/custom store for offsets (when streaming)."},{"location":"connect/#2-module-status","title":"2. Module status","text":"Item Coordinate/Doc Status Notes Module <code>ai.fluxion:fluxion-connect</code> Experimental APIs may shift while streaming runtime stabilises. Kafka Source/Sink connect/kafka.md Beta Reference implementation of the connector SPI. Event Hubs Source/Sink connect/eventhub.md Alpha Azure Event Hubs ingestion/delivery. MongoDB Source/Sink connect/mongodb.md Alpha MongoDB change streams + writers. Custom Sources connect/custom-sources.md How-to Build bespoke connectors with the SPI. <p>When asked about connectors other than those listed (HTTP, JDBC CDC, etc.), respond that they are not yet implemented and point to the custom SPI guide.</p>"},{"location":"connect/#3-connector-architecture","title":"3. Connector architecture","text":"Component Purpose <code>SourceConnectorProvider</code> / <code>SinkConnectorProvider</code> Declarative metadata (id, description, option schema). <code>SourceConnectorConfig</code> / <code>ConnectorConfig</code> User-supplied options validated against the schema. <code>SourceConnectorContext</code> Provides checkpoint stores, pipeline id, metrics. <code>ConnectorRegistry</code> Discovers providers via ServiceLoader, validates configs, and instantiates connectors."},{"location":"connect/#4-usage-steps","title":"4. Usage steps","text":"<ol> <li>Add the module</li> </ol> <p><code>xml    &lt;dependency&gt;      &lt;groupId&gt;ai.fluxion&lt;/groupId&gt;      &lt;artifactId&gt;fluxion-connect&lt;/artifactId&gt;      &lt;version&gt;${fluxion.version}&lt;/version&gt;    &lt;/dependency&gt;</code></p> <p>Providers are discovered via Java\u2019s <code>ServiceLoader</code>; no explicit registration    is required if the jar is on the classpath.</p> <ol> <li>Describe source and sink</li> </ol> <p>```java    SourceConnectorConfig source = SourceConnectorConfig.builder(\"kafka\")            .option(\"topic\", \"orders-in\")            .option(\"bootstrapServers\", \"localhost:9092\")            .build();</p> <p>ConnectorConfig sink = ConnectorConfig.builder(\"kafka\", ConnectorConfig.Kind.SINK)            .option(\"topic\", \"orders-out\")            .option(\"bootstrapServers\", \"localhost:9092\")            .build();    ```</p> <p>Consult each connector page for required/optional options and defaults.</p> <ol> <li>Build the pipeline definition</li> </ol> <p><code>java    StreamingPipelineDefinition definition = StreamingPipelineDefinition.builder(source)            .sinkConfig(sink)            .stages(pipelineStages)            .build();</code></p> <ol> <li>Run with the orchestrator</li> </ol> <p><code>java    new StreamingPipelineOrchestrator().run(definition, runtimeConfig);</code></p>"},{"location":"connect/#5-configuration-table-common-options","title":"5. Configuration table (common options)","text":"Option Connectors Description <code>bootstrapServers</code> Kafka Comma-separated broker list. <code>topic</code> Kafka, Event Hubs Source/sink topic or event hub. <code>groupId</code> Kafka Consumer group for checkpointing. <code>connectionString</code> Event Hubs, MongoDB Service connection string/URI. <code>checkpointStore</code> All streaming connectors Where offsets are saved (JDBC, Redis, etc.). <p>Refer to the connector-specific docs for security settings (SASL, TLS, Azure SAS, Mongo credentials) and batching controls.</p>"},{"location":"connect/#6-built-in-connectors","title":"6. Built-in connectors","text":"Connector Direction Highlights Kafka Source &amp; Sink Backpressure-aware batching, SASL/TLS support, per-batch metrics. Event Hubs Source &amp; Sink Consumer groups, partition lease management, Azure identity options. MongoDB Source &amp; Sink Change-stream support, resume tokens, upsert/replace modes. <p>Each connector page contains option schema tables, example configurations, and operational caveats.</p>"},{"location":"connect/#7-custom-connectors","title":"7. Custom connectors","text":"<ul> <li>Implement <code>SourceConnectorProvider</code>/<code>SinkConnectorProvider</code> and register via   <code>META-INF/services</code> (see custom-sources.md).</li> <li>Provide a clear option schema with validation messages\u2014LLMs and tooling rely on   those hints to prompt users.</li> <li>Reuse shared components: checkpoint store SPI, metrics listener, error policy.</li> <li>Document new connectors under this section to keep the matrix up to date.</li> </ul>"},{"location":"connect/#8-references","title":"8. References","text":"Path Description <code>fluxion-core/src/main/java/.../ConnectorRegistry.java</code> Central registry for source/sink providers. <code>fluxion-core/src/main/java/.../SourceConnectorProvider.java</code> Provider contract. <code>fluxion-core/src/main/java/.../SourceConnectorConfig.java</code> Config builder/validation. <code>fluxion-docs/docs/connect/kafka.md</code> Kafka-specific options and examples. <code>fluxion-docs/docs/connect/custom-sources.md</code> SPI guide for bespoke connectors. <p>Run connector tests along with streaming tests:</p> <pre><code>mvn -pl fluxion-core -am test\n</code></pre> <p>This ensures connector discovery, option validation, and streaming executors are validated together.</p>"},{"location":"connect/custom-sources/","title":"Custom Sources &amp; JDBC Integration","text":"<p>Build bespoke streaming sources (e.g., JDBC, REST, proprietary queues) by implementing the streaming SPI. This guide shows how to implement a JDBC-backed source, signal end-of-stream, and resume from checkpoints.</p>"},{"location":"connect/custom-sources/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Dependency <code>ai.fluxion:fluxion-core</code> (streaming runtime) and your JDBC driver. Data source Database/API with incremental offsets (primary key, timestamp, resume token). Checkpoint store Persist offsets using <code>StreamingContext.stateStore()</code> or external storage."},{"location":"connect/custom-sources/#2-when-to-build-a-custom-source","title":"2. When to build a custom source","text":"<ul> <li>No built-in connector exists for your system.</li> <li>You need custom batching/backpressure behaviour.</li> <li>You want to enrich/transform records before they hit the pipeline.</li> </ul> <p>The contract is straightforward: implement <code>StreamingSource</code> or extend <code>AbstractAsyncStreamingSource</code>, returning batches of <code>Document</code>s. The pipeline executor owns polling, backpressure, and shutdown.</p>"},{"location":"connect/custom-sources/#3-minimal-jdbc-source-example","title":"3. Minimal JDBC source example","text":"<pre><code>class JdbcStreamingSource extends AbstractAsyncStreamingSource {\n    private final DataSource dataSource;\n    private final int batchSize;\n    private long offset;\n    private boolean finished;\n\n    JdbcStreamingSource(DataSource dataSource, int queueCapacity, int batchSize) {\n        super(queueCapacity);\n        this.dataSource = dataSource;\n        this.batchSize = batchSize;\n    }\n\n    @Override\n    protected List&lt;Document&gt; poll() {\n        if (finished) {\n            return null; // signals end-of-stream\n        }\n        try (Connection conn = dataSource.getConnection();\n             PreparedStatement ps = conn.prepareStatement(\n                     \"SELECT id, amount FROM orders WHERE id &gt; ? ORDER BY id ASC LIMIT ?\")) {\n            ps.setLong(1, offset);\n            ps.setInt(2, batchSize);\n            try (ResultSet rs = ps.executeQuery()) {\n                List&lt;Document&gt; batch = new ArrayList&lt;&gt;();\n                while (rs.next()) {\n                    Document doc = new Document();\n                    doc.put(\"_id\", rs.getLong(\"id\"));\n                    doc.put(\"amount\", rs.getBigDecimal(\"amount\"));\n                    batch.add(doc);\n                    offset = rs.getLong(\"id\");\n                }\n                if (batch.isEmpty()) {\n                    finished = true;\n                }\n                return batch;\n            }\n        } catch (SQLException e) {\n            throw new RuntimeException(\"JDBC source failed\", e);\n        }\n    }\n}\n</code></pre> <p>Highlights</p> <ul> <li>Returning <code>null</code> tells <code>AbstractAsyncStreamingSource</code> to enqueue an   end-of-stream marker. The executor flushes remaining stages and closes sinks.</li> <li>Wrap polling in retry/backoff logic (or rely on <code>StreamingErrorPolicy</code>) if   your data source can transiently fail.</li> <li>Persist <code>offset</code> (primary key) to resume after restarts.</li> </ul>"},{"location":"connect/custom-sources/#4-wiring-into-a-pipeline","title":"4. Wiring into a pipeline","text":"<pre><code>StreamingSource source = new JdbcStreamingSource(dataSource, 64, 500);\nStreamingSink sink = documents -&gt; documents.forEach(System.out::println);\n\nStreamingRuntimeConfig config = StreamingRuntimeConfig.builder()\n        .directHandoff(true)\n        .build();\n\nStreamingPipelineExecutor executor =\n        new StreamingPipelineExecutor(500, config, StreamingErrorPolicy.failFast());\nexecutor.processStream(source, stages, sink, new StreamingContext());\n</code></pre> <p>Steps:</p> <ol> <li>Instantiate source and sink.</li> <li>Build <code>StreamingRuntimeConfig</code> and <code>StreamingContext</code>.</li> <li>Invoke <code>processStream(..)</code> or use <code>StreamingPipelineOrchestrator</code>.</li> </ol> <p>Nothing happens until you call the executor.</p>"},{"location":"connect/custom-sources/#5-stopping-restarting","title":"5. Stopping &amp; restarting","text":""},{"location":"connect/custom-sources/#signal-completion","title":"Signal completion","text":"<pre><code>if (batch.isEmpty()) {\n    finished = true;\n    return null; // executor shuts the pipeline down\n}\n</code></pre>"},{"location":"connect/custom-sources/#persist-checkpoints","title":"Persist checkpoints","text":"<pre><code>private void storeCheckpoint(long id, StreamingContext context) {\n    context.stateStore().put(\"jdbc-source\", \"lastId\", id);\n}\n</code></pre>"},{"location":"connect/custom-sources/#resume-from-checkpoint","title":"Resume from checkpoint","text":"<pre><code>long lastId = Optional.ofNullable(context.stateStore()\n        .&lt;Long&gt;get(\"jdbc-source\", \"lastId\"))\n        .orElse(0L);\nStreamingSource source = new JdbcStreamingSource(dataSource, 64, 500 /* batch */, lastId);\nnew StreamingPipelineExecutor(500, config, StreamingErrorPolicy.failFast())\n        .processStream(source, stages, sink, context);\n</code></pre> <p>Also restore sink state if downstream systems require idempotence.</p>"},{"location":"connect/custom-sources/#6-checklist","title":"6. Checklist","text":"Step Ensure Source implementation Converts each record to a Fluxion <code>Document</code>. Queue/backpressure Tune <code>queueCapacity</code> to balance latency vs. memory. Checkpoints Persist offsets/resume tokens via <code>StreamingContext</code>. Completion signal Return <code>null</code> or empty batch when no records remain. Error handling Combine with <code>StreamingErrorPolicy</code> for retries/DLQs."},{"location":"connect/custom-sources/#7-batch-job-pattern","title":"7. Batch job pattern","text":"<p>Treat finite sources (JDBC, CSV) like batch jobs:</p> <ul> <li>Iterate rows sequentially.</li> <li>Run decision logic inside Fluxion stages.</li> <li>Use sinks to update downstream systems.</li> <li>Once the source is exhausted and signals completion, the executor terminates.</li> </ul> <p>You can still enable parallelism by adjusting <code>StreamingRuntimeConfig</code> (e.g., <code>directHandoff(false)</code>, custom worker pools).</p>"},{"location":"connect/custom-sources/#8-testing","title":"8. Testing","text":"<ul> <li>Write unit tests for your source implementation with in-memory databases (H2).</li> <li>Run streaming tests:   <code>bash   mvn -pl fluxion-core -am test -Dtest=*StreamingPipeline*</code></li> </ul>"},{"location":"connect/custom-sources/#9-references","title":"9. References","text":"Path Description <code>fluxion-core/src/main/java/.../StreamingSource.java</code> Core source interface. <code>fluxion-core/src/main/java/.../AbstractAsyncStreamingSource.java</code> Base class with polling thread + queue. <code>fluxion-core/src/main/java/.../StreamingPipelineExecutor.java</code> Orchestrator entry point. <code>fluxion-docs/docs/streaming/quickstart.md</code> Pipeline example (Kafka \u2192 HTTP). <p>Use this template to add JDBC or other bespoke sources to the Fluxion streaming runtime.</p>"},{"location":"connect/eventhub/","title":"Azure Event Hubs Connectors","text":"<p>Fluxion Connect includes Event Hubs source and sink connectors so pipelines can ingest from and publish back to Azure Event Hubs without extra glue code.</p>"},{"location":"connect/eventhub/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Dependency <code>ai.fluxion:fluxion-connect</code> plus <code>com.azure:azure-messaging-eventhubs</code>. Azure namespace Event Hubs namespace reachable from the Fluxion service. Access SAS connection string with <code>Listen</code>/<code>Send</code> permissions as needed. Checkpoint store JDBC/Redis/custom store when running streaming pipelines."},{"location":"connect/eventhub/#2-source-configuration-type-eventhub","title":"2. Source configuration (<code>type: eventhub</code>)","text":""},{"location":"connect/eventhub/#yaml-snippet","title":"YAML snippet","text":"<pre><code>source:\n  type: eventhub\n  options:\n    connectionString: \"Endpoint=sb://your-namespace.servicebus.windows.net/;SharedAccessKeyName=...\"\n    eventHubName: orders\n    consumerGroup: $Default\n    queueCapacity: 64\n    maxBatchSize: 128\n    maxWaitTime: PT5S\n    startPosition: earliest\n    prefetchCount: 300\n</code></pre>"},{"location":"connect/eventhub/#options","title":"Options","text":"Option Description Default <code>connectionString</code> Azure Event Hubs connection string (can include entity path). Required <code>eventHubName</code> Event hub to read from (omit if set in the connection string). <code>null</code> <code>consumerGroup</code> Consumer group used by the receiver. <code>$Default</code> <code>queueCapacity</code> Internal queue size between Event Hubs client and pipeline. <code>32</code> <code>maxBatchSize</code> Maximum events delivered per pipeline batch. <code>128</code> <code>maxWaitTime</code> Time to wait before emitting an empty batch (ISO-8601). <code>PT5S</code> <code>startPosition</code> <code>earliest</code> or <code>latest</code>. <code>earliest</code> <code>prefetchCount</code> Client prefetch size. <code>null</code>"},{"location":"connect/eventhub/#3-sink-configuration-type-eventhub","title":"3. Sink configuration (<code>type: eventhub</code>)","text":""},{"location":"connect/eventhub/#yaml-snippet_1","title":"YAML snippet","text":"<pre><code>sink:\n  type: eventhub\n  options:\n    connectionString: \"Endpoint=sb://your-namespace.servicebus.windows.net/;SharedAccessKeyName=...\"\n    eventHubName: orders-out\n    batchSize: 100\n    flushTimeout: PT10S\n    partitionId: \"0\"\n    partitionKey: customer-id\n</code></pre>"},{"location":"connect/eventhub/#options_1","title":"Options","text":"Option Description Default <code>connectionString</code> Event Hubs connection string. Required <code>eventHubName</code> Event hub to publish to. <code>null</code> <code>batchSize</code> Maximum documents batched per send. <code>100</code> <code>flushTimeout</code> Wait for send completion (ISO-8601). <code>PT10S</code> <code>partitionId</code> Fixed partition id. Mutually exclusive with <code>partitionKey</code>. <code>null</code> <code>partitionKey</code> Partition key applied to the batch. <code>null</code>"},{"location":"connect/eventhub/#4-troubleshooting","title":"4. Troubleshooting","text":"Symptom Possible cause Remedy <code>IllegalArgumentException: connectionString missing</code> Config validation failure. Provide a connection string with <code>Endpoint</code>, <code>SharedAccessKeyName</code>, <code>SharedAccessKey</code>. <code>com.azure.messaging.eventhubs.EventHubsException$ResourceNotFound</code> Wrong <code>eventHubName</code> or insufficient permissions. Verify event hub exists and credentials have access. Events stalled Consumer group checkpoint ahead of stream. Change <code>consumerGroup</code> or reset checkpoints. Sink retries indefinitely Namespace unreachable or throttled. Adjust <code>StreamingErrorPolicy</code> (dead-letter/skip) and review Azure throttling limits."},{"location":"connect/eventhub/#5-testing","title":"5. Testing","text":"<ul> <li>Run Event Hubs connector tests:   <code>bash   mvn -pl fluxion-core -am test -Dtest=*EventHub*</code></li> <li>Local testing requires an Azure Event Hubs namespace (no official local emulator). Use a dev namespace with shared access keys.</li> </ul>"},{"location":"connect/eventhub/#6-references","title":"6. References","text":"Path Description <code>fluxion-core/src/main/java/.../EventHubSourceConnectorProvider.java</code> Source provider implementation. <code>fluxion-core/src/main/java/.../EventHubSinkConnectorProvider.java</code> Sink provider implementation. Azure docs Event Hubs connection strings <p>Use these templates to bootstrap your streaming pipelines; tweak batching and queue sizes based on throughput and latency requirements.</p>"},{"location":"connect/kafka/","title":"Kafka Connectors","text":"<p>Fluxion Connect exposes Kafka as both a streaming source and sink. The connectors share the same SPI used across the platform, so the configuration maps cleanly onto streaming pipelines, error policies, and metrics.</p>"},{"location":"connect/kafka/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Dependency Add <code>ai.fluxion:fluxion-connect</code> plus Kafka client (<code>org.apache.kafka:kafka-clients</code>). Kafka cluster Brokers reachable from the Fluxion service. Tested on Kafka 2.8+. Credentials (optional) SASL/TLS material if connecting to secure clusters. Checkpoint store JDBC/Redis/custom store for offsets when streaming."},{"location":"connect/kafka/#2-source-configuration-type-kafka","title":"2. Source configuration (<code>type: kafka</code>)","text":""},{"location":"connect/kafka/#yaml-snippet","title":"YAML snippet","text":"<pre><code>source:\n  type: kafka\n  options:\n    topic: orders\n    bootstrapServers: localhost:9092\n    pollTimeout: PT0.5S\n    queueCapacity: 64\n    keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer\n    valueDeserializer: org.apache.kafka.common.serialization.StringDeserializer\n    securityProtocol: SASL_SSL\n    saslMechanism: PLAIN\n    saslJaasConfig: &gt;\n      org.apache.kafka.common.security.plain.PlainLoginModule required\n      username=\"user\" password=\"pass\";\n    enable.auto.commit: false   # passes through to Kafka consumer properties\n</code></pre>"},{"location":"connect/kafka/#options","title":"Options","text":"Option Description Default <code>topic</code> Kafka topic to subscribe to. Required <code>bootstrapServers</code> Comma-separated list of brokers. Required <code>pollTimeout</code> Consumer poll wait (ISO-8601 duration). <code>PT0.5S</code> <code>queueCapacity</code> Internal queue size feeding the pipeline. <code>16</code> <code>keyDeserializer</code> Kafka key deserializer class. <code>StringDeserializer</code> <code>valueDeserializer</code> Kafka value deserializer class. <code>StringDeserializer</code> <code>groupId</code> Consumer group id override. <code>fluxion-&lt;topic&gt;</code> <code>securityProtocol</code> Kafka <code>security.protocol</code> (e.g., <code>SSL</code>, <code>SASL_SSL</code>). <code>null</code> <code>saslMechanism</code> Kafka <code>sasl.mechanism</code> (e.g., <code>SCRAM-SHA-512</code>). <code>null</code> <code>saslJaasConfig</code> JAAS config string for SASL. <code>null</code> <p>All additional keys under <code>options</code> are copied into the consumer <code>Properties</code> object, so you can enable idempotent consumers, partition assignment strategies, or custom timeouts.</p>"},{"location":"connect/kafka/#3-sink-configuration-type-kafka","title":"3. Sink configuration (<code>type: kafka</code>)","text":""},{"location":"connect/kafka/#yaml-snippet_1","title":"YAML snippet","text":"<pre><code>sink:\n  type: kafka\n  options:\n    topic: orders-out\n    bootstrapServers: localhost:9092\n    batchSize: 200\n    flushTimeout: PT5S\n    acks: all\n    keySerializer: org.apache.kafka.common.serialization.StringSerializer\n    valueSerializer: org.apache.kafka.common.serialization.StringSerializer\n    compression.type: gzip\n</code></pre>"},{"location":"connect/kafka/#options_1","title":"Options","text":"Option Description Default <code>topic</code> Kafka topic to publish to. Required <code>bootstrapServers</code> Comma-separated broker list. Required <code>batchSize</code> Records per send batch. <code>100</code> <code>flushTimeout</code> Wait for acknowledgements (ISO-8601). <code>PT10S</code> <code>acks</code> Producer acknowledgement level (<code>acks</code>). <code>1</code> <code>keySerializer</code> Kafka key serializer class. <code>StringSerializer</code> <code>valueSerializer</code> Kafka value serializer class. <code>StringSerializer</code> <code>securityProtocol</code> / <code>saslMechanism</code> / <code>saslJaasConfig</code> Same as source. <code>null</code> <p>Additional producer options (linger, retries, idempotence, compression) are passed through untouched.</p>"},{"location":"connect/kafka/#4-security-options","title":"4. Security options","text":"Scenario Required settings TLS without auth <code>securityProtocol: SSL</code> plus truststore configuration (system properties or Kafka props). SASL/PLAIN <code>securityProtocol: SASL_SSL</code>, <code>saslMechanism: PLAIN</code>, <code>saslJaasConfig: ...</code>. SCRAM <code>securityProtocol: SASL_SSL</code>, <code>saslMechanism: SCRAM-SHA-512</code>, JAAS string with username/password. Kerberos <code>securityProtocol: SASL_PLAINTEXT</code>, <code>saslMechanism: GSSAPI</code>, JAAS config referencing keytab/krb5. <p>Consult Kafka\u2019s security docs for the exact property names; any additional keys (e.g., <code>ssl.truststore.location</code>) can be added directly to <code>options</code>.</p>"},{"location":"connect/kafka/#5-troubleshooting","title":"5. Troubleshooting","text":"Symptom Possible cause Remedy <code>NoSuchMethodError</code> on Kafka classes Version mismatch between <code>fluxion-connect</code> and your Kafka client. Align Kafka client version with the cluster (2.8+ recommended). Consumer stuck at oldest offset <code>groupId</code> shared across environments. Set a unique group id per environment or use <code>auto.offset.reset</code>. <code>TopicAuthorizationFailed</code> Missing ACLs or credentials. Verify SASL/TLS settings and broker ACLs. Sink retries endlessly Downstream brokers unavailable. Adjust <code>StreamingErrorPolicy</code> (dead-letter/skip) or configure Kafka producer retries."},{"location":"connect/kafka/#6-testing","title":"6. Testing","text":"<ul> <li>Run connector tests alongside streaming tests:   <code>bash   mvn -pl fluxion-core -am test -Dtest=*Kafka*</code></li> <li>Local broker for manual testing: <code>docker run --rm -p 9092:9092 confluentinc/cp-kafka</code>.</li> </ul>"},{"location":"connect/kafka/#7-references","title":"7. References","text":"Path Description <code>fluxion-core/src/main/java/.../KafkaSourceConnectorProvider.java</code> Source provider implementation. <code>fluxion-core/src/main/java/.../KafkaSinkConnectorProvider.java</code> Sink provider implementation. <code>fluxion-docs/docs/streaming/quickstart.md</code> Kafka \u2192 HTTP streaming tutorial. <p>Use these snippets as templates for your own pipeline definitions and adjust properties according to your cluster\u2019s configuration.</p>"},{"location":"connect/mongodb/","title":"MongoDB Connectors","text":"<p>Fluxion Connect ships MongoDB source and sink connectors so pipelines can watch change streams and persist results back to collections.</p>"},{"location":"connect/mongodb/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Dependency <code>ai.fluxion:fluxion-connect</code> plus MongoDB driver (<code>org.mongodb:mongodb-driver-sync</code>). Cluster type Replica set or sharded cluster (change streams are not supported on stand\u2011alone instances). Permissions User with change-stream privileges (<code>read</code>, <code>readWrite</code>, <code>changeStream</code>). Checkpoint store JDBC/Redis/custom store for streaming offsets."},{"location":"connect/mongodb/#2-source-configuration-type-mongodb","title":"2. Source configuration (<code>type: mongodb</code>)","text":""},{"location":"connect/mongodb/#yaml-snippet","title":"YAML snippet","text":"<pre><code>source:\n  type: mongodb\n  options:\n    connectionString: \"mongodb://mongo0:27017,mongo1:27017/?replicaSet=rs0\"\n    database: orders\n    collection: events\n    queueCapacity: 64\n    maxBatchSize: 128\n    maxAwaitTime: PT5S\n    fullDocument: update_lookup\n    pipeline:\n      - { $match: { operationType: { $in: [\"insert\", \"replace\", \"update\"] } } }\n</code></pre>"},{"location":"connect/mongodb/#options","title":"Options","text":"Option Description Default <code>connectionString</code> MongoDB connection string pointing to replica set / sharded cluster. Required <code>database</code> Database to monitor. Required <code>collection</code> Collection to monitor. Required <code>pipeline</code> Additional aggregation stages applied to the change stream. <code>[]</code> <code>queueCapacity</code> Internal queue size feeding the pipeline. <code>64</code> <code>maxBatchSize</code> Maximum events per batch. <code>128</code> <code>maxAwaitTime</code> Wait before emitting empty batches (ISO-8601). <code>PT5S</code> <code>fullDocument</code> <code>default</code>, <code>update_lookup</code>, <code>when_available</code>, or <code>required</code>. <code>default</code>"},{"location":"connect/mongodb/#3-sink-configuration-type-mongodb","title":"3. Sink configuration (<code>type: mongodb</code>)","text":""},{"location":"connect/mongodb/#yaml-snippet_1","title":"YAML snippet","text":"<pre><code>sink:\n  type: mongodb\n  options:\n    connectionString: \"mongodb://mongo0:27017,mongo1:27017/?replicaSet=rs0\"\n    database: analytics\n    collection: enriched_orders\n    mode: upsert\n    keyField: _id\n    writeConcern: MAJORITY\n</code></pre>"},{"location":"connect/mongodb/#options_1","title":"Options","text":"Option Description Default <code>connectionString</code> MongoDB connection string. Required <code>database</code> Database to write to. Required <code>collection</code> Collection to write to. Required <code>mode</code> <code>insert</code>, <code>replace</code>, or <code>upsert</code>. <code>insert</code> <code>keyField</code> Field used to identify documents for replace/upsert. <code>_id</code> <code>writeConcern</code> Write concern (<code>ACKNOWLEDGED</code>, <code>MAJORITY</code>, etc.). <code>ACKNOWLEDGED</code>"},{"location":"connect/mongodb/#4-troubleshooting","title":"4. Troubleshooting","text":"Symptom Possible cause Remedy <code>IllegalArgumentException: connectionString missing</code> Config validation failure. Supply a replica-set/sharded connection string. <code>MongoCommandException: Change streams not enabled</code> Connecting to standalone server. Configure a replica set or sharded cluster. Events lagging Change stream backlog or slow consumer. Increase <code>queueCapacity</code>/<code>maxBatchSize</code> and inspect MongoDB performance metrics. Sink duplicate key errors Upsert/replace without matching <code>keyField</code>. Set <code>mode</code> appropriately and ensure documents contain the key field."},{"location":"connect/mongodb/#5-testing","title":"5. Testing","text":"<ul> <li>Run MongoDB connector tests:   <code>bash   mvn -pl fluxion-core -am test -Dtest=*Mongo*</code></li> <li>Integration tests require access to a MongoDB replica set; for local use, spin   up <code>docker compose</code> with <code>--replSet</code> enabled or use MongoDB\u2019s test containers.</li> </ul>"},{"location":"connect/mongodb/#6-references","title":"6. References","text":"Path Description <code>fluxion-core/src/main/java/.../MongoSourceConnectorProvider.java</code> Source provider implementation. <code>fluxion-core/src/main/java/.../MongoSinkConnectorProvider.java</code> Sink provider implementation. MongoDB docs Change streams, write concern. <p>Use these templates to wire MongoDB into streaming pipelines, adjusting queue/batch settings to balance latency versus throughput.</p>"},{"location":"core/","title":"Core Platform Overview","text":"<p>Fluxion Core is the foundation for every module. It houses the pipeline executor, JSON parsers, stage/operator registries, and extension points you use to embed Fluxion in applications or build custom stages.</p>"},{"location":"core/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Fluxion dependency Add <code>ai.fluxion:fluxion-core</code> to your build. Runtime Java 21+ (same baseline as the rest of the platform). JSON pipelines Store pipeline definitions as JSON or build them programmatically. Optional <code>fluxion-enrich</code>, <code>fluxion-connect</code>, <code>fluxion-rules</code> when needed."},{"location":"core/#2-runtime-components","title":"2. Runtime components","text":"Component Purpose <code>PipelineExecutor</code> Evaluates documents against a list of stages. <code>DocumentParser</code> Parses JSON into <code>Document</code>/<code>Stage</code> objects. <code>Document</code> Mutable JSON wrapper representing a record. <code>Stage</code> Single pipeline stage (MongoDB syntax). System variables <code>$$ROOT</code>, <code>$$CURRENT</code>, <code>$$NOW</code>, <code>$$REMOVE</code>, etc. available during evaluation. Registries <code>StageRegistry</code>, <code>OperatorRegistry</code>, <code>ExpressionRegistry</code> expose built-in logic."},{"location":"core/#sample-usage","title":"Sample usage","text":"<pre><code>List&lt;Document&gt; input = DocumentParser.getDocumentsFromJsonArray(jsonString);\nList&lt;Stage&gt; stages = DocumentParser.getStagesFromJsonArray(pipelineJson);\nPipelineExecutor executor = new PipelineExecutor();\nList&lt;Document&gt; output = executor.run(input, stages, Map.of());\n</code></pre>"},{"location":"core/#3-extension-points","title":"3. Extension points","text":"Extension How to Notes Custom operator Implement <code>Operator</code>, register via <code>OperatorContributor</code> (<code>META-INF/services</code>). Used for domain-specific expressions. Custom stage Implement <code>StageHandler</code>, register via <code>StageHandlerContributor</code>. Great for bespoke aggregation stages. Custom pipeline action Implement <code>PipelineAction</code> for reusable action logic. Often used in rule engine integrations. <p>For detailed examples see <code>core/integration-developer-guide.md</code>.</p>"},{"location":"core/#4-observability-toolkit","title":"4. Observability toolkit","text":"Tool Description <code>StageMetrics</code> Captures per-stage counters and timings. <code>StageMetricsOtelBridge</code> Emits metrics to OpenTelemetry. Debug tracing Enable via <code>PipelineDebugStageTrace</code> for stage-by-stage inspection. Test fixtures Helpers in <code>ai.fluxion.core.util</code> generate documents and verify output. <p>Run core tests to validate your extensions:</p> <pre><code>mvn -pl fluxion-core test\n</code></pre>"},{"location":"core/#5-reading-guide","title":"5. Reading guide","text":"Section Use it when Usage Guide End-to-end tutorial with parsing + executor samples. Integration Developer Guide Custom operators, stages, and SPI registration. Stages Reference Detailed stage semantics. Operators Reference Expression/operator catalogue. Examples Gallery Ready-made pipelines to copy/adapt. Observability &amp; Metrics Stage metrics and OpenTelemetry bridge."},{"location":"core/#6-reference-source-files","title":"6. Reference source files","text":"Path Description <code>fluxion-core/src/main/java/.../PipelineExecutor.java</code> Core executor implementation. <code>fluxion-core/src/main/java/.../DocumentParser.java</code> JSON parsing utilities. <code>fluxion-core/src/main/java/.../StageRegistry.java</code> Stage discovery and registration. <code>fluxion-core/src/main/java/.../OperatorRegistry.java</code> Operator discovery and registration. <code>fluxion-core/src/test/java/...</code> Regression tests covering pipeline behaviour. <p>Keep these references handy when extending Fluxion or integrating it into new services.</p>"},{"location":"core/integration-developer-guide/","title":"Integration Developer Guide","text":"<p>Fluxion targets engineers who need MongoDB-style analytics and enrichment inside their own services without operating a database engine. This guide shows how to assemble aggregation pipelines, execute them in-process, and extend Fluxion with custom operators or stages.</p>"},{"location":"core/integration-developer-guide/#audience-checklist","title":"Audience Checklist","text":"<ul> <li>You embed Fluxion into a JVM service (Spring Boot, Quarkus, Micronaut, etc.).</li> <li>You want the pipeline DSL (Mongo-style stages and expressions) for batch or request/response workloads.</li> <li>You may need to add bespoke stages or operators for domain-specific logic.</li> </ul>"},{"location":"core/integration-developer-guide/#dependencies","title":"Dependencies","text":"<p>Add the modules that match the features you plan to use. At minimum you will need <code>fluxion-core</code>. Add <code>fluxion-enrich</code> if you rely on <code>$httpCall</code>, <code>$sqlQuery</code>, or other service-aware operators.</p> <pre><code>&lt;dependencyManagement&gt;\n  &lt;dependencies&gt;\n    &lt;dependency&gt;\n      &lt;groupId&gt;ai.fluxion&lt;/groupId&gt;\n      &lt;artifactId&gt;fluxion-bom&lt;/artifactId&gt;\n      &lt;version&gt;${fluxion.version}&lt;/version&gt;\n      &lt;type&gt;pom&lt;/type&gt;\n      &lt;scope&gt;import&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n\n&lt;dependencies&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;ai.fluxion&lt;/groupId&gt;\n    &lt;artifactId&gt;fluxion-core&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n  &lt;!-- Optional enrichment operators --&gt;\n  &lt;dependency&gt;\n    &lt;groupId&gt;ai.fluxion&lt;/groupId&gt;\n    &lt;artifactId&gt;fluxion-enrich&lt;/artifactId&gt;\n  &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"core/integration-developer-guide/#pipeline-anatomy","title":"Pipeline Anatomy","text":"<p>Fluxion reuses MongoDB aggregation constructs. A pipeline is composed of:</p> <ul> <li>Stage list: ordered MongoDB-style stages (<code>$match</code>, <code>$project</code>, <code>$group</code>, <code>$setWindowFields</code>, etc.).</li> <li>Expressions: stage payloads that use operators (<code>$add</code>, <code>$map</code>, <code>$dateDiff</code>, etc.).</li> <li>Documents: input data represented as <code>ai.fluxion.core.model.Document</code>.</li> <li>Globals: optional immutable values available to all expressions (<code>$$GLOBALS</code>).</li> </ul> <p>The same stage list can be executed repeatedly on new data, making it easy to store pipeline definitions in configuration or generate them dynamically.</p>"},{"location":"core/integration-developer-guide/#example-pipeline-json","title":"Example Pipeline JSON","text":"<p>The example below scores incoming telemetry, buckets devices by health, and emits a condensed document.</p> <pre><code>[\n  { \"$match\": { \"status\": { \"$ne\": \"offline\" } } },\n  { \"$addFields\": {\n      \"score\": {\n        \"$sum\": [\n          { \"$multiply\": [\"$metrics.uptimeHours\", 0.1] },\n          { \"$multiply\": [\"$metrics.signalQuality\", 0.4] },\n          { \"$multiply\": [\"$metrics.packetSuccess\", 0.5] }\n        ]\n      }\n    }\n  },\n  { \"$bucket\": {\n      \"groupBy\": \"$score\",\n      \"boundaries\": [0, 40, 70, 85, 100],\n      \"default\": \"investigate\",\n      \"output\": {\n        \"devices\": { \"$push\": \"$deviceId\" },\n        \"averageTemp\": { \"$avg\": \"$metrics.temperatureC\" }\n      }\n    }\n  },\n  { \"$project\": {\n      \"_id\": 0,\n      \"healthBand\": \"$_id\",\n      \"devices\": 1,\n      \"averageTemp\": 1,\n      \"processedAt\": { \"$literal\": { \"$date\": \"$$NOW\" } }\n    }\n  }\n]\n</code></pre> <p>Save the JSON to a config store, bundle it with your service, or generate it dynamically.</p>"},{"location":"core/integration-developer-guide/#running-the-pipeline","title":"Running the Pipeline","text":"<p>You can construct stages programmatically or parse JSON using <code>DocumentParser</code>. The snippet below shows batch execution with <code>PipelineExecutor</code>.</p> <pre><code>import ai.fluxion.core.engine.PipelineExecutor;\nimport ai.fluxion.core.model.Document;\nimport ai.fluxion.core.model.Stage;\nimport ai.fluxion.core.util.DocumentParser;\n\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\nimport java.util.Map;\n\nList&lt;Document&gt; input = DocumentParser.getDocumentsFromJsonArray(\n    Files.readString(Path.of(\"data/telemetry-sample.json\"))\n);\n\nList&lt;Stage&gt; stages = DocumentParser.getStagesFromJsonArray(\n    Files.readString(Path.of(\"pipelines/telemetry.json\"))\n);\n\nPipelineExecutor executor = new PipelineExecutor();\nList&lt;Document&gt; results = executor.run(input, stages, Map.of(\"tenantId\", \"acme\"));\n\nresults.forEach(doc -&gt; System.out.println(doc.toJson()));\n</code></pre> <p>Key points:</p> <ul> <li><code>DocumentParser</code> converts JSON arrays into Fluxion <code>Document</code> and <code>Stage</code> instances.</li> <li><code>PipelineExecutor#run</code> accepts the input documents, stage list, and optional globals.</li> <li>Pipelines are pure functions: they return a new list of documents without mutating the input.</li> </ul>"},{"location":"core/integration-developer-guide/#managing-pipeline-definitions","title":"Managing Pipeline Definitions","text":"<ul> <li>Storage options: keep pipeline JSON in source control, a config server (Spring Cloud Config, Consul), or a database table keyed by tenant. The executor is agnostic as long as you can load the JSON string.</li> <li>Cache parsed stages: parsing on every request is wasteful. Cache the <code>List&lt;Stage&gt;</code> per pipeline identifier and invalidate the cache when your configuration changes.</li> </ul> <p>```java   record PipelineHandle(List stages, Instant lastModified) {} <p>class PipelineRepository {       private final ConcurrentMap cache = new ConcurrentHashMap&lt;&gt;(); <pre><code>  PipelineHandle resolve(String name) {\n      return cache.compute(name, (key, existing) -&gt; {\n          LoadedPipeline loaded = configService.fetch(name);\n          if (existing != null &amp;&amp; !loaded.changedSince(existing.lastModified())) {\n              return existing;\n          }\n          List&lt;Stage&gt; stages = DocumentParser.getStagesFromJsonArray(loaded.json());\n          return new PipelineHandle(stages, loaded.lastModified());\n      });\n  }\n</code></pre> <p>}   ```</p> <ul> <li>Globals: supply immutable values (tenant, feature flags) through the <code>globals</code> map instead of hard-coding them in the pipeline JSON.</li> <li>Error handling: catch <code>IllegalArgumentException</code> and <code>UnsupportedOperationException</code> to surface actionable diagnostics back to the client.</li> </ul>"},{"location":"core/integration-developer-guide/#stage-syntax-cheatsheet","title":"Stage Syntax Cheatsheet","text":"<ul> <li>Every stage is a single-key object: <code>{ \"$stageName\": &lt;payload&gt; }</code>.</li> <li>Payload shapes:</li> <li>Pass-through (<code>$match</code>, <code>$project</code>, <code>$addFields</code>): Mongo query fragments and expressions.</li> <li>Accumulators (<code>$group</code>): Use <code>$sum</code>, <code>$avg</code>, <code>$max</code>, etc. inside <code>output</code> fields.</li> <li>Window functions (<code>$setWindowFields</code>): Provide <code>partitionBy</code>, <code>sortBy</code>, and <code>output</code> with window specs.</li> <li>Arrays of stages execute in order; stage output feeds into the next stage.</li> <li>System variables available everywhere: <code>$$ROOT</code>, <code>$$CURRENT</code>, <code>$$NOW</code>, <code>$$REMOVE</code>, <code>$$PRUNE</code>, <code>$$KEEP</code>.</li> </ul> <p>See the Stages reference for stage-by-stage payload details.</p>"},{"location":"core/integration-developer-guide/#expression-operators-cheatsheet","title":"Expression Operators Cheatsheet","text":"<ul> <li>Operators mirror MongoDB semantics; they are case-sensitive and always start with <code>$</code>.</li> <li>Operands accept literals, field paths (prefixed with <code>$</code>), sub-expressions, or nested documents.</li> <li>Common families:</li> <li>Comparison: <code>$eq</code>, <code>$gt</code>, <code>$gte</code>, <code>$lt</code>, <code>$lte</code>, <code>$ne</code>, <code>$in</code>, <code>$nin</code>.</li> <li>Math: <code>$add</code>, <code>$subtract</code>, <code>$multiply</code>, <code>$divide</code>, <code>$sqrt</code>, <code>$pow</code>.</li> <li>Array: <code>$map</code>, <code>$filter</code>, <code>$reduce</code>, <code>$size</code>, <code>$concatArrays</code>, <code>$zip</code>.</li> <li>Date: <code>$dateDiff</code>, <code>$dateAdd</code>, <code>$dateTrunc</code>, <code>$isoWeek</code>, <code>$week</code>.</li> <li>Control flow: <code>$cond</code>, <code>$switch</code>, <code>$ifNull</code>, <code>$coalesce</code>, <code>$let</code>.</li> <li>Operators can be nested arbitrarily: <code>{\"$map\": {\"input\": \"$events\", \"as\": \"event\", \"in\": {\"$toUpper\": \"$$event.type\"}}}</code>.</li> </ul> <p>See the Operators reference for exhaustive syntax, edge cases, and performance notes.</p>"},{"location":"core/integration-developer-guide/#adding-a-custom-operator","title":"Adding a Custom Operator","text":"<ol> <li>Implement <code>Operator</code> and resolve operands with <code>ExpressionEvaluator</code>.</li> <li>Register the operator through an <code>OperatorContributor</code>.</li> <li>Advertise the contributor using Java <code>ServiceLoader</code>.</li> </ol> <pre><code>package com.acme.telemetry.ops;\n\nimport ai.fluxion.core.expression.ExpressionEvaluator;\nimport ai.fluxion.core.expression.Operator;\nimport ai.fluxion.core.expression.OperatorContributor;\nimport ai.fluxion.core.expression.OperatorRegistry;\nimport ai.fluxion.core.model.Document;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic final class WeightedPercentileOperator implements Operator {\n    @Override\n    public Object apply(Object expr, Document doc, Map&lt;String, Object&gt; vars, ExpressionEvaluator evaluator) {\n        Map&lt;String, Object&gt; spec = (Map&lt;String, Object&gt;) expr;\n        List&lt;Map&lt;String, Object&gt;&gt; buckets = (List&lt;Map&lt;String, Object&gt;&gt;) evaluator.resolve(spec.get(\"buckets\"), doc, vars);\n        double percentile = ((Number) spec.getOrDefault(\"percentile\", 0.5d)).doubleValue();\n        return PercentileMath.weighted(buckets, percentile);\n    }\n\n    public static final class Contributor implements OperatorContributor {\n        @Override\n        public void contribute(OperatorRegistry registry) {\n            registry.register(\"$weightedPercentile\", new WeightedPercentileOperator());\n        }\n    }\n}\n</code></pre> <p><code>src/main/resources/META-INF/services/ai.fluxion.core.expression.OperatorContributor</code>:</p> <pre><code>com.acme.telemetry.ops.WeightedPercentileOperator$Contributor\n</code></pre> <ul> <li>Register imperatively in tests: <code>OperatorRegistry.getInstance().register(\"$weightedPercentile\", new WeightedPercentileOperator());</code>.</li> <li>Operators run on every document; ensure they are pure functions and validate inputs defensively.</li> </ul>"},{"location":"core/integration-developer-guide/#adding-a-custom-stage","title":"Adding a Custom Stage","text":"<ol> <li>Implement <code>StageHandler</code> and encapsulate your transformation inside <code>apply</code>.</li> <li>Return the input list (possibly mutated) or allocate a new list of <code>Document</code> objects.</li> <li>Register the handler through <code>StageHandlerContributor</code> and <code>ServiceLoader</code>.</li> </ol> <pre><code>package com.acme.telemetry.stages;\n\nimport ai.fluxion.core.aggregation.stages.StageHandler;\nimport ai.fluxion.core.engine.spi.StageHandlerContributor;\nimport ai.fluxion.core.model.Document;\n\nimport java.util.List;\nimport java.util.Map;\n\npublic final class MaskFieldsStageHandler implements StageHandler {\n    @Override\n    public List&lt;Document&gt; apply(List&lt;Document&gt; input, Object spec, Map&lt;String, Object&gt; vars) {\n        Map&lt;String, Object&gt; config = (Map&lt;String, Object&gt;) spec;\n        List&lt;String&gt; fields = (List&lt;String&gt;) config.get(\"fields\");\n        Object replacement = config.getOrDefault(\"replacement\", \"***\");\n\n        for (Document document : input) {\n            for (String field : fields) {\n                if (document.containsKey(field)) {\n                    document.put(field, replacement);\n                }\n            }\n        }\n        return input;\n    }\n\n    public static final class Contributor implements StageHandlerContributor {\n        @Override\n        public Map&lt;String, StageHandler&gt; stageHandlers() {\n            return Map.of(\"$maskFields\", new MaskFieldsStageHandler());\n        }\n    }\n}\n</code></pre> <p><code>src/main/resources/META-INF/services/ai.fluxion.core.engine.spi.StageHandlerContributor</code>:</p> <pre><code>com.acme.telemetry.stages.MaskFieldsStageHandler$Contributor\n</code></pre> <p>Tips:</p> <ul> <li>Stages receive <code>vars</code> populated with <code>$$ROOT</code>, <code>$$CURRENT</code>, and any globals supplied when executing the pipeline.</li> <li>Use <code>StageRegistry.getInstance().register(...)</code> during development or tests to inject stages without ServiceLoader wiring.</li> <li><code>StageRegistry</code> and <code>OperatorRegistry</code> are thread-safe singletons; register contributions during application bootstrap to avoid races.</li> </ul>"},{"location":"core/integration-developer-guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Stage reference for payload schemas, aliases, and gotchas.</li> <li>Operator reference for complete expression coverage.</li> <li>Enrichment operators for <code>$httpCall</code>, <code>$sqlQuery</code>, and service integrations.</li> <li>Fluxion Core repository (<code>fluxion-core-engine-java/docs/fluxion-core-developer-guide.md</code>) for engine internals and SPI details.</li> <li>LLM assistant notes to keep generated answers aligned with current capabilities.</li> </ul>"},{"location":"core/observability/","title":"Observability &amp; Metrics","text":"<p>Fluxion Core exposes stage-level metrics and an OpenTelemetry bridge so you can monitor pipeline behaviour. This guide catalogs the available metrics, how to configure exports, and how to wire them into observability stacks.</p>"},{"location":"core/observability/#1-stage-metrics","title":"1. Stage metrics","text":"<p><code>StageMetrics</code> captures per-stage counts and timings:</p> Metric Description <code>invocations</code> Number of times a stage executed. <code>inputCount</code> Documents consumed by the stage. <code>outputCount</code> Documents emitted by the stage. <code>durationNanos</code> Total execution duration (nanoseconds). <code>queueSize</code> Latest queue size between stages (streaming pipelines). <code>maxQueueSize</code> Maximum queue size observed. <p>Access metrics programmatically via <code>RuleExecutionContext.stageMetrics()</code> (rule engine) or by registering listeners on streaming pipelines.</p>"},{"location":"core/observability/#2-opentelemetry-bridge","title":"2. OpenTelemetry bridge","text":"<p><code>StageMetricsOtelBridge</code> translates <code>StageMetrics</code> updates into OpenTelemetry metrics. When enabled, it publishes the following instruments:</p> Instrument Type Attributes <code>fluxion_stage_invocations_total</code> Counter <code>pipeline</code>, <code>stage</code> <code>fluxion_stage_input_docs_total</code> Counter <code>pipeline</code>, <code>stage</code> <code>fluxion_stage_output_docs_total</code> Counter <code>pipeline</code>, <code>stage</code> <code>fluxion_stage_duration_ms</code> Histogram (ms) <code>pipeline</code>, <code>stage</code> <code>fluxion_stage_queue_size_last</code> Gauge <code>pipeline</code>, <code>stage</code> (streaming only) <code>fluxion_stage_queue_size_max</code> Gauge <code>pipeline</code>, <code>stage</code> (streaming only)"},{"location":"core/observability/#enabling-the-bridge","title":"Enabling the bridge","text":"<p>The bridge uses <code>OpenTelemetryManager.meter()</code> under the hood. Configure your OpenTelemetry SDK (OTLP, Prometheus, etc.) before running pipelines. Example (using OTLP exporter):</p> <pre><code>SdkMeterProvider meterProvider = SdkMeterProvider.builder()\n        .registerMetricReader(OtlpGrpcMetricExporter.builder().setEndpoint(\"http://otel-collector:4317\").build())\n        .build();\nOpenTelemetry openTelemetry = OpenTelemetrySdk.builder().setMeterProvider(meterProvider).build();\nOpenTelemetryManager.initialize(openTelemetry);\n</code></pre> <p>Once initialised, <code>StageMetricsOtelBridge</code> automatically reports metrics.</p>"},{"location":"core/observability/#environment-variables","title":"Environment variables","text":"<p>If you use the auto-configured OpenTelemetry SDK, set standard <code>OTEL_*</code> environment variables (e.g., <code>OTEL_EXPORTER_OTLP_ENDPOINT</code>, <code>OTEL_RESOURCE_ATTRIBUTES</code>).</p>"},{"location":"core/observability/#3-custom-listeners-logging","title":"3. Custom listeners &amp; logging","text":"<p>For bespoke observability (logging, proprietary metrics), register your own listeners:</p> <ul> <li>Rules: consume <code>RuleExecutionResult</code> and inspect <code>RuleExecutionContext.stageMetrics()</code>.</li> <li>Streaming: implement <code>StreamingMetricsListener</code> to receive batch/lag/queue   metrics alongside stage updates.</li> </ul> <pre><code>StreamingRuntimeConfig config = StreamingRuntimeConfig.builder()\n        .metricsListener(new MicrometerStreamingMetrics(registry))\n        .build();\n</code></pre>"},{"location":"core/observability/#4-testing-metrics","title":"4. Testing metrics","text":"<ul> <li>Unit tests: assert stage metrics manually via <code>RuleEvaluationResult.stageMetrics()</code>.</li> <li>Integration tests: start a test OTLP collector (or in-memory exporter) and   verify metric names/values.</li> </ul> <p>Example (using OpenTelemetry SDK in tests):</p> <pre><code>InMemoryMetricReader reader = InMemoryMetricReader.create();\nSdkMeterProvider meterProvider = SdkMeterProvider.builder()\n        .registerMetricReader(reader)\n        .build();\nOpenTelemetryManager.initialize(OpenTelemetrySdk.builder().setMeterProvider(meterProvider).build());\n\n// run pipelines, then inspect reader.collectAllMetrics()\n</code></pre> <p>Run Fluxion core tests to ensure metrics wiring stays intact:</p> <pre><code>mvn -pl fluxion-core test -Dtest=*StageMetrics*\n</code></pre>"},{"location":"core/observability/#5-references","title":"5. References","text":"Path Description <code>fluxion-core/src/main/java/.../StageMetrics.java</code> Captures stage-level metrics. <code>fluxion-core/src/main/java/.../StageMetricsOtelBridge.java</code> OpenTelemetry bridge implementation. <code>fluxion-core/src/main/java/.../StreamingMetricsListener.java</code> Streaming metrics hook. <code>fluxion-core/src/main/java/.../engine/telemetry/OpenTelemetryManager.java</code> Helper for OTel SDK integration. OpenTelemetry Metrics overview. <p>For rule-engine specific metrics, see <code>docs/rules/glossary.md</code>.</p>"},{"location":"enrich/","title":"Enrichment Module Overview","text":"<p>Fluxion Enrich adds operators that call external services or data stores during pipeline execution. Use it when a pipeline needs to fetch HTTP resources or run SQL queries inline.</p>"},{"location":"enrich/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Fluxion modules <code>fluxion-core</code>, <code>fluxion-enrich</code>; optionally <code>fluxion-connect</code> for connector integration. HTTP/SQL back-ends Services or databases reachable from your pipelines. Configuration Named connections (e.g., Spring beans) for HTTP and SQL targets. Resilience layer Optional Resilience4j dependencies for retries/circuit breakers (recommended)."},{"location":"enrich/#2-module-status","title":"2. Module status","text":"Item Doc Status Notes Module \u2013 Beta APIs may evolve alongside the shared resilience layer. <code>$httpCall</code> operators/httpCall.md Stable JSON payloads, headers, query params, response extraction. <code>$sqlQuery</code> operators/sqlQuery.md Beta Prepared statements via JDBC (PostgreSQL/MySQL verified). <p>If asked about additional enrichment operators, state that only HTTP/SQL are available today and reference the SPI documentation for future extensions.</p>"},{"location":"enrich/#3-capabilities","title":"3. Capabilities","text":"<ul> <li><code>$httpCall</code> \u2013 Declarative HTTP requests with dynamic path/headers/body and   JSON pointer extraction for responses.</li> <li><code>$sqlQuery</code> \u2013 Parameterised SQL lookups mapped back into embedded documents.</li> <li>Shared Resilience4j scaffolding (retry + circuit breaker) mirroring the   streaming runtime.</li> <li>Connection registry integration so pipelines can reference centrally managed   connection definitions.</li> </ul>"},{"location":"enrich/#4-usage-patterns","title":"4. Usage patterns","text":""},{"location":"enrich/#http-call","title":"HTTP call","text":"<pre><code>{\n  \"$addFields\": {\n    \"profile\": {\n      \"$httpCall\": {\n        \"connection\": \"identity-service\",\n        \"path\": \"/api/v1/profile/{userId}\",\n        \"pathParams\": { \"userId\": \"$user.id\" },\n        \"method\": \"GET\",\n        \"response\": { \"extract\": \"$.data\" }\n      }\n    }\n  }\n}\n</code></pre> <ul> <li><code>connection</code> refers to a named HTTP client configured in your application.</li> <li>Path parameters resolve from the current document.</li> <li><code>response.extract</code> uses JSON Pointer to select part of the payload.</li> </ul>"},{"location":"enrich/#sql-lookup","title":"SQL lookup","text":"<pre><code>{\n  \"$set\": {\n    \"orders\": {\n      \"$sqlQuery\": {\n        \"connection\": \"orders-db\",\n        \"sql\": \"select id, total from orders where customer_id = ? order by created desc limit 5\",\n        \"params\": [\"$customerId\"]\n      }\n    }\n  }\n}\n</code></pre> <ul> <li>Prepared statement executed against the named JDBC connection.</li> <li>Parameters can be literal values or expressions evaluated per document.</li> <li>Result set is converted into an array of documents.</li> </ul>"},{"location":"enrich/#5-configuration-table","title":"5. Configuration table","text":"Field Operator Description <code>connection</code> HTTP/SQL Logical connection name resolved by your app. <code>method</code> HTTP HTTP verb (<code>GET</code>, <code>POST</code>, \u2026). <code>path</code>, <code>pathParams</code> HTTP URL templates and parameter bindings. <code>headers</code>, <code>query</code>, <code>body</code> HTTP Optional request metadata and payload. <code>response.extract</code> HTTP JSON pointer to select part of the response. <code>sql</code> SQL Prepared statement text. <code>params</code> SQL Array of bound parameters (expressions supported). <code>rowMapper</code> (future) SQL Hook for custom row mapping. <p>Configure connections via your DI framework (Spring beans, Micronaut singletons, manual registries) and reference by <code>connection</code> name inside pipeline definitions.</p>"},{"location":"enrich/#6-operational-guidance","title":"6. Operational guidance","text":"<ul> <li>Keep enrichment calls lightweight to avoid blocking pipeline threads.</li> <li>Reuse resilience policies (retry, circuit breaker) to insulate downstream   services. <code>$httpCall</code> and <code>$sqlQuery</code> accept resilience configuration blocks.</li> <li>Cache responses if the same upstream data is fetched frequently.</li> <li>Monitor outbound call latency and error rates alongside pipeline metrics.</li> </ul>"},{"location":"enrich/#7-references","title":"7. References","text":"Path Description <code>fluxion-enrich/src/main/java/.../$httpCall</code> Implementation of the HTTP operator. <code>fluxion-enrich/src/main/java/.../$sqlQuery</code> JDBC-backed SQL operator. <code>fluxion-docs/docs/enrich/operators/httpCall.md</code> Detailed HTTP options with examples. <code>fluxion-docs/docs/enrich/operators/sqlQuery.md</code> Detailed SQL options with examples. <code>fluxion-docs/docs/examples/</code> Pipelines mixing core and enrichment features. <p>Run enrichment tests with:</p> <pre><code>mvn -pl fluxion-enrich -am test\n</code></pre> <p>This validates HTTP/SQL operators and shared resilience components.</p>"},{"location":"enrich/operators/httpCall/","title":"<code>$httpCall</code>","text":"<p>Performs an HTTP request during pipeline evaluation. Supports dynamic URL/parameter substitution, custom headers, payloads, and optional resilience settings (retry, circuit breaker).</p>"},{"location":"enrich/operators/httpCall/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Dependency <code>ai.fluxion:fluxion-enrich</code> plus HTTP client dependencies (e.g., <code>okhttp</code>). Connection registry Optional <code>HttpConnector</code> registration for shared base URLs/auth. Resilience Resilience4j (optional) for retry/circuit breaker configuration."},{"location":"enrich/operators/httpCall/#2-syntax","title":"2. Syntax","text":"<pre><code>{\n  \"$httpCall\": {\n    \"method\": \"POST\",\n    \"connection\": \"userService\",\n    \"url\": \"https://profiles/api/users/{id}\",\n    \"params\": { \"id\": \"$user.id\" },\n    \"headers\": {\n      \"X-Trace-Id\": \"$request.traceId\"\n    },\n    \"body\": {\n      \"email\": \"$user.email\"\n    },\n    \"responsePath\": \"/data\",\n    \"retry\": { \"maxAttempts\": 3, \"waitDurationMs\": 50 },\n    \"circuitBreaker\": { \"name\": \"user-service-breaker\", \"failureRateThreshold\": 30 }\n  }\n}\n</code></pre>"},{"location":"enrich/operators/httpCall/#3-options","title":"3. Options","text":"Field Description Default <code>connection</code> Name of registered <code>HttpConnector</code>. Optional when <code>url</code> provided. <code>null</code> <code>url</code> Request URL template. <code>{}</code> placeholders replaced by <code>params</code>. Connector URL <code>method</code> HTTP verb (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, <code>DELETE</code>, etc.). <code>GET</code> <code>headers</code> Map of header expressions (evaluated per request). <code>{}</code> <code>params</code> Map of query/path parameters. <code>{}</code> <code>body</code> Expression evaluated for the request body (JSON encoded if object). <code>null</code> <code>responsePath</code> JSON Pointer applied to the parsed response body. Entire payload <code>connectTimeoutMs</code> Connection timeout in milliseconds. <code>5000</code> <code>readTimeoutMs</code> Read timeout in milliseconds. <code>5000</code> <code>retry</code> Resilience4j retry config (see Resilience Patterns). Disabled <code>circuitBreaker</code> Resilience4j circuit breaker config. Disabled"},{"location":"enrich/operators/httpCall/#4-examples","title":"4. Examples","text":""},{"location":"enrich/operators/httpCall/#simple-get-with-query-params","title":"Simple GET with query params","text":"<pre><code>{\n  \"$httpCall\": {\n    \"method\": \"GET\",\n    \"url\": \"https://api.weather/v1/city\",\n    \"params\": { \"zip\": \"$address.zip\" }\n  }\n}\n</code></pre>"},{"location":"enrich/operators/httpCall/#post-with-connector-json-body","title":"POST with connector + JSON body","text":"<pre><code>{\n  \"$httpCall\": {\n    \"connection\": \"userService\",\n    \"method\": \"POST\",\n    \"url\": \"/users/{id}\",\n    \"params\": { \"id\": \"$user.id\" },\n    \"headers\": { \"X-Request-Id\": \"$request.traceId\" },\n    \"body\": {\n      \"email\": \"$user.email\",\n      \"status\": \"$user.status\"\n    },\n    \"responsePath\": \"/data\"\n  }\n}\n</code></pre>"},{"location":"enrich/operators/httpCall/#5-response-handling","title":"5. Response handling","text":"<ul> <li>Responses are parsed as JSON. Arrays/primitives are preserved.</li> <li>If <code>responsePath</code> is provided, the JSON Pointer is resolved to select part of   the payload.</li> <li>HTTP status codes \u2265 400 throw an exception; retry/breaker logic handles the   exception if configured.</li> </ul>"},{"location":"enrich/operators/httpCall/#6-connectors","title":"6. Connectors","text":"<p>Register connectors once and reference them by name:</p> <pre><code>ConnectorManager.register(\"userService\", new HttpConnector(\n    \"https://profiles/api/users\",\n    Map.of(\"Authorization\", \"Bearer ${TOKEN}\")\n));\n</code></pre> <p>Pipelines can override headers or provide additional path/query parameters.</p>"},{"location":"enrich/operators/httpCall/#7-troubleshooting","title":"7. Troubleshooting","text":"Symptom Possible cause Remedy <code>IllegalArgumentException: url missing</code> Neither <code>url</code> nor connector base URL provided. Supply <code>url</code> or configure the connector with a base URL. Timeout exceptions Slow downstream service. Increase <code>connectTimeoutMs</code>/<code>readTimeoutMs</code> or configure retries. <code>JsonProcessingException</code> Response body not JSON. Wrap operator in <code>$function</code> to handle plain text/binary payloads. Circuit breaker always open Shared breaker between unrelated endpoints. Use unique breaker names per service."},{"location":"enrich/operators/httpCall/#8-testing","title":"8. Testing","text":"<ul> <li>Run enrichment tests:   <code>bash   mvn -pl fluxion-enrich -am test -Dtest=*HttpCall*</code></li> <li>Use mock web servers (e.g., OkHttp MockWebServer) to simulate behaviour during CI.</li> </ul>"},{"location":"enrich/operators/httpCall/#9-references","title":"9. References","text":"Path Description <code>fluxion-enrich/src/main/java/.../HttpCallOperator.java</code> Operator implementation. <code>fluxion-enrich/src/test/java/.../HttpCallOperatorTest.java</code> Unit/integration tests. Resilience Patterns Retry/circuit breaker configuration. <p>Use <code>$httpCall</code> for declarative service calls in both rule and streaming pipelines.</p>"},{"location":"enrich/operators/sqlQuery/","title":"<code>$sqlQuery</code>","text":"<p>Executes a parameterised SQL statement through a registered <code>SqlConnector</code>. Ideal for enriching documents with relational data during pipeline evaluation.</p>"},{"location":"enrich/operators/sqlQuery/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Dependency <code>ai.fluxion:fluxion-enrich</code> plus JDBC driver (e.g., PostgreSQL, MySQL). Connection registry Register <code>SqlConnector</code> instances in <code>ConnectorManager</code>. Resilience Optional Resilience4j retry/circuit breaker configuration."},{"location":"enrich/operators/sqlQuery/#2-syntax","title":"2. Syntax","text":"<pre><code>{\n  \"$sqlQuery\": {\n    \"connection\": \"ordersDb\",\n    \"query\": \"SELECT * FROM orders WHERE user_id = ?\",\n    \"params\": [\"$user.id\"],\n    \"expectSingle\": true,\n    \"retry\": {\n      \"maxAttempts\": 3,\n      \"waitDurationMs\": 25,\n      \"multiplier\": 2.0\n    },\n    \"circuitBreaker\": {\n      \"name\": \"orders-db-breaker\",\n      \"failureRateThreshold\": 25,\n      \"minimumNumberOfCalls\": 4,\n      \"waitDurationInOpenStateMs\": 30000\n    }\n  }\n}\n</code></pre>"},{"location":"enrich/operators/sqlQuery/#3-options","title":"3. Options","text":"Field Description Default <code>connection</code> Name of <code>SqlConnector</code> registered in the connector registry. Required <code>query</code> SQL statement with positional <code>?</code> parameters. Required <code>params</code> Array of expressions bound sequentially to <code>?</code> placeholders. <code>[]</code> <code>expectSingle</code> Return first row or <code>null</code> when no rows. If <code>false</code>, returns a list of rows. <code>false</code> <code>retry</code> Resilience4j retry configuration (see Resilience Patterns). Disabled <code>circuitBreaker</code> Resilience4j circuit breaker configuration. Disabled"},{"location":"enrich/operators/sqlQuery/#4-examples","title":"4. Examples","text":""},{"location":"enrich/operators/sqlQuery/#fetch-latest-orders-multiple-rows","title":"Fetch latest orders (multiple rows)","text":"<pre><code>{\n  \"$sqlQuery\": {\n    \"connection\": \"ordersDb\",\n    \"query\": \"SELECT id, total FROM orders WHERE customer_id = ? ORDER BY created DESC LIMIT 5\",\n    \"params\": [\"$customerId\"]\n  }\n}\n</code></pre>"},{"location":"enrich/operators/sqlQuery/#fetch-single-profile-record","title":"Fetch single profile record","text":"<pre><code>{\n  \"$sqlQuery\": {\n    \"connection\": \"profileDb\",\n    \"query\": \"SELECT email, country FROM profiles WHERE id = ?\",\n    \"params\": [\"$user.id\"],\n    \"expectSingle\": true\n  }\n}\n</code></pre>"},{"location":"enrich/operators/sqlQuery/#5-returned-value","title":"5. Returned value","text":"<ul> <li><code>expectSingle = true</code> \u2192 single row map or <code>null</code> if no rows.</li> <li><code>expectSingle = false</code> \u2192 list of row maps. Column labels become map keys.</li> <li>Numeric/temporal types are mapped according to the JDBC driver.</li> </ul>"},{"location":"enrich/operators/sqlQuery/#6-connectors","title":"6. Connectors","text":"<p>Register connectors through <code>ConnectorManager</code>:</p> <pre><code>ConnectorManager.register(\"ordersDb\", new SqlConnector(\n        dataSource,\n        SqlConnector.Settings.builder().maxConnections(10).build()\n));\n</code></pre> <p>Supports connection pooling and connection-specific options.</p>"},{"location":"enrich/operators/sqlQuery/#7-troubleshooting","title":"7. Troubleshooting","text":"Symptom Possible cause Remedy <code>IllegalArgumentException: connection missing</code> <code>connection</code> field omitted. Provide connector name. <code>SQLException</code> for syntax errors Invalid SQL string. Validate query manually or add integration tests. <code>Empty result when expectSingle</code> Query returned zero rows. Accept <code>null</code> or change query to enforce existence. <code>Duplicate key on sink</code> Upsert logic in downstream sink misconfigured. Check sink <code>mode</code>/<code>keyField</code>."},{"location":"enrich/operators/sqlQuery/#8-testing","title":"8. Testing","text":"<ul> <li>Run enrichment tests:   <code>bash   mvn -pl fluxion-enrich -am test -Dtest=*SqlQuery*</code></li> <li>Integration tests in the repo use H2 with prepared statements; replicate the   pattern to test against your own schema.</li> </ul>"},{"location":"enrich/operators/sqlQuery/#9-references","title":"9. References","text":"Path Description <code>fluxion-enrich/src/main/java/.../SqlQueryOperator.java</code> Operator implementation. <code>fluxion-enrich/src/test/java/.../SqlQueryOperatorTest.java</code> Test coverage (H2 + Resilience scenarios). Resilience Patterns Retry/circuit breaker configuration. <p>Use <code>$sqlQuery</code> to pull relational data into pipelines without embedding JDBC code directly in your services.</p>"},{"location":"examples/exampleSet1/","title":"Advanced Pipeline Gallery","text":"<p>Real-world snippets showcasing nested facets, accumulator-heavy groups, and expression operators. Copy these into your tests/services or slice them apart when building tutorials.</p>"},{"location":"examples/exampleSet1/#scenario-1-category-price-buckets","title":"Scenario 1 \u2013 Category &amp; Price Buckets","text":"Goal Group sales by category while simultaneously bucketing item prices. Features <code>$match</code>, <code>$unwind</code>, <code>$facet</code>, <code>$group</code>, <code>$project</code>, <code>$bucket</code> Where used <code>fluxion-core/src/test/.../FacetBucketTest.java</code> <pre><code>[\n  { \"$match\": { \"orderDate\": { \"$gte\": \"2024-01-01\" } } },\n  { \"$unwind\": \"$items\" },\n  { \"$facet\": {\n    \"byCategory\": [\n      { \"$group\": {\n          \"_id\": \"$items.category\",\n          \"totalSales\": { \"$sum\": \"$items.price\" },\n          \"averagePrice\": { \"$avg\": \"$items.price\" },\n          \"count\": { \"$sum\": 1 }\n      }},\n      { \"$project\": {\n          \"category\": \"$_id\",\n          \"totalSales\": 1,\n          \"averagePrice\": 1,\n          \"count\": 1,\n          \"_id\": 0\n      }}\n    ],\n    \"priceBuckets\": [\n      { \"$bucket\": {\n          \"groupBy\": \"$items.price\",\n          \"boundaries\": [0, 100, 500, 1000],\n          \"default\": \"Other\",\n          \"output\": {\n            \"itemCount\": { \"$sum\": 1 },\n            \"avgPrice\": { \"$avg\": \"$items.price\" }\n          }\n      }}\n    ]\n  }}\n]\n</code></pre> <p>Tips</p> <ul> <li>Ensure <code>orderDate</code> is indexed upstream if you replay large histories.</li> <li>Use <code>$bucketAuto</code> when you don\u2019t know price boundaries ahead of time.</li> </ul>"},{"location":"examples/exampleSet1/#scenario-2-accumulator-cheat-sheet","title":"Scenario 2 \u2013 Accumulator Cheat Sheet","text":"Goal Demonstrate common accumulators inside a single <code>$group</code>. Features <code>$sum</code>, <code>$avg</code>, <code>$min</code>, <code>$max</code>, <code>$first</code>, <code>$last</code>, <code>$addToSet</code>, <code>$push</code> Test ref <code>fluxion-core/src/test/.../AccumulatorShowcaseTest.java</code> <pre><code>[\n  {\n    \"$group\": {\n      \"_id\": \"$category\",\n      \"total\": { \"$sum\": \"$amount\" },\n      \"avg\": { \"$avg\": \"$amount\" },\n      \"min\": { \"$min\": \"$amount\" },\n      \"max\": { \"$max\": \"$amount\" },\n      \"first\": { \"$first\": \"$amount\" },\n      \"last\": { \"$last\": \"$amount\" },\n      \"uniqueBrands\": { \"$addToSet\": \"$brand\" },\n      \"allItems\": { \"$push\": \"$item\" }\n    }\n  }\n]\n</code></pre> <p>Tips</p> <ul> <li>Monitor array sizes for <code>$push</code>/<code>$addToSet</code> to avoid runaway memory usage.</li> <li>For streaming pipelines, prefer incremental accumulators (<code>$sum</code>, <code>$avg</code>).</li> </ul>"},{"location":"examples/exampleSet1/#scenario-3-expression-operators-mapfilterreducecondswitch","title":"Scenario 3 \u2013 Expression Operators ($map<code>,</code>$filter<code>,</code>$reduce<code>,</code>$cond<code>,</code>$switch`)","text":"Operator Purpose Snippet <code>$map</code> Compute totals per item <code>{ \"$map\": { \"input\": \"$items\", \"as\": \"item\", \"in\": { \"total\": { \"$multiply\": [\"$$item.price\", \"$$item.qty\"] } } } }</code> <code>$filter</code> Keep items with qty &gt; 1 <code>{ \"$filter\": { \"input\": \"$items\", \"as\": \"item\", \"cond\": { \"$gt\": [\"$$item.qty\", 1] } } }</code> <code>$reduce</code> Sum prices <code>{ \"$reduce\": { \"input\": \"$items\", \"initialValue\": 0, \"in\": { \"$add\": [\"$$value\", \"$$this.price\"] } } }</code> <code>$cond</code> Label price brackets <code>{ \"$cond\": { \"if\": { \"$gte\": [\"$price\", 1000] }, \"then\": \"expensive\", \"else\": \"cheap\" } }</code> <code>$switch</code> Multi-tier labeling <code>{ \"$switch\": { \"branches\": [ { \"case\": { \"$lt\": [\"$price\", 100] }, \"then\": \"low\" }, { \"case\": { \"$lt\": [\"$price\", 500] }, \"then\": \"mid\" } ], \"default\": \"high\" } }</code> <p>Tips</p> <ul> <li><code>$map</code>/<code>$filter</code>/<code>$reduce</code> operate on arrays; they\u2019re composable for complex   calculations.</li> <li>Combine <code>$cond</code> or <code>$switch</code> with <code>$set</code>/<code>$addFields</code> for classification tasks.</li> </ul>"},{"location":"examples/exampleSet1/#running-the-gallery-locally","title":"Running the gallery locally","text":"<p>Use the standard executor to run any of the pipelines above:</p> <pre><code>PipelineExecutor executor = new PipelineExecutor();\nList&lt;Document&gt; result = executor.run(inputDocuments, stages, Map.of());\n</code></pre> <p>For regression testing, copy examples into unit tests and run:</p> <pre><code>mvn -pl fluxion-core test\n</code></pre> <p>The tests under <code>fluxion-core/src/test/java/...</code> contain ready-made fixtures you can adapt.</p>"},{"location":"examples/exampleSet2/","title":"Executor Test Suite \u2013 Scenario Guide","text":"<p>Friendly breakdown of the unit tests in <code>fluxion-core/src/test/java/.../PipelineExecutorTest.java</code> covering <code>$match</code>, <code>$project</code>, system variables, and computed fields.</p>"},{"location":"examples/exampleSet2/#how-to-run-the-tests","title":"How to run the tests","text":"<pre><code>mvn -pl fluxion-core test -Dtest=PipelineExecutorTest\n</code></pre> <p>Or run the entire module:</p> <pre><code>mvn -pl fluxion-core -am test\n</code></pre>"},{"location":"examples/exampleSet2/#scenario-matrix","title":"Scenario matrix","text":"Test Purpose Key stages/operators <code>test_simple_match_pipeline</code> Filter documents where <code>value &gt;= 20</code>. <code>$match</code>, comparison operators <code>test_project_include_fields</code> Return only <code>name</code> and <code>age</code>. <code>$project</code> (inclusion) <code>test_project_exclude_fields</code> Remove <code>city</code> field. <code>$project</code> (exclusion) <code>test_project_computed_fields</code> Add <code>total</code> via <code>$multiply</code>. <code>$project</code>, <code>$multiply</code> <code>test_project_exclude_id</code> Remove <code>_id</code> while keeping <code>name</code>. <code>$project</code>, <code>_id</code> handling <code>test_project_nested_fields</code> Project nested subfields (<code>user.profile.first_name</code>). <code>$project</code>, dotted paths <p>Each scenario below lists the input, pipeline, and expected output so you can replicate the behaviour in your own tests or services.</p>"},{"location":"examples/exampleSet2/#1-test_simple_match_pipeline","title":"1. <code>test_simple_match_pipeline</code>","text":"<pre><code>Input:\n[\n  { \"value\": 10 },\n  { \"value\": 20 },\n  { \"value\": 30 }\n]\n\nPipeline:\n[\n  { \"$match\": { \"value\": { \"$gte\": 20 } } }\n]\n\nOutput:\n[\n  { \"value\": 20 },\n  { \"value\": 30 }\n]\n</code></pre> <p>Tip: <code>$match</code> supports the full MongoDB query syntax, including compound conditions (<code>$and</code>, <code>$or</code>).</p>"},{"location":"examples/exampleSet2/#2-test_project_include_fields","title":"2. <code>test_project_include_fields</code>","text":"<pre><code>Input:\n[\n  { \"name\": \"Alice\", \"age\": 30, \"city\": \"New York\" }\n]\n\nPipeline:\n[\n  { \"$project\": { \"name\": 1, \"age\": 1 } }\n]\n\nOutput:\n[\n  { \"name\": \"Alice\", \"age\": 30 }\n]\n</code></pre> <p>Tip: When using inclusion, <code>_id</code> is present unless explicitly excluded.</p>"},{"location":"examples/exampleSet2/#3-test_project_exclude_fields","title":"3. <code>test_project_exclude_fields</code>","text":"<pre><code>Input:\n[\n  { \"name\": \"Bob\", \"age\": 25, \"city\": \"Los Angeles\" }\n]\n\nPipeline:\n[\n  { \"$project\": { \"city\": 0 } }\n]\n\nOutput:\n[\n  { \"name\": \"Bob\", \"age\": 25 }\n]\n</code></pre> <p>Tip: Exclusion-style projections cannot mix inclusion (other than <code>_id</code>).</p>"},{"location":"examples/exampleSet2/#4-test_project_computed_fields","title":"4. <code>test_project_computed_fields</code>","text":"<pre><code>Input:\n[\n  { \"item\": \"A\", \"price\": 10, \"qty\": 2 }\n]\n\nPipeline:\n[\n  {\n    \"$project\": {\n      \"item\": 1,\n      \"total\": { \"$multiply\": [\"$price\", \"$qty\"] }\n    }\n  }\n]\n\nOutput:\n[\n  { \"item\": \"A\", \"total\": 20 }\n]\n</code></pre> <p>Tip: Combine <code>$multiply</code> with <code>$add</code>/<code>$divide</code> for discount or tax calculations.</p>"},{"location":"examples/exampleSet2/#5-test_project_exclude_id","title":"5. <code>test_project_exclude_id</code>","text":"<pre><code>Input:\n[\n  { \"_id\": 123, \"name\": \"Charlie\", \"city\": \"Miami\" }\n]\n\nPipeline:\n[\n  { \"$project\": { \"_id\": 0, \"name\": 1 } }\n]\n\nOutput:\n[\n  { \"name\": \"Charlie\" }\n]\n</code></pre> <p>Tip: This is a common pattern when returning documents over REST APIs.</p>"},{"location":"examples/exampleSet2/#6-test_project_nested_fields","title":"6. <code>test_project_nested_fields</code>","text":"<pre><code>Input:\n[\n  {\n    \"user\": {\n      \"profile\": {\n        \"first_name\": \"Dana\",\n        \"last_name\": \"Smith\"\n      }\n    },\n    \"age\": 40\n  }\n]\n\nPipeline:\n[\n  { \"$project\": { \"user.profile.first_name\": 1, \"age\": 1, \"_id\": 0 } }\n]\n\nOutput:\n[\n  {\n    \"user\": { \"profile\": { \"first_name\": \"Dana\" } },\n    \"age\": 40\n  }\n]\n</code></pre> <p>Tip: Use dotted paths to include/exclude nested fields. Combine with <code>$map</code>/<code>$filter</code> when the nesting involves arrays.</p> <p>Feel free to extend the suite with additional cases (renamed fields, computed aliases, system variable usage). The structure above keeps everything explicit for humans and assistants alike.</p>"},{"location":"examples/exampleSet2/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$project\": { \"user.profile.first_name\": 1, \"age\": 1 } }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"user\": { \"profile\": { \"first_name\": \"Dana\" } },\n    \"age\": 40\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_project_renamed_fields_with_expression","title":"\u2705 test_project_renamed_fields_with_expression","text":""},{"location":"examples/exampleSet2/#description","title":"\ud83d\udcd6 Description","text":"<p>Uses computed aliases for fields using <code>$project</code>.</p>"},{"location":"examples/exampleSet2/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"name\": \"Eve\", \"visits\": 5 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_1","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"username\": \"$name\",\n      \"visit_count\": \"$visits\"\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"username\": \"Eve\", \"visit_count\": 5 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_replace_with_simple_field","title":"\u2705 test_replace_with_simple_field","text":""},{"location":"examples/exampleSet2/#description_1","title":"\ud83d\udcd6 Description","text":"<p>Replaces full document with a subdocument field using <code>$replaceWith</code>.</p>"},{"location":"examples/exampleSet2/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  {\n    \"product\": \"Widget\",\n    \"details\": {\n      \"name\": \"Widget A\",\n      \"price\": 100\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_2","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$replaceWith\": \"$details\" }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"name\": \"Widget A\", \"price\": 100 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_replace_with_merge_objects_executor_style","title":"\u2705 test_replace_with_merge_objects_executor_style","text":""},{"location":"examples/exampleSet2/#description_2","title":"\ud83d\udcd6 Description","text":"<p>Merges conditional object into the root using <code>$mergeObjects</code> and <code>$cond</code>.</p>"},{"location":"examples/exampleSet2/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"product\": \"Widget\", \"price\": 400 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_3","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$replaceWith\": {\n      \"$mergeObjects\": [\n        { \"type\": \"standard\" },\n        {\n          \"$cond\": {\n            \"if\": { \"$gte\": [\"$price\", 500] },\n            \"then\": { \"type\": \"premium\" },\n            \"else\": {}\n          }\n        },\n        \"$$ROOT\"\n      ]\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_3","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"type\": \"standard\", \"product\": \"Widget\", \"price\": 400 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_root_variable_deep_nested_merge_cond","title":"\u2705 test_root_variable_deep_nested_merge_cond","text":""},{"location":"examples/exampleSet2/#description_3","title":"\ud83d\udcd6 Description","text":"<p>Demonstrates conditional field injection and full merge with root document.</p>"},{"location":"examples/exampleSet2/#input-document_3","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"product\": \"Gadget\", \"price\": 450 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_4","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$replaceWith\": {\n      \"$mergeObjects\": [\n        { \"default\": \"basic\" },\n        {\n          \"$cond\": {\n            \"if\": { \"$gte\": [\"$price\", 500] },\n            \"then\": { \"premiumField\": true },\n            \"else\": {}\n          }\n        },\n        \"$$ROOT\"\n      ]\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_4","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"default\": \"basic\", \"product\": \"Gadget\", \"price\": 450 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_now_variable_deep_nested","title":"\u2705 test_now_variable_deep_nested","text":""},{"location":"examples/exampleSet2/#description_4","title":"\ud83d\udcd6 Description","text":"<p>Adds <code>createdAt</code> using the system variable <code>$$NOW</code> and copies <code>user</code>.</p>"},{"location":"examples/exampleSet2/#input-document_4","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"user\": \"Alice\" }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_5","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"audit\": {\n        \"createdAt\": \"$$NOW\",\n        \"createdBy\": \"$user\"\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_5","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"user\": \"Alice\",\n    \"audit\": {\n      \"createdAt\": \"&lt;timestamp&gt;\",\n      \"createdBy\": \"Alice\"\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_remove_variable_nested_project","title":"\u2705 test_remove_variable_nested_project","text":""},{"location":"examples/exampleSet2/#description_5","title":"\ud83d\udcd6 Description","text":"<p>Uses <code>$$REMOVE</code> to eliminate a field dynamically during <code>$project</code>.</p>"},{"location":"examples/exampleSet2/#input-document_5","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  {\n    \"name\": \"Alice\",\n    \"privateField\": \"secret\",\n    \"publicField\": \"info\"\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_6","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"publicField\": 1,\n      \"privateField\": \"$$REMOVE\",\n      \"profile\": {\n        \"name\": \"$name\"\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_6","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"publicField\": \"info\",\n    \"profile\": {\n      \"name\": \"Alice\"\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_cluster_time_variable_nested","title":"\u2705 test_cluster_time_variable_nested","text":""},{"location":"examples/exampleSet2/#description_6","title":"\ud83d\udcd6 Description","text":"<p>Adds cluster time using <code>$$CLUSTER_TIME</code>.</p>"},{"location":"examples/exampleSet2/#input-document_6","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"device\": \"IoT Sensor\" }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_7","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"metadata\": {\n        \"clusterCapturedAt\": \"$$CLUSTER_TIME\",\n        \"deviceName\": \"$device\"\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_7","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"device\": \"IoT Sensor\",\n    \"metadata\": {\n      \"clusterCapturedAt\": \"&lt;cluster_time&gt;\",\n      \"deviceName\": \"IoT Sensor\"\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_expression_remove_variable","title":"\u2705 test_expression_remove_variable","text":""},{"location":"examples/exampleSet2/#description_7","title":"\ud83d\udcd6 Description","text":"<p>Removes <code>status</code> field using <code>$$REMOVE</code> during <code>$addFields</code>.</p>"},{"location":"examples/exampleSet2/#input-document_7","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"name\": \"Charlie\", \"status\": \"active\" }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_8","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"status\": \"$$REMOVE\"\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_8","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"name\": \"Charlie\" }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_expression_now_variable","title":"\u2705 test_expression_now_variable","text":""},{"location":"examples/exampleSet2/#description_8","title":"\ud83d\udcd6 Description","text":"<p>Projects current timestamp using <code>$$NOW</code>.</p>"},{"location":"examples/exampleSet2/#input-document_8","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"user\": \"Bob\" }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_9","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$project\": { \"createdAt\": \"$$NOW\" } }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_9","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"createdAt\": \"&lt;timestamp&gt;\" }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_function_double_price","title":"\u2705 test_function_double_price","text":""},{"location":"examples/exampleSet2/#description_9","title":"\ud83d\udcd6 Description","text":"<p>Doubles the price using <code>$function</code> operator with a custom lambda.</p>"},{"location":"examples/exampleSet2/#input-document_9","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"price\": 100 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_10","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"doublePrice\": {\n        \"$function\": {\n          \"body\": \"lambda price: price * 2\",\n          \"args\": [\"$price\"],\n          \"lang\": \"js\"\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_10","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"price\": 100, \"doublePrice\": 200 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_function_add_two_fields","title":"\u2705 test_function_add_two_fields","text":""},{"location":"examples/exampleSet2/#description_10","title":"\ud83d\udcd6 Description","text":"<p>Adds two fields together using a custom lambda function.</p>"},{"location":"examples/exampleSet2/#input-document_10","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"a\": 5, \"b\": 7 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_11","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"sumAB\": {\n        \"$function\": {\n          \"body\": \"lambda a, b: a + b\",\n          \"args\": [\"$a\", \"$b\"],\n          \"lang\": \"js\"\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_11","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"a\": 5, \"b\": 7, \"sumAB\": 12 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_function_pass_fail_status","title":"\u2705 test_function_pass_fail_status","text":""},{"location":"examples/exampleSet2/#description_11","title":"\ud83d\udcd6 Description","text":"<p>Evaluates whether a score passes or fails based on threshold logic.</p>"},{"location":"examples/exampleSet2/#input-document_11","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"score\": 45 },\n  { \"score\": 75 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_12","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"status\": {\n        \"$function\": {\n          \"body\": \"lambda score: 'pass' if score &gt;= 50 else 'fail'\",\n          \"args\": [\"$score\"],\n          \"lang\": \"js\"\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_12","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"score\": 45, \"status\": \"fail\" },\n  { \"score\": 75, \"status\": \"pass\" }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_function_complex_logic","title":"\u2705 test_function_complex_logic","text":""},{"location":"examples/exampleSet2/#description_12","title":"\ud83d\udcd6 Description","text":"<p>Applies tiered pricing logic based on product category.</p>"},{"location":"examples/exampleSet2/#input-document_12","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"category\": \"A\", \"price\": 100 },\n  { \"category\": \"B\", \"price\": 200 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_13","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"adjustedPrice\": {\n        \"$function\": {\n          \"body\": \"lambda category, price: price * 0.9 if category == 'A' else price * 1.1\",\n          \"args\": [\"$category\", \"$price\"],\n          \"lang\": \"js\"\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_13","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"category\": \"A\", \"price\": 100, \"adjustedPrice\": 90.0 },\n  { \"category\": \"B\", \"price\": 200, \"adjustedPrice\": 220.0 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_expr_inside_match","title":"\u2705 test_expr_inside_match","text":""},{"location":"examples/exampleSet2/#description_13","title":"\ud83d\udcd6 Description","text":"<p>Uses <code>$expr</code> inside <code>$match</code> to dynamically filter documents based on field values.</p>"},{"location":"examples/exampleSet2/#input-document_13","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  { \"_id\": 1, \"price\": 100 },\n  { \"_id\": 2, \"price\": 600 },\n  { \"_id\": 3, \"price\": 400 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_14","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$match\": {\n      \"$expr\": { \"$gt\": [\"$price\", 500] }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_14","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"_id\": 2, \"price\": 600 }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_extra_logic_pipeline","title":"\u2705 test_extra_logic_pipeline","text":""},{"location":"examples/exampleSet2/#description_14","title":"\ud83d\udcd6 Description","text":"<p>Classifies IoT sensor risk level using <code>$switch</code>, <code>$and</code>, <code>$or</code>, and <code>$lt</code> conditions.</p>"},{"location":"examples/exampleSet2/#input-document_14","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"device_id\": \"sensor-500\",\n  \"temperature\": 42,\n  \"humidity\": 82,\n  \"battery\": 18,\n  \"device_status\": \"online\",\n  \"signal_strength\": -95,\n  \"location\": \"ZoneA\",\n  \"uptime_hours\": 400\n}\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_15","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"risk_level\": {\n        \"$switch\": {\n          \"branches\": [\n            {\n              \"case\": {\n                \"$and\": [\n                  { \"$gte\": [\"$temperature\", 40] },\n                  { \"$gte\": [\"$humidity\", 80] },\n                  { \"$lt\": [\"$battery\", 20] }\n                ]\n              },\n              \"then\": \"Critical\"\n            },\n            {\n              \"case\": {\n                \"$or\": [\n                  { \"$lt\": [\"$signal_strength\", -90] },\n                  { \"$eq\": [\"$device_status\", \"offline\"] }\n                ]\n              },\n              \"then\": \"Warning\"\n            },\n            {\n              \"case\": {\n                \"$and\": [\n                  { \"$gt\": [\"$uptime_hours\", 300] },\n                  { \"$eq\": [\"$location\", \"ZoneA\"] }\n                ]\n              },\n              \"then\": \"Maintenance Due\"\n            }\n          ],\n          \"default\": \"Normal\"\n        }\n      }\n    }\n  },\n  {\n    \"$project\": {\n      \"device_id\": 1,\n      \"risk_level\": 1,\n      \"battery\": 1,\n      \"signal_strength\": 1,\n      \"uptime_hours\": 1\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_15","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"device_id\": \"sensor-500\",\n    \"risk_level\": \"Critical\",\n    \"battery\": 18,\n    \"signal_strength\": -95,\n    \"uptime_hours\": 400\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#test_extra_deep_pipeline","title":"\u2705 test_extra_deep_pipeline","text":""},{"location":"examples/exampleSet2/#description_15","title":"\ud83d\udcd6 Description","text":"<p>This test: - Computes total payment using <code>$reduce</code> - Extracts last tracking event for each shipment using <code>$arrayElemAt</code> and <code>$size</code> - Projects only essential order and customer fields</p>"},{"location":"examples/exampleSet2/#input-document_15","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"order_id\": \"A1001\",\n  \"customer\": {\n    \"name\": \"Alice Wonderland\",\n    \"loyalty\": \"gold\"\n  },\n  \"shipments\": [\n    {\n      \"shipment_id\": \"S1\",\n      \"tracking_events\": [\n        { \"status\": \"picked_up\", \"timestamp\": \"2023-01-10T10:00:00\" },\n        { \"status\": \"in_transit\", \"timestamp\": \"2023-01-11T12:00:00\" }\n      ]\n    },\n    {\n      \"shipment_id\": \"S2\",\n      \"tracking_events\": [\n        { \"status\": \"picked_up\", \"timestamp\": \"2023-01-12T09:00:00\" },\n        { \"status\": \"delivered\", \"timestamp\": \"2023-01-14T16:00:00\" }\n      ]\n    }\n  ],\n  \"payment\": {\n    \"transactions\": [\n      { \"txn_id\": \"T1\", \"amount\": 120 },\n      { \"txn_id\": \"T2\", \"amount\": 30 }\n    ]\n  }\n}\n</code></pre>"},{"location":"examples/exampleSet2/#pipeline_16","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$addFields\": {\n      \"total_payment_amount\": {\n        \"$reduce\": {\n          \"input\": \"$payment.transactions\",\n          \"initialValue\": 0,\n          \"in\": { \"$add\": [\"$$value\", \"$$this.amount\"] }\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"last_status_per_shipment\": {\n        \"$map\": {\n          \"input\": \"$shipments\",\n          \"as\": \"shipment\",\n          \"in\": {\n            \"shipment_id\": \"$$shipment.shipment_id\",\n            \"last_event\": {\n              \"$arrayElemAt\": [\n                \"$$shipment.tracking_events\",\n                { \"$subtract\": [ { \"$size\": \"$$shipment.tracking_events\" }, 1 ] }\n              ]\n            }\n          }\n        }\n      }\n    }\n  },\n  {\n    \"$project\": {\n      \"order_id\": 1,\n      \"customer_name\": \"$customer.name\",\n      \"customer_loyalty\": \"$customer.loyalty\",\n      \"total_payment_amount\": 1,\n      \"last_status_per_shipment\": 1\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet2/#output_16","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"order_id\": \"A1001\",\n    \"customer_name\": \"Alice Wonderland\",\n    \"customer_loyalty\": \"gold\",\n    \"total_payment_amount\": 150,\n    \"last_status_per_shipment\": [\n      {\n        \"shipment_id\": \"S1\",\n        \"last_event\": {\n          \"status\": \"in_transit\",\n          \"timestamp\": \"2023-01-11T12:00:00\"\n        }\n      },\n      {\n        \"shipment_id\": \"S2\",\n        \"last_event\": {\n          \"status\": \"delivered\",\n          \"timestamp\": \"2023-01-14T16:00:00\"\n        }\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet3/","title":"Deep Pipeline Scenarios","text":"<p>Built from <code>fluxion-core/src/test/java/.../DeepPipelineTest.java</code>. Each scenario demonstrates multi-stage pipelines with nested arrays, reducers, windowing, and conditional logic.</p>"},{"location":"examples/exampleSet3/#how-to-run-the-scenarios","title":"How to run the scenarios","text":"<pre><code>mvn -pl fluxion-core test -Dtest=DeepPipelineTest\n</code></pre> <p>Or run the entire module:</p> <pre><code>mvn -pl fluxion-core -am test\n</code></pre>"},{"location":"examples/exampleSet3/#scenario-summary","title":"Scenario summary","text":"Test Highlights <code>test_deep_pipeline</code> <code>$reduce</code>, <code>$map</code>, <code>$match</code>, <code>$project</code> \u2013 calculate total payment and total item cost. <code>test_deep_nested_pipeline</code> <code>$filter</code>, <code>$map</code>, <code>$reduce</code>, <code>$dateAdd</code>, <code>$cond</code> \u2013 filter high-quantity items and compute order status. <code>test_deep_nested_pipeline_two</code> <code>$map</code>, <code>$reduce</code>, <code>$switch</code>, <code>$project</code> \u2013 flatten nested orders and classify status. <code>test_degree_pipeline</code> (if present) <code>$group</code>, <code>$unwind</code>, <code>$setWindowFields</code> \u2013 windowed aggregations across nested data. <code>test_deep_pipeline_with_variables</code> Demonstrates <code>$$ROOT</code>, <code>$$CURRENT</code>, custom variables. <p>Below are the two most illustrative scenarios. Clone them when you need complex transformations or nested-array manipulations.</p>"},{"location":"examples/exampleSet3/#1-test_deep_pipeline","title":"1. <code>test_deep_pipeline</code>","text":"<pre><code>Input:\n[\n  {\n    \"order_id\": \"A1001\",\n    \"payment\": {\n      \"transactions\": [\n        {\"txn_id\": \"T1\", \"amount\": 120},\n        {\"txn_id\": \"T2\", \"amount\": 30}\n      ]\n    },\n    \"items\": [\n      {\"price\": 100, \"quantity\": 2},\n      {\"price\": 50, \"quantity\": 1}\n    ],\n    \"created_at\": \"2023-04-15T10:00:00\"\n  }\n]\n\nPipeline:\n[\n  {\n    \"$addFields\": {\n      \"total_payment\": {\n        \"$reduce\": {\n          \"input\": \"$payment.transactions\",\n          \"initialValue\": 0,\n          \"in\": { \"$add\": [\"$$value\", \"$$this.amount\"] }\n        }\n      },\n      \"total_item_cost\": {\n        \"$reduce\": {\n          \"input\": {\n            \"$map\": {\n              \"input\": \"$items\",\n              \"as\": \"item\",\n              \"in\": { \"$multiply\": [\"$$item.price\", \"$$item.quantity\"] }\n            }\n          },\n          \"initialValue\": 0,\n          \"in\": { \"$add\": [\"$$value\", \"$$this\"] }\n        }\n      }\n    }\n  },\n  { \"$match\": { \"total_payment\": { \"$gte\": 100 } } },\n  { \"$project\": { \"order_id\": 1, \"total_payment\": 1, \"total_item_cost\": 1, \"_id\": 0 } }\n]\n\nOutput:\n[\n  {\n    \"order_id\": \"A1001\",\n    \"total_payment\": 150,\n    \"total_item_cost\": 250\n  }\n]\n</code></pre> <p>Key ideas</p> <ul> <li><code>$reduce</code> is ideal when summing nested array values.</li> <li>Compose <code>$map</code> inside <code>$reduce</code> to transform data before accumulation.</li> </ul>"},{"location":"examples/exampleSet3/#2-test_deep_nested_pipeline","title":"2. <code>test_deep_nested_pipeline</code>","text":"<pre><code>Input:\n[\n  {\n    \"order_id\": \"ORD123\",\n    \"order_date\": \"2024-04-01T00:00:00\",\n    \"items\": [\n      {\"item\": \"Pen\", \"quantity\": 0, \"unit_price\": 1.5},\n      {\"item\": \"Notebook\", \"quantity\": 10, \"unit_price\": 5.0},\n      {\"item\": \"Bag\", \"quantity\": 3, \"unit_price\": 20.0}\n    ]\n  }\n]\n\nPipeline:\n[\n  {\n    \"$project\": {\n      \"order_id\": 1,\n      \"filtered_items\": {\n        \"$filter\": {\n          \"input\": \"$items\",\n          \"as\": \"item\",\n          \"cond\": { \"$gt\": [\"$$item.quantity\", 1] }\n        }\n      },\n      \"total_amount\": {\n        \"$reduce\": {\n          \"input\": {\n            \"$map\": {\n              \"input\": {\n                \"$filter\": {\n                  \"input\": \"$items\",\n                  \"as\": \"item\",\n                  \"cond\": { \"$gt\": [\"$$item.quantity\", 1] }\n                }\n              },\n              \"as\": \"item\",\n              \"in\": {\n                \"$multiply\": [\"$$item.quantity\", \"$$item.unit_price\"]\n              }\n            }\n          },\n          \"initialValue\": 0,\n          \"in\": { \"$add\": [\"$$value\", \"$$this\"] }\n        }\n      },\n      \"expected_delivery\": {\n        \"$dateAdd\": {\n          \"startDate\": \"$order_date\",\n          \"unit\": \"day\",\n          \"amount\": 7\n        }\n      }\n    }\n  },\n  {\n    \"$addFields\": {\n      \"order_status\": {\n        \"$cond\": {\n          \"if\": { \"$gte\": [\"$total_amount\", 100] },\n          \"then\": \"approved\",\n          \"else\": \"pending\"\n        }\n      }\n    }\n  }\n]\n\nOutput:\n[\n  {\n    \"order_id\": \"ORD123\",\n    \"filtered_items\": [\n      { \"item\": \"Notebook\", \"quantity\": 10, \"unit_price\": 5.0 },\n      { \"item\": \"Bag\", \"quantity\": 3, \"unit_price\": 20.0 }\n    ],\n    \"total_amount\": 170,\n    \"expected_delivery\": \"2024-04-08T00:00:00\",\n    \"order_status\": \"approved\"\n  }\n]\n</code></pre> <p>Key ideas</p> <ul> <li>Chain <code>$filter</code> \u2192 <code>$map</code> \u2192 <code>$reduce</code> to process nested arrays.</li> <li><code>$dateAdd</code> and <code>$cond</code> are handy for scheduling and approval flows.</li> </ul>"},{"location":"examples/exampleSet3/#extending-the-suite","title":"Extending the suite","text":"<ul> <li>Add tests covering system variables (<code>$$ROOT</code>, <code>$$CURRENT</code>, <code>$$REMOVE</code>).</li> <li>Include <code>$setWindowFields</code> for moving averages or rank calculations.</li> <li>Test negative paths (no matching items, zero transactions) to validate   default behaviour.</li> </ul> <p>These scenarios are ready-made templates for complex analytical pipelines\u2014drop them into your services or expand them into broader regression suites.           {\"name\": \"Phone\", \"price\": 500, \"qty\": 1},           {\"name\": \"Charger\", \"qty\": 1}         ]       }     ]   } ]</p> <pre><code>\n### \ud83d\udccc Pipeline\n\nSee full implementation in source \u2013 uses:\n- `$map`\n- `$reduce`\n- `$switch`\n- `$ifNull`\n\n### \ud83d\udce4 Output\n\n```json\n[\n  {\n    \"user_id\": \"U123\",\n    \"orders\": [\n      { \"order_id\": \"O100\", \"order_total\": 1104, \"order_status\": \"high_value\" },\n      { \"order_id\": \"O101\", \"order_total\": 504, \"order_status\": \"high_value\" }\n    ]\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet3/#test_deep_nested_expr_bucket_auto","title":"\u2705 test_deep_nested_expr_bucket_auto","text":""},{"location":"examples/exampleSet3/#description","title":"\ud83d\udcd6 Description","text":"<p>This test: - Uses <code>$match</code> with <code>$expr</code> to filter products with price &gt; 100 - Applies <code>$facet</code> to run:   - <code>$bucketAuto</code>: Group prices into 2 auto-sized buckets with a count   - <code>$group</code> + <code>$sort</code>: Identify top products by sales value</p>"},{"location":"examples/exampleSet3/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  {\"_id\": 1, \"product\": \"Laptop\", \"price\": 1200},\n  {\"_id\": 2, \"product\": \"Phone\", \"price\": 800},\n  {\"_id\": 3, \"product\": \"Tablet\", \"price\": 400},\n  {\"_id\": 4, \"product\": \"Mouse\", \"price\": 50},\n  {\"_id\": 5, \"product\": \"Charger\", \"price\": 30}\n]\n</code></pre>"},{"location":"examples/exampleSet3/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$match\": { \"$expr\": { \"$gt\": [\"$price\", 100] } } },\n  {\n    \"$facet\": {\n      \"priceBuckets\": [\n        {\n          \"$bucketAuto\": {\n            \"groupBy\": \"$price\",\n            \"buckets\": 2,\n            \"output\": { \"count\": { \"$sum\": 1 } }\n          }\n        }\n      ],\n      \"topProducts\": [\n        {\n          \"$group\": {\n            \"_id\": \"$product\",\n            \"totalSales\": { \"$sum\": \"$price\" }\n          }\n        },\n        { \"$sort\": { \"totalSales\": -1 } }\n      ]\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet3/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"priceBuckets\": [\n      { \"_id\": { \"min\": 400, \"max\": 800 }, \"count\": 1 },\n      { \"_id\": { \"min\": 800, \"max\": 1200 }, \"count\": 1 }\n    ],\n    \"topProducts\": [\n      { \"_id\": \"Laptop\", \"totalSales\": 1200 },\n      { \"_id\": \"Phone\", \"totalSales\": 800 },\n      { \"_id\": \"Tablet\", \"totalSales\": 400 }\n    ]\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet3/#test_change_internal_array_object_structure","title":"\u2705 test_change_internal_array_object_structure","text":""},{"location":"examples/exampleSet3/#description_1","title":"\ud83d\udcd6 Description","text":"<p>This test filters nested array <code>items</code> based on a sub-array condition: - Only keeps those with feature <code>\"Anti-Slip Pads\"</code> - Reshapes inner structure using <code>$map</code>, <code>$filter</code>, and <code>$cond</code></p>"},{"location":"examples/exampleSet3/#input-document-abbreviated","title":"\ud83d\udce5 Input Document (abbreviated)","text":"<pre><code>[\n  {\n    \"order_id\": \"ORD123456\",\n    \"items\": [\n      {\n        \"product_id\": \"PROD001\",\n        \"features\": [\n          { \"feature_name\": \"Waterproof\", \"description\": \"Water-resistant material\" }\n        ]\n      },\n      {\n        \"product_id\": \"PROD002\",\n        \"features\": [\n          { \"feature_name\": \"Anti-Slip Pads\", \"description\": \"Rubber pads prevent slipping and scratching\" }\n        ]\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet3/#pipeline_1","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$set\": {\n      \"items\": {\n        \"$map\": {\n          \"input\": {\n            \"$filter\": {\n              \"input\": \"$items\",\n              \"as\": \"item\",\n              \"cond\": {\n                \"$gt\": [\n                  {\n                    \"$size\": {\n                      \"$filter\": {\n                        \"input\": { \"$ifNull\": [\"$$item.features\", []] },\n                        \"as\": \"feature\",\n                        \"cond\": { \"$eq\": [\"$$feature.feature_name\", \"Anti-Slip Pads\"] }\n                      }\n                    }\n                  },\n                  0\n                ]\n              }\n            }\n          },\n          \"as\": \"item\",\n          \"in\": {\n            \"product_id\": \"$$item.product_id\",\n            \"features\": {\n              \"$map\": {\n                \"input\": {\n                  \"$filter\": {\n                    \"input\": { \"$ifNull\": [\"$$item.features\", []] },\n                    \"as\": \"feature\",\n                    \"cond\": { \"$eq\": [\"$$feature.feature_name\", \"Anti-Slip Pads\"] }\n                  }\n                },\n                \"as\": \"feature\",\n                \"in\": {\n                  \"title\": \"$$feature.feature_name\",\n                  \"details\": \"$$feature.description\",\n                  \"enabled\": {\n                    \"$cond\": {\n                      \"if\": { \"$eq\": [\"$$feature.feature_name\", \"Anti-Slip Pads\"] },\n                      \"then\": true,\n                      \"else\": false\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/exampleSet3/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"order_id\": \"ORD123456\",\n    \"items\": [\n      {\n        \"product_id\": \"PROD002\",\n        \"features\": [\n          {\n            \"title\": \"Anti-Slip Pads\",\n            \"details\": \"Rubber pads prevent slipping and scratching\",\n            \"enabled\": true\n          }\n        ]\n      }\n    ]\n  }\n]\n</code></pre>"},{"location":"operators/","title":"Expression Operator Overview","text":"<p>Fluxion mirrors MongoDB aggregation operators so you can compose complex transformations inside <code>$project</code>, <code>$addFields</code>, <code>$group</code>, and other stages. Browse the categories below, then use the sidebar for the complete alphabetical list.</p>"},{"location":"operators/#comparison-logic","title":"Comparison &amp; Logic","text":"<ul> <li>$eq, $ne, $gt, $gte, $lt, $lte</li> <li>Set membership: $in, $nin</li> <li>Logical helpers: $and, $or, $not, $switch, $ifNull</li> </ul>"},{"location":"operators/#math-numeric","title":"Math &amp; Numeric","text":"<ul> <li>Arithmetic: $add, $subtract, $multiply, $divide, $mod</li> <li>Rounding: $ceil, $floor, $round, $trunc</li> <li>Advanced math: $pow, $sqrt, $exp, $ln, $log10</li> </ul>"},{"location":"operators/#array-utilities","title":"Array Utilities","text":"<ul> <li>Transformation: $map, $filter, $reduce</li> <li>Structure: $concatArrays, $arrayElemAt, $zip</li> <li>Analysis: $size, $slice, $reverseArray</li> </ul>"},{"location":"operators/#string-processing","title":"String Processing","text":"<ul> <li>Case &amp; trimming: $toLower, $toUpper, $trim, $ltrim, $rtrim</li> <li>Substrings: $substr, $substrBytes, $substrCP</li> <li>Matching: $split, $strcasecmp, $regexMatch</li> </ul>"},{"location":"operators/#date-time","title":"Date &amp; Time","text":"<ul> <li>Conversion and extraction: $toDate (covers <code>$year</code>, <code>$month</code>, <code>$week</code>, etc. through options).</li> <li>Differences and arithmetic: $add with date operands, $subtract, and $convert.</li> </ul>"},{"location":"operators/#type-object-utilities","title":"Type &amp; Object Utilities","text":"<ul> <li>Conversion: $convert, $toInt, $toDouble, $toBool, $toString</li> <li>Inspection: $type, $literal</li> <li>Object helpers: $getField, $setField, $unsetField, $mergeObjects, $objectToArray, $arrayToObject</li> </ul>"},{"location":"operators/#special-execution","title":"Special Execution","text":"<ul> <li>$function for JavaScript-style custom logic with <code>body</code>, <code>args</code>, and optional <code>lang</code>.</li> </ul> <p>Looking for something specific? Use the search box or the alphabetical list in the sidebar to jump straight to the operator you need.</p>"},{"location":"operators/abs/","title":"$abs","text":"<p>Returns the absolute value of a numeric expression.</p>"},{"location":"operators/abs/#syntax","title":"Syntax","text":"<pre><code>{ \"$abs\": &lt;numberExpression&gt; }\n</code></pre>"},{"location":"operators/abs/#example","title":"Example","text":""},{"location":"operators/abs/#input","title":"Input","text":"<pre><code>{ \"delta\": -42 }\n</code></pre>"},{"location":"operators/abs/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"deltaAbs\": { \"$abs\": \"$delta\" } } }\n</code></pre>"},{"location":"operators/abs/#output","title":"Output","text":"<pre><code>{ \"deltaAbs\": 42 }\n</code></pre>"},{"location":"operators/add/","title":"$add","text":"<p>The <code>$add</code> operator adds numbers together or concatenates dates and numeric expressions.</p>"},{"location":"operators/add/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$add\": [ &lt;expression1&gt;, &lt;expression2&gt;, ... ] }\n</code></pre> <p>Each expression should resolve to a number or date.</p>"},{"location":"operators/add/#base-example-add-two-fields","title":"\u2705 Base Example \u2013 Add Two Fields","text":""},{"location":"operators/add/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"price\": 100, \"tax\": 20 }\n</code></pre>"},{"location":"operators/add/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$add\": [\"$price\", \"$tax\"] }\n</code></pre>"},{"location":"operators/add/#output","title":"\ud83d\udce4 Output","text":"<pre><code>120\n</code></pre>"},{"location":"operators/add/#deep-nested-example-compute-total-for-each-item-in-an-order","title":"\ud83e\uddf1 Deep Nested Example \u2013 Compute Total for Each Item in an Order","text":""},{"location":"operators/add/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"totalCost\": { \"$add\": [\"$items.price\", \"$items.tax\"] }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/add/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 1,\n  \"items\": [\n    { \"name\": \"Laptop\", \"price\": 1000, \"tax\": 130 },\n    { \"name\": \"Mouse\", \"price\": 50, \"tax\": 5 }\n  ]\n}\n</code></pre>"},{"location":"operators/add/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  { \"product\": \"Laptop\", \"totalCost\": 1130 },\n  { \"product\": \"Mouse\", \"totalCost\": 55 }\n]\n</code></pre>"},{"location":"operators/add/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Calculating final prices</li> <li>Summing quantities</li> <li>Adding durations to timestamps</li> </ul>"},{"location":"operators/add/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$subtract</code>, <code>$multiply</code>, <code>$divide</code> \u2013 arithmetic family</li> <li><code>$project</code>, <code>$group</code> \u2013 stages where <code>$add</code> is commonly used</li> </ul>"},{"location":"operators/allElementsTrue/","title":"$allElementsTrue","text":"<p>The <code>$allElementsTrue</code> operator returns <code>true</code> if every element in the input array evaluates to a truthy value.</p>"},{"location":"operators/allElementsTrue/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$allElementsTrue\": [ &lt;arrayExpression&gt; ] }\n</code></pre>"},{"location":"operators/allElementsTrue/#base-example-all-true","title":"\u2705 Base Example \u2013 All True","text":""},{"location":"operators/allElementsTrue/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"results\": [1, true, \"ok\"] }\n</code></pre>"},{"location":"operators/allElementsTrue/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$allElementsTrue\": [\"$results\"] }\n</code></pre>"},{"location":"operators/allElementsTrue/#output","title":"\ud83d\udce4 Output","text":"<pre><code>true\n</code></pre>"},{"location":"operators/allElementsTrue/#base-example-contains-falsy","title":"\u2705 Base Example \u2013 Contains Falsy","text":""},{"location":"operators/allElementsTrue/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"values\": [1, 0, true] }\n</code></pre>"},{"location":"operators/allElementsTrue/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$allElementsTrue\": [\"$values\"] }\n</code></pre>"},{"location":"operators/allElementsTrue/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>false\n</code></pre>"},{"location":"operators/allElementsTrue/#ecommerce-example-all-features-enabled","title":"\ud83e\uddf1 Ecommerce Example \u2013 All Features Enabled","text":""},{"location":"operators/allElementsTrue/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"name\": 1,\n      \"allEnabled\": {\n        \"$allElementsTrue\": {\n          \"$map\": {\n            \"input\": \"$features\",\n            \"as\": \"f\",\n            \"in\": \"$$f.enabled\"\n          }\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/allElementsTrue/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Standing Desk\",\n  \"features\": [\n    { \"title\": \"Electric Height\", \"enabled\": true },\n    { \"title\": \"Memory Presets\", \"enabled\": true }\n  ]\n}\n</code></pre>"},{"location":"operators/allElementsTrue/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"name\": \"Standing Desk\",\n  \"allEnabled\": true\n}\n</code></pre>"},{"location":"operators/allElementsTrue/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Verify that every value meets a condition</li> <li>Check that all features/options are enabled</li> <li>Chain with <code>$map</code>, <code>$filter</code></li> </ul>"},{"location":"operators/allElementsTrue/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$anyElementTrue</code>, <code>$reduce</code>, <code>$cond</code>, <code>$and</code></li> </ul>"},{"location":"operators/allElementsTrue/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Returns <code>true</code> for an empty array</li> <li>Each element is evaluated using JavaScript-style truthiness</li> </ul>"},{"location":"operators/and/","title":"$and","text":"<p>Returns <code>true</code> only when every expression in the array evaluates to a truthy value.</p>"},{"location":"operators/and/#syntax","title":"Syntax","text":"<pre><code>{ \"$and\": [ &lt;expression1&gt;, &lt;expression2&gt;, ... ] }\n</code></pre>"},{"location":"operators/and/#example","title":"Example","text":""},{"location":"operators/and/#input","title":"Input","text":"<pre><code>{ \"status\": \"active\", \"paymentReceived\": true }\n</code></pre>"},{"location":"operators/and/#stage","title":"Stage","text":"<pre><code>{\n  \"$project\": {\n    \"canFulfill\": {\n      \"$and\": [\n        { \"$eq\": [\"$status\", \"active\"] },\n        \"$paymentReceived\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"operators/and/#output","title":"Output","text":"<pre><code>{ \"canFulfill\": true }\n</code></pre>"},{"location":"operators/anyElementTrue/","title":"$anyElementTrue","text":"<p>The <code>$anyElementTrue</code> operator returns <code>true</code> if any element of the input array evaluates to a truthy value.</p>"},{"location":"operators/anyElementTrue/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$anyElementTrue\": [ &lt;arrayExpression&gt; ] }\n</code></pre>"},{"location":"operators/anyElementTrue/#base-example-check-if-any-truthy","title":"\u2705 Base Example \u2013 Check If Any Truthy","text":""},{"location":"operators/anyElementTrue/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"flags\": [false, false, true, false] }\n</code></pre>"},{"location":"operators/anyElementTrue/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$anyElementTrue\": [\"$flags\"] }\n</code></pre>"},{"location":"operators/anyElementTrue/#output","title":"\ud83d\udce4 Output","text":"<pre><code>true\n</code></pre>"},{"location":"operators/anyElementTrue/#base-example-all-falsy","title":"\u2705 Base Example \u2013 All Falsy","text":""},{"location":"operators/anyElementTrue/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"checks\": [false, 0, null] }\n</code></pre>"},{"location":"operators/anyElementTrue/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$anyElementTrue\": [\"$checks\"] }\n</code></pre>"},{"location":"operators/anyElementTrue/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>false\n</code></pre>"},{"location":"operators/anyElementTrue/#ecommerce-example-check-for-available-features","title":"\ud83e\uddf1 Ecommerce Example \u2013 Check for Available Features","text":""},{"location":"operators/anyElementTrue/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"hasFeature\": {\n        \"$anyElementTrue\": {\n          \"$map\": {\n            \"input\": \"$features\",\n            \"as\": \"f\",\n            \"in\": \"$$f.enabled\"\n          }\n        }\n      },\n      \"name\": 1\n    }\n  }\n]\n</code></pre>"},{"location":"operators/anyElementTrue/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Chair\",\n  \"features\": [\n    { \"title\": \"Padded Seat\", \"enabled\": false },\n    { \"title\": \"Adjustable Height\", \"enabled\": true }\n  ]\n}\n</code></pre>"},{"location":"operators/anyElementTrue/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"name\": \"Chair\",\n  \"hasFeature\": true\n}\n</code></pre>"},{"location":"operators/anyElementTrue/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Detect at least one match</li> <li>Validate presence of flags or statuses</li> <li>Use after <code>$map</code> or <code>$filter</code></li> </ul>"},{"location":"operators/anyElementTrue/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$allElementsTrue</code>, <code>$map</code>, <code>$reduce</code>, <code>$cond</code>, <code>$or</code></li> </ul>"},{"location":"operators/anyElementTrue/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Returns <code>false</code> for an empty array.</li> <li>Converts each element to boolean using JavaScript-like truthiness.</li> </ul>"},{"location":"operators/arrayElemAt/","title":"$arrayElemAt","text":"<p>The <code>$arrayElemAt</code> operator returns the element at a specified index in an array.</p>"},{"location":"operators/arrayElemAt/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$arrayElemAt\": [ &lt;arrayExpression&gt;, &lt;index&gt; ] }\n</code></pre> <ul> <li>Indexing starts at 0.</li> <li>Negative indexes count from the end.</li> </ul>"},{"location":"operators/arrayElemAt/#base-example-get-first-tag","title":"\u2705 Base Example \u2013 Get First Tag","text":""},{"location":"operators/arrayElemAt/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"sale\", \"new\", \"trending\"] }\n</code></pre>"},{"location":"operators/arrayElemAt/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$arrayElemAt\": [\"$tags\", 0] }\n</code></pre>"},{"location":"operators/arrayElemAt/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"sale\"\n</code></pre>"},{"location":"operators/arrayElemAt/#base-example-get-last-element","title":"\u2705 Base Example \u2013 Get Last Element","text":""},{"location":"operators/arrayElemAt/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"sale\", \"new\", \"trending\"] }\n</code></pre>"},{"location":"operators/arrayElemAt/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$arrayElemAt\": [\"$tags\", -1] }\n</code></pre>"},{"location":"operators/arrayElemAt/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"trending\"\n</code></pre>"},{"location":"operators/arrayElemAt/#ecommerce-example-access-top-scoring-review","title":"\ud83e\uddf1 Ecommerce Example \u2013 Access Top-Scoring Review","text":""},{"location":"operators/arrayElemAt/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"topReview\": { \"$arrayElemAt\": [\"$reviews\", 0] }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/arrayElemAt/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Laptop\",\n  \"reviews\": [\n    { \"user\": \"Alice\", \"rating\": 5 },\n    { \"user\": \"Bob\", \"rating\": 4 }\n  ]\n}\n</code></pre>"},{"location":"operators/arrayElemAt/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Laptop\",\n  \"topReview\": { \"user\": \"Alice\", \"rating\": 5 }\n}\n</code></pre>"},{"location":"operators/arrayElemAt/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Access top/last items</li> <li>Index-based lookups</li> <li>Extract highlights or featured content</li> </ul>"},{"location":"operators/arrayElemAt/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$slice</code>, <code>$filter</code>, <code>$map</code>, <code>$reduce</code></li> </ul>"},{"location":"operators/arrayElemAt/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Index out of bounds returns <code>null</code>.</li> <li>Combine with <code>$size</code> or <code>$cond</code> for safer access.</li> </ul>"},{"location":"operators/arrayToObject/","title":"$arrayToObject","text":"<p>The <code>$arrayToObject</code> operator transforms an array of key-value documents into a single document (object).</p>"},{"location":"operators/arrayToObject/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$arrayToObject\": &lt;arrayExpression&gt; }\n</code></pre> <p>Each array element must be a document with <code>\"k\"</code> (key) and <code>\"v\"</code> (value) fields.</p>"},{"location":"operators/arrayToObject/#base-example-convert-array-to-object","title":"\u2705 Base Example \u2013 Convert Array to Object","text":""},{"location":"operators/arrayToObject/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"pairs\": [\n    { \"k\": \"a\", \"v\": 1 },\n    { \"k\": \"b\", \"v\": 2 }\n  ]\n}\n</code></pre>"},{"location":"operators/arrayToObject/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$arrayToObject\": \"$pairs\" }\n</code></pre>"},{"location":"operators/arrayToObject/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"a\": 1, \"b\": 2 }\n</code></pre>"},{"location":"operators/arrayToObject/#ecommerce-example-reconstruct-dynamic-attributes","title":"\ud83e\uddf1 Ecommerce Example \u2013 Reconstruct Dynamic Attributes","text":""},{"location":"operators/arrayToObject/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"properties\": {\n        \"$arrayToObject\": \"$attributes\"\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/arrayToObject/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Shoes\",\n  \"attributes\": [\n    { \"k\": \"color\", \"v\": \"Black\" },\n    { \"k\": \"size\", \"v\": \"42\" }\n  ]\n}\n</code></pre>"},{"location":"operators/arrayToObject/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Shoes\",\n  \"properties\": {\n    \"color\": \"Black\",\n    \"size\": \"42\"\n  }\n}\n</code></pre>"},{"location":"operators/arrayToObject/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Reconstruct flattened key-value arrays</li> <li>Transform map-reduce style output</li> <li>Enable object-style access to filtered key-value results</li> </ul>"},{"location":"operators/arrayToObject/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$objectToArray</code>, <code>$map</code>, <code>$mergeObjects</code>, <code>$getField</code>, <code>$setField</code></li> </ul>"},{"location":"operators/arrayToObject/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Input array must be in <code>[{k, v}]</code> format</li> <li>Duplicate keys will overwrite earlier values</li> </ul>"},{"location":"operators/avg/","title":"$avg","text":"<p>Calculates the arithmetic mean of the supplied numeric values.</p>"},{"location":"operators/avg/#syntax","title":"Syntax","text":"<pre><code>{ \"$avg\": &lt;arrayExpression&gt; }\n</code></pre>"},{"location":"operators/avg/#example","title":"Example","text":""},{"location":"operators/avg/#input","title":"Input","text":"<pre><code>{ \"scores\": [90, 85, 95] }\n</code></pre>"},{"location":"operators/avg/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"averageScore\": { \"$avg\": \"$scores\" } } }\n</code></pre>"},{"location":"operators/avg/#output","title":"Output","text":"<pre><code>{ \"averageScore\": 90 }\n</code></pre>"},{"location":"operators/ceil/","title":"$ceil","text":"<p>Rounds a numeric expression up to the nearest integer.</p>"},{"location":"operators/ceil/#syntax","title":"Syntax","text":"<pre><code>{ \"$ceil\": &lt;numberExpression&gt; }\n</code></pre>"},{"location":"operators/ceil/#example","title":"Example","text":""},{"location":"operators/ceil/#input","title":"Input","text":"<pre><code>{ \"measurement\": 12.01 }\n</code></pre>"},{"location":"operators/ceil/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"roundedUp\": { \"$ceil\": \"$measurement\" } } }\n</code></pre>"},{"location":"operators/ceil/#output","title":"Output","text":"<pre><code>{ \"roundedUp\": 13 }\n</code></pre>"},{"location":"operators/concat/","title":"$concat","text":"<p>The <code>$concat</code> operator joins strings together into a single string.</p>"},{"location":"operators/concat/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$concat\": [ &lt;expression1&gt;, &lt;expression2&gt;, ... ] }\n</code></pre> <p>All expressions must resolve to strings. If any operand resolves to <code>null</code>, the result is <code>null</code>.</p>"},{"location":"operators/concat/#base-example-1-full-name","title":"\u2705 Base Example 1 \u2013 Full Name","text":""},{"location":"operators/concat/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"firstName\": \"Jane\", \"lastName\": \"Doe\" }\n</code></pre>"},{"location":"operators/concat/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$concat\": [\"$firstName\", \" \", \"$lastName\"] }\n</code></pre>"},{"location":"operators/concat/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"Jane Doe\"\n</code></pre>"},{"location":"operators/concat/#base-example-2-file-path-builder","title":"\u2705 Base Example 2 \u2013 File Path Builder","text":""},{"location":"operators/concat/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"folder\": \"invoices\", \"file\": \"2025.pdf\" }\n</code></pre>"},{"location":"operators/concat/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$concat\": [\"/data/\", \"$folder\", \"/\", \"$file\"] }\n</code></pre>"},{"location":"operators/concat/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"/data/invoices/2025.pdf\"\n</code></pre>"},{"location":"operators/concat/#ecommerce-example-generate-sku-code","title":"\ud83e\uddf1 Ecommerce Example \u2013 Generate SKU Code","text":""},{"location":"operators/concat/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"sku\": {\n        \"$concat\": [\n          \"$items.category\", \"-\",\n          \"$items.brand\", \"-\",\n          \"$items.productId\"\n        ]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/concat/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    {\n      \"productId\": \"X123\",\n      \"category\": \"ELEC\",\n      \"brand\": \"SNY\"\n    },\n    {\n      \"productId\": \"Y987\",\n      \"category\": \"BOOK\",\n      \"brand\": \"PNH\"\n    }\n  ]\n}\n</code></pre>"},{"location":"operators/concat/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"sku\": \"ELEC-SNY-X123\" },\n  { \"sku\": \"BOOK-PNH-Y987\" }\n]\n</code></pre>"},{"location":"operators/concat/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Formatting names and addresses</li> <li>Constructing SKUs or file paths</li> <li>HTML or CSV generation</li> </ul>"},{"location":"operators/concat/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$toString</code>, <code>$substr</code>, <code>$toLower</code>, <code>$trim</code></li> <li><code>$project</code>, <code>$set</code>, <code>$map</code></li> </ul>"},{"location":"operators/concat/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Ensure all values are strings or cast them using <code>$toString</code>.</li> <li>Use <code>$cond</code> or <code>$ifNull</code> to avoid null operands.</li> </ul>"},{"location":"operators/concatArrays/","title":"$concatArrays","text":"<p>The <code>$concatArrays</code> operator merges two or more arrays into a single array.</p>"},{"location":"operators/concatArrays/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$concatArrays\": [ &lt;array1&gt;, &lt;array2&gt;, ... ] }\n</code></pre>"},{"location":"operators/concatArrays/#base-example-merge-lists","title":"\u2705 Base Example \u2013 Merge Lists","text":""},{"location":"operators/concatArrays/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"a\": [1, 2], \"b\": [3, 4] }\n</code></pre>"},{"location":"operators/concatArrays/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$concatArrays\": [\"$a\", \"$b\"] }\n</code></pre>"},{"location":"operators/concatArrays/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[1, 2, 3, 4]\n</code></pre>"},{"location":"operators/concatArrays/#base-example-add-single-item","title":"\u2705 Base Example \u2013 Add Single Item","text":""},{"location":"operators/concatArrays/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"items\": [\"Pen\", \"Book\"] }\n</code></pre>"},{"location":"operators/concatArrays/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$concatArrays\": [\"$items\", [\"Notebook\"]] }\n</code></pre>"},{"location":"operators/concatArrays/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\"Pen\", \"Book\", \"Notebook\"]\n</code></pre>"},{"location":"operators/concatArrays/#ecommerce-example-combine-inventory-locations","title":"\ud83e\uddf1 Ecommerce Example \u2013 Combine Inventory Locations","text":""},{"location":"operators/concatArrays/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"allLocations\": {\n        \"$concatArrays\": [\"$warehouseA\", \"$warehouseB\"]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/concatArrays/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Speaker\",\n  \"warehouseA\": [\"W1\", \"W2\"],\n  \"warehouseB\": [\"W3\"]\n}\n</code></pre>"},{"location":"operators/concatArrays/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Speaker\",\n  \"allLocations\": [\"W1\", \"W2\", \"W3\"]\n}\n</code></pre>"},{"location":"operators/concatArrays/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Merge multiple inventories</li> <li>Combine feature lists</li> <li>Append new values to arrays</li> </ul>"},{"location":"operators/concatArrays/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$arrayElemAt</code>, <code>$slice</code>, <code>$map</code>, <code>$reduce</code>, <code>$literal</code></li> </ul>"},{"location":"operators/concatArrays/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Works only on arrays; input expressions must evaluate to arrays.</li> <li>Null or missing inputs are treated as <code>null</code> and return <code>null</code>.</li> </ul>"},{"location":"operators/cond/","title":"$cond","text":"<p>The <code>$cond</code> operator is a conditional (if\u2013then\u2013else) operator.</p> <p>It evaluates a condition and returns one of two expressions depending on whether the condition is true or false.</p>"},{"location":"operators/cond/#syntax","title":"\ud83d\udccc Syntax","text":""},{"location":"operators/cond/#object-syntax","title":"\u2705 Object Syntax","text":"<pre><code>{\n  \"$cond\": {\n    \"if\": &lt;condition&gt;,\n    \"then\": &lt;expression-if-true&gt;,\n    \"else\": &lt;expression-if-false&gt;\n  }\n}\n</code></pre>"},{"location":"operators/cond/#array-syntax","title":"\u2705 Array Syntax","text":"<pre><code>{ \"$cond\": [ &lt;condition&gt;, &lt;then&gt;, &lt;else&gt; ] }\n</code></pre>"},{"location":"operators/cond/#base-example-1-membership-status","title":"\u2705 Base Example 1 \u2013 Membership Status","text":""},{"location":"operators/cond/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"isMember\": true }\n</code></pre>"},{"location":"operators/cond/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$cond\": {\n    \"if\": \"$isMember\",\n    \"then\": \"Discounted\",\n    \"else\": \"Regular\"\n  }\n}\n</code></pre>"},{"location":"operators/cond/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"Discounted\"\n</code></pre>"},{"location":"operators/cond/#base-example-2-array-syntax","title":"\u2705 Base Example 2 \u2013 Array Syntax","text":""},{"location":"operators/cond/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"score\": 65 }\n</code></pre>"},{"location":"operators/cond/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$cond\": [ { \"$gte\": [\"$score\", 70] }, \"Pass\", \"Fail\" ] }\n</code></pre>"},{"location":"operators/cond/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"Fail\"\n</code></pre>"},{"location":"operators/cond/#ecommerce-example-shipping-fee-waiver","title":"\ud83e\uddf1 Ecommerce Example \u2013 Shipping Fee Waiver","text":""},{"location":"operators/cond/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"name\": \"$items.name\",\n      \"shippingFee\": {\n        \"$cond\": {\n          \"if\": { \"$gte\": [\"$items.price\", 100] },\n          \"then\": 0,\n          \"else\": 10\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/cond/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Monitor\", \"price\": 150 },\n    { \"name\": \"Cable\", \"price\": 20 }\n  ]\n}\n</code></pre>"},{"location":"operators/cond/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"name\": \"Monitor\", \"shippingFee\": 0 },\n  { \"name\": \"Cable\", \"shippingFee\": 10 }\n]\n</code></pre>"},{"location":"operators/cond/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Apply different logic based on price, quantity, status</li> <li>Select values conditionally inside <code>$project</code>, <code>$group</code>, <code>$map</code></li> <li>Use inside <code>$reduce</code>, <code>$switch</code>, <code>$filter</code></li> </ul>"},{"location":"operators/cond/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$ifNull</code>, <code>$switch</code>, <code>$eq</code>, <code>$gt</code>, <code>$lt</code>, <code>$gte</code>, <code>$lte</code></li> </ul>"},{"location":"operators/cond/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Flexible control structure in aggregation pipelines</li> <li>Both array and object syntax are supported by MongoDB (and Fluxion)</li> </ul>"},{"location":"operators/convert/","title":"$convert","text":"<p>The <code>$convert</code> operator explicitly converts a value to a specified type, optionally handling <code>onNull</code> and <code>onError</code> fallbacks.</p>"},{"location":"operators/convert/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$convert\": {\n    \"input\": &lt;expression&gt;,\n    \"to\": &lt;type&gt;,\n    \"onError\": &lt;fallback&gt;,     // optional\n    \"onNull\": &lt;fallback&gt;       // optional\n  }\n}\n</code></pre> <ul> <li><code>input</code>: The value to convert</li> <li><code>to</code>: Target type (<code>string</code>, <code>int</code>, <code>double</code>, <code>bool</code>, <code>date</code>, <code>objectId</code>)</li> <li><code>onError</code>: Value to return if conversion fails</li> <li><code>onNull</code>: Value to return if input is null or missing</li> </ul>"},{"location":"operators/convert/#base-example-convert-string-to-integer","title":"\u2705 Base Example \u2013 Convert String to Integer","text":""},{"location":"operators/convert/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"price\": \"100\" }\n</code></pre>"},{"location":"operators/convert/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$convert\": {\n    \"input\": \"$price\",\n    \"to\": \"int\"\n  }\n}\n</code></pre>"},{"location":"operators/convert/#output","title":"\ud83d\udce4 Output","text":"<pre><code>100\n</code></pre>"},{"location":"operators/convert/#with-onnull-and-onerror","title":"\u2705 With <code>onNull</code> and <code>onError</code>","text":""},{"location":"operators/convert/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"qty\": null }\n</code></pre>"},{"location":"operators/convert/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$convert\": {\n    \"input\": \"$qty\",\n    \"to\": \"int\",\n    \"onNull\": 0,\n    \"onError\": -1\n  }\n}\n</code></pre>"},{"location":"operators/convert/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>0\n</code></pre>"},{"location":"operators/convert/#ecommerce-example-convert-product-launch-date","title":"\ud83e\uddf1 Ecommerce Example \u2013 Convert Product Launch Date","text":""},{"location":"operators/convert/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"name\": 1,\n      \"launchDate\": {\n        \"$convert\": {\n          \"input\": \"$releaseDateStr\",\n          \"to\": \"date\",\n          \"onError\": \"$$CLUSTER_TIME\"\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/convert/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Tablet\",\n  \"releaseDateStr\": \"2024-03-01\"\n}\n</code></pre>"},{"location":"operators/convert/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"name\": \"Tablet\",\n  \"launchDate\": \"2024-03-01T00:00:00Z\"\n}\n</code></pre>"},{"location":"operators/convert/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Format validation and casting</li> <li>Prevent failures during transformation</li> <li>Normalize mixed-type inputs</li> </ul>"},{"location":"operators/convert/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$toString</code>, <code>$type</code>, <code>$literal</code>, <code>$ifNull</code></li> </ul>"},{"location":"operators/convert/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Conversion errors trigger <code>onError</code>, not pipeline failure</li> <li>Use <code>$type</code> to debug values before converting</li> </ul>"},{"location":"operators/divide/","title":"$divide","text":"<p>The <code>$divide</code> operator divides one number by another.</p>"},{"location":"operators/divide/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$divide\": [ &lt;numerator&gt;, &lt;denominator&gt; ] }\n</code></pre> <p>Both arguments must resolve to numeric values. Division by zero will result in an error or <code>null</code>.</p>"},{"location":"operators/divide/#base-example-1-simple-division","title":"\u2705 Base Example 1 \u2013 Simple Division","text":""},{"location":"operators/divide/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"total\": 100, \"parts\": 4 }\n</code></pre>"},{"location":"operators/divide/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$divide\": [\"$total\", \"$parts\"] }\n</code></pre>"},{"location":"operators/divide/#output","title":"\ud83d\udce4 Output","text":"<pre><code>25\n</code></pre>"},{"location":"operators/divide/#base-example-2-convert-cents-to-dollars","title":"\u2705 Base Example 2 \u2013 Convert Cents to Dollars","text":""},{"location":"operators/divide/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"amountInCents\": 1250 }\n</code></pre>"},{"location":"operators/divide/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$divide\": [\"$amountInCents\", 100] }\n</code></pre>"},{"location":"operators/divide/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>12.5\n</code></pre>"},{"location":"operators/divide/#ecommerce-example-compute-unit-price-per-item","title":"\ud83e\uddf1 Ecommerce Example \u2013 Compute Unit Price per Item","text":""},{"location":"operators/divide/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"unitPrice\": {\n        \"$divide\": [\"$items.totalPrice\", \"$items.quantity\"]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/divide/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 2002,\n  \"items\": [\n    { \"name\": \"Chair\", \"totalPrice\": 300, \"quantity\": 3 },\n    { \"name\": \"Desk\", \"totalPrice\": 500, \"quantity\": 1 }\n  ]\n}\n</code></pre>"},{"location":"operators/divide/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"product\": \"Chair\", \"unitPrice\": 100 },\n  { \"product\": \"Desk\", \"unitPrice\": 500 }\n]\n</code></pre>"},{"location":"operators/divide/#ecommerce-example-discount-percent","title":"\ud83e\uddf1 Ecommerce Example \u2013 Discount Percent","text":""},{"location":"operators/divide/#expression_2","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$divide\": [\"$discount\", \"$price\"] }\n</code></pre> <p>Used to compute the proportion of discount relative to the price.</p>"},{"location":"operators/divide/#input-document_3","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"price\": 250, \"discount\": 25 }\n</code></pre>"},{"location":"operators/divide/#output_3","title":"\ud83d\udce4 Output","text":"<pre><code>0.1\n</code></pre>"},{"location":"operators/divide/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Price per unit</li> <li>Percentage calculations</li> <li>Normalization</li> </ul>"},{"location":"operators/divide/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$add</code>, <code>$subtract</code>, <code>$multiply</code>, <code>$mod</code></li> <li><code>$cond</code>, <code>$round</code>, <code>$project</code></li> </ul>"},{"location":"operators/divide/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>If denominator is <code>0</code>, the result may be <code>null</code> or cause an error.</li> <li>Always validate for zero if dynamic input is used.</li> </ul>"},{"location":"operators/eq/","title":"$eq","text":"<p>Returns <code>true</code> when the two expressions evaluate to the same value.</p>"},{"location":"operators/eq/#syntax","title":"Syntax","text":"<pre><code>{ \"$eq\": [ &lt;expression1&gt;, &lt;expression2&gt; ] }\n</code></pre>"},{"location":"operators/eq/#example","title":"Example","text":""},{"location":"operators/eq/#input","title":"Input","text":"<pre><code>{ \"plan\": \"premium\" }\n</code></pre>"},{"location":"operators/eq/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"isPremium\": { \"$eq\": [\"$plan\", \"premium\"] } } }\n</code></pre>"},{"location":"operators/eq/#output","title":"Output","text":"<pre><code>{ \"isPremium\": true }\n</code></pre>"},{"location":"operators/exp/","title":"$exp","text":"<p>Raises Euler\u2019s number <code>e</code> to the power of the supplied numeric expression.</p>"},{"location":"operators/exp/#syntax","title":"Syntax","text":"<pre><code>{ \"$exp\": &lt;numberExpression&gt; }\n</code></pre>"},{"location":"operators/exp/#example","title":"Example","text":""},{"location":"operators/exp/#input","title":"Input","text":"<pre><code>{ \"growthRate\": 1.2 }\n</code></pre>"},{"location":"operators/exp/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"continuousGrowth\": { \"$exp\": \"$growthRate\" } } }\n</code></pre>"},{"location":"operators/exp/#output","title":"Output","text":"<pre><code>{ \"continuousGrowth\": 3.3201169227365472 }\n</code></pre>"},{"location":"operators/filter/","title":"$filter","text":"<p>The <code>$filter</code> operator selects elements from an array that satisfy a condition.</p>"},{"location":"operators/filter/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$filter\": {\n    \"input\": &lt;arrayExpression&gt;,\n    \"as\": &lt;variableName&gt;,\n    \"cond\": &lt;booleanExpression&gt;\n  }\n}\n</code></pre> <ul> <li><code>input</code>: The array to filter</li> <li><code>as</code>: The variable name for each item</li> <li><code>cond</code>: The condition that must be <code>true</code> to include the item</li> </ul>"},{"location":"operators/filter/#base-example-filter-even-numbers","title":"\u2705 Base Example \u2013 Filter Even Numbers","text":""},{"location":"operators/filter/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"nums\": [1, 2, 3, 4, 5, 6] }\n</code></pre>"},{"location":"operators/filter/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$filter\": {\n    \"input\": \"$nums\",\n    \"as\": \"num\",\n    \"cond\": { \"$eq\": [{ \"$mod\": [\"$$num\", 2] }, 0] }\n  }\n}\n</code></pre>"},{"location":"operators/filter/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[2, 4, 6]\n</code></pre>"},{"location":"operators/filter/#base-example-remove-empty-strings","title":"\u2705 Base Example \u2013 Remove Empty Strings","text":""},{"location":"operators/filter/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"\", \"sale\", null, \"new\", \"\"] }\n</code></pre>"},{"location":"operators/filter/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$filter\": {\n    \"input\": \"$tags\",\n    \"as\": \"tag\",\n    \"cond\": { \"$and\": [{ \"$ne\": [\"$$tag\", \"\"] }, { \"$ne\": [\"$$tag\", null] }] }\n  }\n}\n</code></pre>"},{"location":"operators/filter/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\"sale\", \"new\"]\n</code></pre>"},{"location":"operators/filter/#ecommerce-example-filter-high-value-items","title":"\ud83e\uddf1 Ecommerce Example \u2013 Filter High-Value Items","text":""},{"location":"operators/filter/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"items\": {\n        \"$filter\": {\n          \"input\": \"$items\",\n          \"as\": \"item\",\n          \"cond\": { \"$gt\": [\"$$item.price\", 100] }\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/filter/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Book\", \"price\": 40 },\n    { \"name\": \"Tablet\", \"price\": 300 },\n    { \"name\": \"Monitor\", \"price\": 150 }\n  ]\n}\n</code></pre>"},{"location":"operators/filter/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Tablet\", \"price\": 300 },\n    { \"name\": \"Monitor\", \"price\": 150 }\n  ]\n}\n</code></pre>"},{"location":"operators/filter/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Select items matching a filter</li> <li>Clean arrays of null/empty/invalid entries</li> <li>Apply logic to sub-documents or features</li> </ul>"},{"location":"operators/filter/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$map</code>, <code>$reduce</code>, <code>$anyElementTrue</code>, <code>$allElementsTrue</code></li> </ul>"},{"location":"operators/filter/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Use <code>$$</code> to access loop variables.</li> <li>Useful for filtering ecommerce features, specs, or product tags.</li> </ul>"},{"location":"operators/first/","title":"$first","text":"<p>The <code>$first</code> operator returns the first element in an array or the first document in a group.</p>"},{"location":"operators/first/#syntax-aggregation-accumulator","title":"\ud83d\udccc Syntax (Aggregation Accumulator)","text":"<pre><code>{ \"$first\": &lt;expression&gt; }\n</code></pre> <ul> <li>Used inside <code>$group</code>, <code>$setWindowFields</code>, or in array expressions like <code>$map</code>, <code>$reduce</code>.</li> </ul>"},{"location":"operators/first/#base-example-array-first-element","title":"\u2705 Base Example \u2013 Array First Element","text":""},{"location":"operators/first/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"values\": [10, 20, 30] }\n</code></pre>"},{"location":"operators/first/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$first\": \"$values\" }\n</code></pre>"},{"location":"operators/first/#output","title":"\ud83d\udce4 Output","text":"<pre><code>10\n</code></pre>"},{"location":"operators/first/#ecommerce-example-get-first-ordered-item","title":"\ud83e\uddf1 Ecommerce Example \u2013 Get First Ordered Item","text":""},{"location":"operators/first/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  { \"$sort\": { \"items.addedAt\": 1 } },\n  {\n    \"$group\": {\n      \"_id\": \"$orderId\",\n      \"firstItem\": { \"$first\": \"$items.name\" }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/first/#input-documents","title":"\ud83d\udce5 Input Documents","text":"<pre><code>[\n  {\n    \"orderId\": 101,\n    \"items\": [\n      { \"name\": \"Laptop\", \"addedAt\": \"2024-01-01\" },\n      { \"name\": \"Mouse\", \"addedAt\": \"2024-01-02\" }\n    ]\n  }\n]\n</code></pre>"},{"location":"operators/first/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"_id\": 101,\n    \"firstItem\": \"Laptop\"\n  }\n]\n</code></pre>"},{"location":"operators/first/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Get the first record in a group</li> <li>Pick the first element of an array</li> <li>Use in <code>$group</code>, <code>$project</code>, <code>$reduce</code></li> </ul>"},{"location":"operators/first/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$last</code>, <code>$min</code>, <code>$max</code>, <code>$arrayElemAt</code>, <code>$reduce</code></li> </ul>"},{"location":"operators/first/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>In <code>$group</code>, <code>$first</code> takes the value from the first document in the group \u2014 order matters!</li> <li>In arrays, it behaves like <code>arr[0]</code>.</li> </ul>"},{"location":"operators/floor/","title":"$floor","text":"<p>Rounds a numeric expression down to the nearest integer.</p>"},{"location":"operators/floor/#syntax","title":"Syntax","text":"<pre><code>{ \"$floor\": &lt;numberExpression&gt; }\n</code></pre>"},{"location":"operators/floor/#example","title":"Example","text":""},{"location":"operators/floor/#input","title":"Input","text":"<pre><code>{ \"measurement\": 7.98 }\n</code></pre>"},{"location":"operators/floor/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"roundedDown\": { \"$floor\": \"$measurement\" } } }\n</code></pre>"},{"location":"operators/floor/#output","title":"Output","text":"<pre><code>{ \"roundedDown\": 7 }\n</code></pre>"},{"location":"operators/function/","title":"$function","text":"<p>The <code>$function</code> operator lets you define and execute custom logic using JavaScript-like syntax within a pipeline.</p>"},{"location":"operators/function/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$function\": {\n    \"body\": &lt;functionCodeString&gt;,\n    \"args\": [ &lt;arg1&gt;, &lt;arg2&gt;, ... ],\n    \"lang\": \"js\"\n  }\n}\n</code></pre> <ul> <li><code>body</code>: JavaScript function code as a string</li> <li><code>args</code>: Array of arguments passed to the function</li> <li><code>lang</code>: Must be <code>\"js\"</code> (Fluxion-safe context)</li> </ul>"},{"location":"operators/function/#base-example-sum-two-fields","title":"\u2705 Base Example \u2013 Sum Two Fields","text":""},{"location":"operators/function/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"a\": 2, \"b\": 3 }\n</code></pre>"},{"location":"operators/function/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$function\": {\n    \"body\": \"function(a, b) { return a + b; }\",\n    \"args\": [\"$a\", \"$b\"],\n    \"lang\": \"js\"\n  }\n}\n</code></pre>"},{"location":"operators/function/#output","title":"\ud83d\udce4 Output","text":"<pre><code>5\n</code></pre>"},{"location":"operators/function/#ecommerce-example-calculate-dynamic-discount","title":"\ud83e\uddf1 Ecommerce Example \u2013 Calculate Dynamic Discount","text":""},{"location":"operators/function/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"discountedPrice\": {\n        \"$function\": {\n          \"body\": \"function(p, d) {\n            return Math.round(p - (p * d));\n          }\",\n          \"args\": [\"$price\", \"$discount\"],\n          \"lang\": \"js\"\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/function/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Speaker\",\n  \"price\": 200,\n  \"discount\": 0.15\n}\n</code></pre>"},{"location":"operators/function/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Speaker\",\n  \"discountedPrice\": 170\n}\n</code></pre>"},{"location":"operators/function/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Advanced conditional logic</li> <li>Complex business formulas</li> <li>Processing values beyond built-in operators</li> </ul>"},{"location":"operators/function/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$cond</code>, <code>$switch</code>, <code>$reduce</code>, <code>$map</code></li> </ul>"},{"location":"operators/function/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Fluxion executes <code>$function</code> securely and deterministically.</li> <li>Avoid side effects; treat as pure functions.</li> </ul>"},{"location":"operators/getField/","title":"$getField","text":"<p>The <code>$getField</code> operator retrieves the value of a specified field from a document, supporting both static and dynamic keys.</p>"},{"location":"operators/getField/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$getField\": {\n    \"field\": &lt;fieldName&gt;,\n    \"input\": &lt;document&gt;\n  }\n}\n</code></pre> <ul> <li><code>field</code>: Name of the field to access (string or expression)</li> <li><code>input</code>: The document to read from (optional \u2014 defaults to current document)</li> </ul>"},{"location":"operators/getField/#base-example-static-field-name","title":"\u2705 Base Example \u2013 Static Field Name","text":""},{"location":"operators/getField/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"a\": 10, \"b\": 20 }\n</code></pre>"},{"location":"operators/getField/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$getField\": {\n    \"field\": \"a\"\n  }\n}\n</code></pre>"},{"location":"operators/getField/#output","title":"\ud83d\udce4 Output","text":"<pre><code>10\n</code></pre>"},{"location":"operators/getField/#dynamic-field-from-variable","title":"\u2705 Dynamic Field from Variable","text":""},{"location":"operators/getField/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"stats\": { \"score\": 88 }, \"target\": \"score\" }\n</code></pre>"},{"location":"operators/getField/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$getField\": {\n    \"field\": \"$target\",\n    \"input\": \"$stats\"\n  }\n}\n</code></pre>"},{"location":"operators/getField/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>88\n</code></pre>"},{"location":"operators/getField/#ecommerce-example-access-variant-detail-by-dynamic-key","title":"\ud83e\uddf1 Ecommerce Example \u2013 Access Variant Detail by Dynamic Key","text":""},{"location":"operators/getField/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"variantColor\": {\n        \"$getField\": {\n          \"field\": \"$selectedColor\",\n          \"input\": \"$variants\"\n        }\n      },\n      \"product\": \"$name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/getField/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Backpack\",\n  \"selectedColor\": \"blue\",\n  \"variants\": {\n    \"red\": { \"stock\": 5 },\n    \"blue\": { \"stock\": 12 }\n  }\n}\n</code></pre>"},{"location":"operators/getField/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Backpack\",\n  \"variantColor\": { \"stock\": 12 }\n}\n</code></pre>"},{"location":"operators/getField/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Dynamically access fields</li> <li>Fetch variable-key metadata</li> <li>Pair with <code>$map</code> or <code>$objectToArray</code> for dynamic access</li> </ul>"},{"location":"operators/getField/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$setField</code>, <code>$objectToArray</code>, <code>$getField</code>, <code>$mergeObjects</code>, <code>$literal</code></li> </ul>"},{"location":"operators/getField/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Avoids <code>$[dot]</code> notation for dynamic fields</li> <li>Returns <code>null</code> if the field does not exist</li> </ul>"},{"location":"operators/gt/","title":"$gt","text":"<p>Returns <code>true</code> when the first expression evaluates greater than the second.</p>"},{"location":"operators/gt/#syntax","title":"Syntax","text":"<pre><code>{ \"$gt\": [ &lt;expression1&gt;, &lt;expression2&gt; ] }\n</code></pre>"},{"location":"operators/gt/#example","title":"Example","text":""},{"location":"operators/gt/#input","title":"Input","text":"<pre><code>{ \"temperature\": 31 }\n</code></pre>"},{"location":"operators/gt/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"isHot\": { \"$gt\": [\"$temperature\", 30] } } }\n</code></pre>"},{"location":"operators/gt/#output","title":"Output","text":"<pre><code>{ \"isHot\": true }\n</code></pre>"},{"location":"operators/gte/","title":"$gte","text":"<p>Returns <code>true</code> when the first expression evaluates greater than or equal to the second.</p>"},{"location":"operators/gte/#syntax","title":"Syntax","text":"<pre><code>{ \"$gte\": [ &lt;expression1&gt;, &lt;expression2&gt; ] }\n</code></pre>"},{"location":"operators/gte/#example","title":"Example","text":""},{"location":"operators/gte/#input","title":"Input","text":"<pre><code>{ \"score\": 70 }\n</code></pre>"},{"location":"operators/gte/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"passed\": { \"$gte\": [\"$score\", 70] } } }\n</code></pre>"},{"location":"operators/gte/#output","title":"Output","text":"<pre><code>{ \"passed\": true }\n</code></pre>"},{"location":"operators/ifNull/","title":"$ifNull","text":"<p>The <code>$ifNull</code> operator returns the first non-null expression from the provided list of two expressions.</p>"},{"location":"operators/ifNull/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$ifNull\": [ &lt;expression1&gt;, &lt;fallback&gt; ] }\n</code></pre>"},{"location":"operators/ifNull/#base-example-1-provide-default-value","title":"\u2705 Base Example 1 \u2013 Provide Default Value","text":""},{"location":"operators/ifNull/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"nickname\": null }\n</code></pre>"},{"location":"operators/ifNull/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$ifNull\": [\"$nickname\", \"Guest\"] }\n</code></pre>"},{"location":"operators/ifNull/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"Guest\"\n</code></pre>"},{"location":"operators/ifNull/#base-example-2-use-alternative-field","title":"\u2705 Base Example 2 \u2013 Use Alternative Field","text":""},{"location":"operators/ifNull/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"username\": \"alice\" }\n</code></pre>"},{"location":"operators/ifNull/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$ifNull\": [\"$nickname\", \"$username\"] }\n</code></pre>"},{"location":"operators/ifNull/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"alice\"\n</code></pre>"},{"location":"operators/ifNull/#ecommerce-example-show-discount-label","title":"\ud83e\uddf1 Ecommerce Example \u2013 Show Discount Label","text":""},{"location":"operators/ifNull/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"discountLabel\": {\n        \"$ifNull\": [\"$items.discountLabel\", \"Standard\"]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/ifNull/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Shoes\", \"discountLabel\": \"Spring Sale\" },\n    { \"name\": \"Socks\" }\n  ]\n}\n</code></pre>"},{"location":"operators/ifNull/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"product\": \"Shoes\", \"discountLabel\": \"Spring Sale\" },\n  { \"product\": \"Socks\", \"discountLabel\": \"Standard\" }\n]\n</code></pre>"},{"location":"operators/ifNull/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Provide fallback/default values</li> <li>Avoid nulls in views or exports</li> <li>Chain with <code>$cond</code> or <code>$switch</code></li> </ul>"},{"location":"operators/ifNull/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$cond</code>, <code>$switch</code>, <code>$coalesce</code>, <code>$or</code></li> </ul>"},{"location":"operators/ifNull/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Returns <code>expression1</code> if it's not null or missing</li> <li>Otherwise returns <code>fallback</code></li> </ul>"},{"location":"operators/in/","title":"$in","text":"<p>Checks whether a value exists in an array.</p>"},{"location":"operators/in/#syntax","title":"Syntax","text":"<pre><code>{ \"$in\": [ &lt;expression&gt;, &lt;arrayExpression&gt; ] }\n</code></pre>"},{"location":"operators/in/#example","title":"Example","text":""},{"location":"operators/in/#input","title":"Input","text":"<pre><code>{ \"tags\": [\"beta\", \"feature-flag\", \"ios\"] }\n</code></pre>"},{"location":"operators/in/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"isIos\": { \"$in\": [\"ios\", \"$tags\"] } } }\n</code></pre>"},{"location":"operators/in/#output","title":"Output","text":"<pre><code>{ \"isIos\": true }\n</code></pre>"},{"location":"operators/indexOfArray/","title":"$indexOfArray","text":"<p>The <code>$indexOfArray</code> operator returns the index of the first occurrence of a value in an array.</p>"},{"location":"operators/indexOfArray/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$indexOfArray\": [ &lt;arrayExpression&gt;, &lt;searchValue&gt;, &lt;start&gt;, &lt;end&gt; ] }\n</code></pre> <ul> <li><code>arrayExpression</code>: The array to search</li> <li><code>searchValue</code>: The value to search for</li> <li><code>start</code>: (optional) Index to start searching from</li> <li><code>end</code>: (optional) Index to end searching (exclusive)</li> </ul>"},{"location":"operators/indexOfArray/#base-example-find-index-of-value","title":"\u2705 Base Example \u2013 Find Index of Value","text":""},{"location":"operators/indexOfArray/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"sale\", \"new\", \"hot\"] }\n</code></pre>"},{"location":"operators/indexOfArray/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$indexOfArray\": [\"$tags\", \"new\"] }\n</code></pre>"},{"location":"operators/indexOfArray/#output","title":"\ud83d\udce4 Output","text":"<pre><code>1\n</code></pre>"},{"location":"operators/indexOfArray/#base-example-value-not-found","title":"\u2705 Base Example \u2013 Value Not Found","text":""},{"location":"operators/indexOfArray/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"sale\", \"hot\"] }\n</code></pre>"},{"location":"operators/indexOfArray/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$indexOfArray\": [\"$tags\", \"exclusive\"] }\n</code></pre>"},{"location":"operators/indexOfArray/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>-1\n</code></pre>"},{"location":"operators/indexOfArray/#ecommerce-example-position-of-top-selling-product","title":"\ud83e\uddf1 Ecommerce Example \u2013 Position of Top-Selling Product","text":""},{"location":"operators/indexOfArray/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"productRank\": {\n        \"$indexOfArray\": [\"$topProducts\", \"SKU-1002\"]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/indexOfArray/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"topProducts\": [\"SKU-1001\", \"SKU-1002\", \"SKU-1003\"]\n}\n</code></pre>"},{"location":"operators/indexOfArray/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"productRank\": 1 }\n</code></pre>"},{"location":"operators/indexOfArray/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Determine item positions</li> <li>Ranking systems</li> <li>Validation of list order</li> </ul>"},{"location":"operators/indexOfArray/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$arrayElemAt</code>, <code>$slice</code>, <code>$filter</code>, <code>$indexOfBytes</code>, <code>$indexOfCP</code></li> </ul>"},{"location":"operators/indexOfArray/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Returns <code>-1</code> if not found.</li> <li>Use with <code>$cond</code> to handle missing values gracefully.</li> </ul>"},{"location":"operators/indexOfBytes/","title":"$indexOfBytes","text":"<p>The <code>$indexOfBytes</code> operator returns the byte index of the first occurrence of a substring in a string.</p>"},{"location":"operators/indexOfBytes/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$indexOfBytes\": [ &lt;string&gt;, &lt;search&gt;, &lt;start&gt;, &lt;end&gt; ] }\n</code></pre> <ul> <li><code>string</code>: The string to search</li> <li><code>search</code>: Substring to find</li> <li><code>start</code> (optional): Start index (inclusive)</li> <li><code>end</code> (optional): End index (exclusive)</li> </ul>"},{"location":"operators/indexOfBytes/#base-example-1-basic-search","title":"\u2705 Base Example 1 \u2013 Basic Search","text":""},{"location":"operators/indexOfBytes/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"message\": \"hello world\" }\n</code></pre>"},{"location":"operators/indexOfBytes/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$indexOfBytes\": [\"$message\", \"world\"] }\n</code></pre>"},{"location":"operators/indexOfBytes/#output","title":"\ud83d\udce4 Output","text":"<pre><code>6\n</code></pre>"},{"location":"operators/indexOfBytes/#base-example-2-not-found","title":"\u2705 Base Example 2 \u2013 Not Found","text":""},{"location":"operators/indexOfBytes/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"message\": \"hello world\" }\n</code></pre>"},{"location":"operators/indexOfBytes/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$indexOfBytes\": [\"$message\", \"planet\"] }\n</code></pre>"},{"location":"operators/indexOfBytes/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>-1\n</code></pre>"},{"location":"operators/indexOfBytes/#ecommerce-example-check-for-brand-code-in-sku","title":"\ud83e\uddf1 Ecommerce Example \u2013 Check for Brand Code in SKU","text":""},{"location":"operators/indexOfBytes/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"brandIndex\": {\n        \"$indexOfBytes\": [\"$items.sku\", \"BRND\"]\n      },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/indexOfBytes/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"sku\": \"ELEC-BRND-X123\", \"name\": \"TV\" },\n    { \"sku\": \"FASH-Y789\", \"name\": \"Watch\" }\n  ]\n}\n</code></pre>"},{"location":"operators/indexOfBytes/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"brandIndex\": 5, \"product\": \"TV\" },\n  { \"brandIndex\": -1, \"product\": \"Watch\" }\n]\n</code></pre>"},{"location":"operators/indexOfBytes/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Find substring location</li> <li>Validate presence or order of fields</li> <li>Index-based manipulation</li> </ul>"},{"location":"operators/indexOfBytes/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$indexOfCP</code>, <code>$split</code>, <code>$substrBytes</code>, <code>$arrayElemAt</code></li> </ul>"},{"location":"operators/indexOfBytes/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Operates on byte positions (not Unicode-safe).</li> <li>Use <code>$indexOfCP</code> for multi-byte character safety.</li> </ul>"},{"location":"operators/indexOfCP/","title":"$indexOfCP","text":"<p>The <code>$indexOfCP</code> operator returns the character (code point) index of the first occurrence of a substring in a string.</p>"},{"location":"operators/indexOfCP/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$indexOfCP\": [ &lt;string&gt;, &lt;search&gt;, &lt;start&gt;, &lt;end&gt; ] }\n</code></pre> <ul> <li><code>string</code>: The string to search</li> <li><code>search</code>: The substring to find</li> <li><code>start</code> (optional): Index to start searching (default 0)</li> <li><code>end</code> (optional): Index to stop searching (exclusive)</li> </ul>"},{"location":"operators/indexOfCP/#base-example-1-unicode-safe-search","title":"\u2705 Base Example 1 \u2013 Unicode-Safe Search","text":""},{"location":"operators/indexOfCP/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"text\": \"\u0928\u092e\u0938\u094d\u0924\u0947 \u0926\u0941\u0928\u093f\u092f\u093e\" }\n</code></pre>"},{"location":"operators/indexOfCP/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$indexOfCP\": [\"$text\", \"\u0926\u0941\u0928\u093f\u092f\u093e\"] }\n</code></pre>"},{"location":"operators/indexOfCP/#output","title":"\ud83d\udce4 Output","text":"<pre><code>7\n</code></pre>"},{"location":"operators/indexOfCP/#base-example-2-ascii-search","title":"\u2705 Base Example 2 \u2013 ASCII Search","text":""},{"location":"operators/indexOfCP/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"message\": \"Welcome to Canada\" }\n</code></pre>"},{"location":"operators/indexOfCP/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$indexOfCP\": [\"$message\", \"Canada\"] }\n</code></pre>"},{"location":"operators/indexOfCP/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>11\n</code></pre>"},{"location":"operators/indexOfCP/#ecommerce-example-check-for-prefix-in-sku-labels","title":"\ud83e\uddf1 Ecommerce Example \u2013 Check for Prefix in SKU Labels","text":""},{"location":"operators/indexOfCP/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"prefixIndex\": {\n        \"$indexOfCP\": [\"$items.sku\", \"PRE\"]\n      },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/indexOfCP/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"sku\": \"PRE-X-001\", \"name\": \"Cable\" },\n    { \"sku\": \"X-PRE-002\", \"name\": \"Plug\" },\n    { \"sku\": \"XYZ-003\", \"name\": \"Battery\" }\n  ]\n}\n</code></pre>"},{"location":"operators/indexOfCP/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"prefixIndex\": 0, \"product\": \"Cable\" },\n  { \"prefixIndex\": 2, \"product\": \"Plug\" },\n  { \"prefixIndex\": -1, \"product\": \"Battery\" }\n]\n</code></pre>"},{"location":"operators/indexOfCP/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Locate substrings safely in multilingual data</li> <li>Index slicing or truncation</li> <li>Filtering records with presence check</li> </ul>"},{"location":"operators/indexOfCP/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$indexOfBytes</code>, <code>$substrCP</code>, <code>$split</code>, <code>$strLenCP</code></li> </ul>"},{"location":"operators/indexOfCP/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Use <code>$indexOfCP</code> when string may include multibyte characters (e.g. emojis, Hindi, Chinese).</li> <li>Returns <code>-1</code> if not found.</li> </ul>"},{"location":"operators/isArray/","title":"$isArray","text":"<p>The <code>$isArray</code> operator checks whether a given expression resolves to an array.</p>"},{"location":"operators/isArray/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$isArray\": &lt;expression&gt; }\n</code></pre> <p>Returns <code>true</code> if the result is an array, otherwise <code>false</code>.</p>"},{"location":"operators/isArray/#base-example-1-array-check","title":"\u2705 Base Example 1 \u2013 Array Check","text":""},{"location":"operators/isArray/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"sale\", \"new\"] }\n</code></pre>"},{"location":"operators/isArray/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$isArray\": \"$tags\" }\n</code></pre>"},{"location":"operators/isArray/#output","title":"\ud83d\udce4 Output","text":"<pre><code>true\n</code></pre>"},{"location":"operators/isArray/#base-example-2-not-an-array","title":"\u2705 Base Example 2 \u2013 Not an Array","text":""},{"location":"operators/isArray/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"price\": 19.99 }\n</code></pre>"},{"location":"operators/isArray/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$isArray\": \"$price\" }\n</code></pre>"},{"location":"operators/isArray/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>false\n</code></pre>"},{"location":"operators/isArray/#ecommerce-example-validate-variant-field","title":"\ud83e\uddf1 Ecommerce Example \u2013 Validate Variant Field","text":""},{"location":"operators/isArray/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"hasVariants\": { \"$isArray\": \"$items.variants\" }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/isArray/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Shirt\", \"variants\": [\"S\", \"M\", \"L\"] },\n    { \"name\": \"Gift Card\", \"variants\": null }\n  ]\n}\n</code></pre>"},{"location":"operators/isArray/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"product\": \"Shirt\", \"hasVariants\": true },\n  { \"product\": \"Gift Card\", \"hasVariants\": false }\n]\n</code></pre>"},{"location":"operators/isArray/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Input validation</li> <li>Conditional logic on array-dependent fields</li> <li>Filter dynamic JSON structures</li> </ul>"},{"location":"operators/isArray/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$size</code>, <code>$filter</code>, <code>$type</code>, <code>$ifNull</code>, <code>$cond</code></li> </ul>"},{"location":"operators/isArray/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Use in combination with <code>$cond</code> to branch logic.</li> <li>Helps clean malformed documents with inconsistent schemas.</li> </ul>"},{"location":"operators/last/","title":"$last","text":"<p>The <code>$last</code> operator returns the last element in an array or the last document in a group.</p>"},{"location":"operators/last/#syntax-aggregation-accumulator","title":"\ud83d\udccc Syntax (Aggregation Accumulator)","text":"<pre><code>{ \"$last\": &lt;expression&gt; }\n</code></pre> <ul> <li>Used in <code>$group</code>, <code>$reduce</code>, <code>$map</code>, or array contexts.</li> </ul>"},{"location":"operators/last/#base-example-array-last-element","title":"\u2705 Base Example \u2013 Array Last Element","text":""},{"location":"operators/last/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"values\": [5, 10, 15] }\n</code></pre>"},{"location":"operators/last/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$last\": \"$values\" }\n</code></pre>"},{"location":"operators/last/#output","title":"\ud83d\udce4 Output","text":"<pre><code>15\n</code></pre>"},{"location":"operators/last/#ecommerce-example-last-item-in-cart-by-time","title":"\ud83e\uddf1 Ecommerce Example \u2013 Last Item in Cart by Time","text":""},{"location":"operators/last/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  { \"$sort\": { \"items.addedAt\": 1 } },\n  {\n    \"$group\": {\n      \"_id\": \"$orderId\",\n      \"lastItem\": { \"$last\": \"$items.name\" }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/last/#input-documents","title":"\ud83d\udce5 Input Documents","text":"<pre><code>[\n  {\n    \"orderId\": 202,\n    \"items\": [\n      { \"name\": \"Pen\", \"addedAt\": \"2024-01-01\" },\n      { \"name\": \"Notebook\", \"addedAt\": \"2024-01-03\" }\n    ]\n  }\n]\n</code></pre>"},{"location":"operators/last/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"_id\": 202,\n    \"lastItem\": \"Notebook\"\n  }\n]\n</code></pre>"},{"location":"operators/last/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Return last item in array</li> <li>Use with sorted groups</li> <li>Useful in <code>$group</code>, <code>$reduce</code>, or windowed analysis</li> </ul>"},{"location":"operators/last/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$first</code>, <code>$min</code>, <code>$max</code>, <code>$reduce</code>, <code>$arrayElemAt</code></li> </ul>"},{"location":"operators/last/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>In <code>$group</code>, the result depends on the order of documents.</li> <li>On arrays, behaves like accessing the last index.</li> </ul>"},{"location":"operators/literal/","title":"$literal","text":"<p>The <code>$literal</code> operator returns a constant value without interpreting it as a field path or expression.</p>"},{"location":"operators/literal/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$literal\": &lt;value&gt; }\n</code></pre> <ul> <li><code>&lt;value&gt;</code> can be a string, number, object, array, or other raw constant.</li> </ul>"},{"location":"operators/literal/#base-example-return-a-constant-string","title":"\u2705 Base Example \u2013 Return a Constant String","text":""},{"location":"operators/literal/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"name\": \"Alice\" }\n</code></pre>"},{"location":"operators/literal/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$literal\": \"Hello World\" }\n</code></pre>"},{"location":"operators/literal/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"Hello World\"\n</code></pre>"},{"location":"operators/literal/#base-example-return-constant-object","title":"\u2705 Base Example \u2013 Return Constant Object","text":""},{"location":"operators/literal/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{}\n</code></pre>"},{"location":"operators/literal/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$literal\": { \"x\": 1, \"y\": 2 }\n}\n</code></pre>"},{"location":"operators/literal/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"x\": 1, \"y\": 2 }\n</code></pre>"},{"location":"operators/literal/#ecommerce-example-inject-static-tax-field","title":"\ud83e\uddf1 Ecommerce Example \u2013 Inject Static Tax Field","text":""},{"location":"operators/literal/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"taxRate\": { \"$literal\": 0.15 }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/literal/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"name\": \"Smartphone\", \"price\": 999 }\n</code></pre>"},{"location":"operators/literal/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"product\": \"Smartphone\", \"taxRate\": 0.15 }\n</code></pre>"},{"location":"operators/literal/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Force a static value in dynamic documents</li> <li>Prevent evaluation of field paths or expressions</li> <li>Embed objects or arrays literally</li> </ul>"},{"location":"operators/literal/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$const</code> (MongoDB alternative), <code>$toString</code>, <code>$type</code>, <code>$mergeObjects</code></li> </ul>"},{"location":"operators/literal/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Useful inside <code>$project</code>, <code>$group</code>, <code>$addFields</code></li> <li>Does not evaluate inner values \u2014 used exactly as written</li> </ul>"},{"location":"operators/ln/","title":"$ln","text":"<p>Computes the natural logarithm (base <code>e</code>) of a numeric expression.</p>"},{"location":"operators/ln/#syntax","title":"Syntax","text":"<pre><code>{ \"$ln\": &lt;numberExpression&gt; }\n</code></pre>"},{"location":"operators/ln/#example","title":"Example","text":""},{"location":"operators/ln/#input","title":"Input","text":"<pre><code>{ \"value\": 54.6 }\n</code></pre>"},{"location":"operators/ln/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"naturalLog\": { \"$ln\": \"$value\" } } }\n</code></pre>"},{"location":"operators/ln/#output","title":"Output","text":"<pre><code>{ \"naturalLog\": 3.999093 }\n</code></pre>"},{"location":"operators/log10/","title":"$log10","text":"<p>Computes the base-10 logarithm of a numeric expression.</p>"},{"location":"operators/log10/#syntax","title":"Syntax","text":"<pre><code>{ \"$log10\": &lt;numberExpression&gt; }\n</code></pre>"},{"location":"operators/log10/#example","title":"Example","text":""},{"location":"operators/log10/#input","title":"Input","text":"<pre><code>{ \"latencyMs\": 250 }\n</code></pre>"},{"location":"operators/log10/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"logLatency\": { \"$log10\": \"$latencyMs\" } } }\n</code></pre>"},{"location":"operators/log10/#output","title":"Output","text":"<pre><code>{ \"logLatency\": 2.3979400086720375 }\n</code></pre>"},{"location":"operators/lt/","title":"$lt","text":"<p>Returns <code>true</code> when the first expression evaluates less than the second.</p>"},{"location":"operators/lt/#syntax","title":"Syntax","text":"<pre><code>{ \"$lt\": [ &lt;expression1&gt;, &lt;expression2&gt; ] }\n</code></pre>"},{"location":"operators/lt/#example","title":"Example","text":""},{"location":"operators/lt/#input","title":"Input","text":"<pre><code>{ \"temperature\": 12 }\n</code></pre>"},{"location":"operators/lt/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"belowFreezing\": { \"$lt\": [\"$temperature\", 0] } } }\n</code></pre>"},{"location":"operators/lt/#output","title":"Output","text":"<pre><code>{ \"belowFreezing\": false }\n</code></pre>"},{"location":"operators/lte/","title":"$lte","text":"<p>Returns <code>true</code> when the first expression evaluates less than or equal to the second.</p>"},{"location":"operators/lte/#syntax","title":"Syntax","text":"<pre><code>{ \"$lte\": [ &lt;expression1&gt;, &lt;expression2&gt; ] }\n</code></pre>"},{"location":"operators/lte/#example","title":"Example","text":""},{"location":"operators/lte/#input","title":"Input","text":"<pre><code>{ \"inventory\": 5 }\n</code></pre>"},{"location":"operators/lte/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"lowStock\": { \"$lte\": [\"$inventory\", 5] } } }\n</code></pre>"},{"location":"operators/lte/#output","title":"Output","text":"<pre><code>{ \"lowStock\": true }\n</code></pre>"},{"location":"operators/ltrim/","title":"$ltrim","text":"<p>The <code>$ltrim</code> operator removes specified characters from the beginning (left) of a string.</p>"},{"location":"operators/ltrim/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$ltrim\": {\n    \"input\": &lt;expression&gt;,\n    \"chars\": &lt;charsToTrim&gt;\n  }\n}\n</code></pre>"},{"location":"operators/ltrim/#base-example-1-trim-leading-whitespace","title":"\u2705 Base Example 1 \u2013 Trim Leading Whitespace","text":""},{"location":"operators/ltrim/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"title\": \"   Notebook\" }\n</code></pre>"},{"location":"operators/ltrim/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$ltrim\": { \"input\": \"$title\" }\n}\n</code></pre>"},{"location":"operators/ltrim/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"Notebook\"\n</code></pre>"},{"location":"operators/ltrim/#base-example-2-trim-leading-zeros-from-id","title":"\u2705 Base Example 2 \u2013 Trim Leading Zeros from ID","text":""},{"location":"operators/ltrim/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"id\": \"000123\" }\n</code></pre>"},{"location":"operators/ltrim/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$ltrim\": {\n    \"input\": \"$id\",\n    \"chars\": \"0\"\n  }\n}\n</code></pre>"},{"location":"operators/ltrim/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"123\"\n</code></pre>"},{"location":"operators/ltrim/#ecommerce-example-clean-item-codes","title":"\ud83e\uddf1 Ecommerce Example \u2013 Clean Item Codes","text":""},{"location":"operators/ltrim/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"code\": {\n        \"$ltrim\": {\n          \"input\": \"$items.code\",\n          \"chars\": \"X\"\n        }\n      },\n      \"name\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/ltrim/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"code\": \"XXA100\", \"name\": \"T-shirt\" },\n    { \"code\": \"XXB200\", \"name\": \"Bag\" }\n  ]\n}\n</code></pre>"},{"location":"operators/ltrim/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"code\": \"A100\", \"name\": \"T-shirt\" },\n  { \"code\": \"B200\", \"name\": \"Bag\" }\n]\n</code></pre>"},{"location":"operators/ltrim/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Trim leading symbols, padding characters</li> <li>Normalize document IDs or SKUs</li> <li>Clean up data during import</li> </ul>"},{"location":"operators/ltrim/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$rtrim</code>, <code>$trim</code>, <code>$toLower</code>, <code>$substr</code></li> </ul>"},{"location":"operators/ltrim/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>If <code>chars</code> is not specified, whitespace is removed.</li> <li>For both sides, use <code>$trim</code>.</li> </ul>"},{"location":"operators/map/","title":"$map","text":"<p>The <code>$map</code> operator applies a transformation expression to each element of an input array.</p>"},{"location":"operators/map/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$map\": {\n    \"input\": &lt;arrayExpression&gt;,\n    \"as\": &lt;variableName&gt;,\n    \"in\": &lt;expression&gt;\n  }\n}\n</code></pre> <ul> <li><code>input</code>: The array to iterate</li> <li><code>as</code>: The name of the variable for each element</li> <li><code>in</code>: The expression to evaluate for each element</li> </ul>"},{"location":"operators/map/#base-example-multiply-all-by-2","title":"\u2705 Base Example \u2013 Multiply All by 2","text":""},{"location":"operators/map/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"values\": [1, 2, 3, 4] }\n</code></pre>"},{"location":"operators/map/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$map\": {\n    \"input\": \"$values\",\n    \"as\": \"num\",\n    \"in\": { \"$multiply\": [\"$$num\", 2] }\n  }\n}\n</code></pre>"},{"location":"operators/map/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[2, 4, 6, 8]\n</code></pre>"},{"location":"operators/map/#base-example-uppercase-items","title":"\u2705 Base Example \u2013 Uppercase Items","text":""},{"location":"operators/map/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"sale\", \"new\", \"hot\"] }\n</code></pre>"},{"location":"operators/map/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$map\": {\n    \"input\": \"$tags\",\n    \"as\": \"tag\",\n    \"in\": { \"$toUpper\": \"$$tag\" }\n  }\n}\n</code></pre>"},{"location":"operators/map/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\"SALE\", \"NEW\", \"HOT\"]\n</code></pre>"},{"location":"operators/map/#ecommerce-example-compute-total-per-item","title":"\ud83e\uddf1 Ecommerce Example \u2013 Compute Total per Item","text":""},{"location":"operators/map/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"orderId\": 1,\n      \"items\": {\n        \"$map\": {\n          \"input\": \"$items\",\n          \"as\": \"item\",\n          \"in\": {\n            \"name\": \"$$item.name\",\n            \"total\": {\n              \"$multiply\": [\"$$item.price\", \"$$item.quantity\"]\n            }\n          }\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/map/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 123,\n  \"items\": [\n    { \"name\": \"Pen\", \"price\": 2, \"quantity\": 10 },\n    { \"name\": \"Notebook\", \"price\": 5, \"quantity\": 3 }\n  ]\n}\n</code></pre>"},{"location":"operators/map/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"orderId\": 123,\n  \"items\": [\n    { \"name\": \"Pen\", \"total\": 20 },\n    { \"name\": \"Notebook\", \"total\": 15 }\n  ]\n}\n</code></pre>"},{"location":"operators/map/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Transform items in an array</li> <li>Compute fields per subdocument</li> <li>Prepare output for <code>$project</code> or <code>$group</code></li> </ul>"},{"location":"operators/map/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$filter</code>, <code>$reduce</code>, <code>$concatArrays</code>, <code>$arrayElemAt</code></li> </ul>"},{"location":"operators/map/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Use <code>$$</code> prefix when referencing variables in <code>$map</code>.</li> <li>Input must be an array; otherwise, returns <code>null</code>.</li> </ul>"},{"location":"operators/max/","title":"$max","text":"<p>The <code>$max</code> operator returns the highest value from a list of expressions or grouped values.</p>"},{"location":"operators/max/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$max\": &lt;expression&gt; }\n</code></pre> <p>Used in: - <code>$group</code> (accumulator) - Array contexts - Numeric comparisons</p>"},{"location":"operators/max/#base-example-maximum-in-array","title":"\u2705 Base Example \u2013 Maximum in Array","text":""},{"location":"operators/max/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"scores\": [85, 92, 78] }\n</code></pre>"},{"location":"operators/max/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$max\": \"$scores\" }\n</code></pre>"},{"location":"operators/max/#output","title":"\ud83d\udce4 Output","text":"<pre><code>92\n</code></pre>"},{"location":"operators/max/#ecommerce-example-maximum-product-price-per-brand","title":"\ud83e\uddf1 Ecommerce Example \u2013 Maximum Product Price Per Brand","text":""},{"location":"operators/max/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$group\": {\n      \"_id\": \"$items.brand\",\n      \"maxPrice\": { \"$max\": \"$items.price\" }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/max/#input-documents","title":"\ud83d\udce5 Input Documents","text":"<pre><code>[\n  {\n    \"items\": [\n      { \"brand\": \"A\", \"price\": 100 },\n      { \"brand\": \"A\", \"price\": 130 },\n      { \"brand\": \"B\", \"price\": 90 }\n    ]\n  }\n]\n</code></pre>"},{"location":"operators/max/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"_id\": \"A\", \"maxPrice\": 130 },\n  { \"_id\": \"B\", \"maxPrice\": 90 }\n]\n</code></pre>"},{"location":"operators/max/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Determine highest price, score, value</li> <li>Identify latest timestamps</li> <li>Combine with <code>$group</code> for summary statistics</li> </ul>"},{"location":"operators/max/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$min</code>, <code>$avg</code>, <code>$sum</code>, <code>$reduce</code>, <code>$first</code>, <code>$last</code></li> </ul>"},{"location":"operators/max/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Can be used directly in array or accumulator contexts</li> <li>Behavior on <code>null</code> values depends on placement/order</li> </ul>"},{"location":"operators/mergeObjects/","title":"$mergeObjects","text":"<p>The <code>$mergeObjects</code> operator merges multiple documents (objects) into a single document. Later fields overwrite earlier ones.</p>"},{"location":"operators/mergeObjects/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$mergeObjects\": [ &lt;doc1&gt;, &lt;doc2&gt;, ... ] }\n</code></pre> <ul> <li>Accepts an array of documents or document expressions</li> <li>Fields in later documents override those in earlier ones</li> </ul>"},{"location":"operators/mergeObjects/#base-example-merge-static-objects","title":"\u2705 Base Example \u2013 Merge Static Objects","text":""},{"location":"operators/mergeObjects/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"a\": { \"x\": 1 }, \"b\": { \"y\": 2, \"x\": 3 } }\n</code></pre>"},{"location":"operators/mergeObjects/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$mergeObjects\": [\"$a\", \"$b\"] }\n</code></pre>"},{"location":"operators/mergeObjects/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"x\": 3, \"y\": 2 }\n</code></pre>"},{"location":"operators/mergeObjects/#ecommerce-example-combine-product-attributes","title":"\ud83e\uddf1 Ecommerce Example \u2013 Combine Product Attributes","text":""},{"location":"operators/mergeObjects/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"fullSpec\": {\n        \"$mergeObjects\": [\"$specs.general\", \"$specs.technical\"]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/mergeObjects/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Tablet\",\n  \"specs\": {\n    \"general\": { \"brand\": \"XTab\", \"color\": \"Black\" },\n    \"technical\": { \"ram\": \"8GB\", \"color\": \"Gray\" }\n  }\n}\n</code></pre>"},{"location":"operators/mergeObjects/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Tablet\",\n  \"fullSpec\": {\n    \"brand\": \"XTab\",\n    \"color\": \"Gray\",\n    \"ram\": \"8GB\"\n  }\n}\n</code></pre>"},{"location":"operators/mergeObjects/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Merge attribute sets</li> <li>Combine multiple partial documents</li> <li>Override fields selectively</li> </ul>"},{"location":"operators/mergeObjects/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$arrayToObject</code>, <code>$objectToArray</code>, <code>$getField</code>, <code>$setField</code></li> </ul>"},{"location":"operators/mergeObjects/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>If merging non-documents (e.g., <code>null</code>, arrays), behavior may vary</li> <li>Null values are ignored unless merged explicitly</li> </ul>"},{"location":"operators/min/","title":"$min","text":"<p>The <code>$min</code> operator returns the smallest value from a list of expressions or grouped values.</p>"},{"location":"operators/min/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$min\": &lt;expression&gt; }\n</code></pre> <p>Used in: - <code>$group</code> (accumulator) - Array contexts (e.g., <code>$map</code>, <code>$reduce</code>) - Arithmetic expressions</p>"},{"location":"operators/min/#base-example-minimum-in-array","title":"\u2705 Base Example \u2013 Minimum in Array","text":""},{"location":"operators/min/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"numbers\": [15, 5, 8] }\n</code></pre>"},{"location":"operators/min/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$min\": \"$numbers\" }\n</code></pre>"},{"location":"operators/min/#output","title":"\ud83d\udce4 Output","text":"<pre><code>5\n</code></pre>"},{"location":"operators/min/#ecommerce-example-minimum-discounted-price-per-brand","title":"\ud83e\uddf1 Ecommerce Example \u2013 Minimum Discounted Price Per Brand","text":""},{"location":"operators/min/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$group\": {\n      \"_id\": \"$items.brand\",\n      \"minPrice\": { \"$min\": \"$items.price\" }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/min/#input-documents","title":"\ud83d\udce5 Input Documents","text":"<pre><code>[\n  {\n    \"items\": [\n      { \"brand\": \"A\", \"price\": 50 },\n      { \"brand\": \"A\", \"price\": 30 },\n      { \"brand\": \"B\", \"price\": 40 }\n    ]\n  }\n]\n</code></pre>"},{"location":"operators/min/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"_id\": \"A\", \"minPrice\": 30 },\n  { \"_id\": \"B\", \"minPrice\": 40 }\n]\n</code></pre>"},{"location":"operators/min/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Calculate lowest value in a group</li> <li>Use in price comparisons</li> <li>Extract min date/time in event logs</li> </ul>"},{"location":"operators/min/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$max</code>, <code>$avg</code>, <code>$first</code>, <code>$last</code>, <code>$reduce</code></li> </ul>"},{"location":"operators/min/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>In <code>$group</code>, must be used with grouped documents</li> <li>Use with caution on mixed-type arrays</li> </ul>"},{"location":"operators/mod/","title":"$mod","text":"<p>The <code>$mod</code> operator returns the remainder of the division of one number by another.</p>"},{"location":"operators/mod/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$mod\": [ &lt;dividend&gt;, &lt;divisor&gt; ] }\n</code></pre> <p>Both values must resolve to numbers. Division by zero returns an error.</p>"},{"location":"operators/mod/#base-example-1-modulo-with-evenodd-check","title":"\u2705 Base Example 1 \u2013 Modulo with Even/Odd Check","text":""},{"location":"operators/mod/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"orderId\": 101 }\n</code></pre>"},{"location":"operators/mod/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$mod\": [\"$orderId\", 2] }\n</code></pre>"},{"location":"operators/mod/#output","title":"\ud83d\udce4 Output","text":"<pre><code>1\n</code></pre> <p>Output <code>0</code> means even, <code>1</code> means odd.</p>"},{"location":"operators/mod/#base-example-2-minutes-past-the-hour","title":"\u2705 Base Example 2 \u2013 Minutes Past the Hour","text":""},{"location":"operators/mod/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"elapsedSeconds\": 3670 }\n</code></pre>"},{"location":"operators/mod/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$mod\": [\"$elapsedSeconds\", 3600] }\n</code></pre>"},{"location":"operators/mod/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>70\n</code></pre>"},{"location":"operators/mod/#ecommerce-example-discount-every-3rd-item","title":"\ud83e\uddf1 Ecommerce Example \u2013 Discount Every 3rd Item","text":""},{"location":"operators/mod/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"name\": \"$items.name\",\n      \"isEligibleForDiscount\": {\n        \"$eq\": [{ \"$mod\": [\"$items.index\", 3] }, 0]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/mod/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Item A\", \"index\": 0 },\n    { \"name\": \"Item B\", \"index\": 1 },\n    { \"name\": \"Item C\", \"index\": 2 },\n    { \"name\": \"Item D\", \"index\": 3 }\n  ]\n}\n</code></pre>"},{"location":"operators/mod/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"name\": \"Item A\", \"isEligibleForDiscount\": true },\n  { \"name\": \"Item B\", \"isEligibleForDiscount\": false },\n  { \"name\": \"Item C\", \"isEligibleForDiscount\": false },\n  { \"name\": \"Item D\", \"isEligibleForDiscount\": true }\n]\n</code></pre>"},{"location":"operators/mod/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Even/odd classification</li> <li>Recurring logic (every N items)</li> <li>Time breakdowns (minutes/seconds)</li> </ul>"},{"location":"operators/mod/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$divide</code>, <code>$add</code>, <code>$subtract</code>, <code>$cond</code></li> <li><code>$eq</code>, <code>$project</code>, <code>$switch</code></li> </ul>"},{"location":"operators/mod/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Dividing by zero will return an error.</li> <li>Common in coupon, rule, and scheduling systems.</li> </ul>"},{"location":"operators/multiply/","title":"$multiply","text":"<p>The <code>$multiply</code> operator multiplies numbers together.</p>"},{"location":"operators/multiply/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$multiply\": [ &lt;expression1&gt;, &lt;expression2&gt;, ... ] }\n</code></pre> <p>Each expression must resolve to a numeric value.</p>"},{"location":"operators/multiply/#base-example-multiply-price-by-quantity","title":"\u2705 Base Example \u2013 Multiply Price by Quantity","text":""},{"location":"operators/multiply/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"price\": 20, \"qty\": 3 }\n</code></pre>"},{"location":"operators/multiply/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$multiply\": [\"$price\", \"$qty\"] }\n</code></pre>"},{"location":"operators/multiply/#output","title":"\ud83d\udce4 Output","text":"<pre><code>60\n</code></pre>"},{"location":"operators/multiply/#deep-nested-example-compute-line-totals-in-order","title":"\ud83e\uddf1 Deep Nested Example \u2013 Compute Line Totals in Order","text":""},{"location":"operators/multiply/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"lineTotal\": {\n        \"$multiply\": [\"$items.price\", \"$items.quantity\"]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/multiply/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 1001,\n  \"items\": [\n    { \"name\": \"Pen\", \"price\": 2, \"quantity\": 5 },\n    { \"name\": \"Notebook\", \"price\": 3, \"quantity\": 2 }\n  ]\n}\n</code></pre>"},{"location":"operators/multiply/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  { \"product\": \"Pen\", \"lineTotal\": 10 },\n  { \"product\": \"Notebook\", \"lineTotal\": 6 }\n]\n</code></pre>"},{"location":"operators/multiply/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Calculating total cost (<code>price * qty</code>)</li> <li>Tax/value scaling</li> <li>Aggregated computations in <code>$group</code></li> </ul>"},{"location":"operators/multiply/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$add</code>, <code>$subtract</code>, <code>$divide</code>, <code>$mod</code></li> <li><code>$group</code>, <code>$project</code>, <code>$set</code></li> </ul>"},{"location":"operators/ne/","title":"$ne","text":"<p>Returns <code>true</code> when the two expressions evaluate to different values.</p>"},{"location":"operators/ne/#syntax","title":"Syntax","text":"<pre><code>{ \"$ne\": [ &lt;expression1&gt;, &lt;expression2&gt; ] }\n</code></pre>"},{"location":"operators/ne/#example","title":"Example","text":""},{"location":"operators/ne/#input","title":"Input","text":"<pre><code>{ \"status\": \"pending\" }\n</code></pre>"},{"location":"operators/ne/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"isFinal\": { \"$ne\": [\"$status\", \"complete\"] } } }\n</code></pre>"},{"location":"operators/ne/#output","title":"Output","text":"<pre><code>{ \"isFinal\": true }\n</code></pre>"},{"location":"operators/nin/","title":"$nin","text":"<p>Checks whether a value does not exist in an array.</p>"},{"location":"operators/nin/#syntax","title":"Syntax","text":"<pre><code>{ \"$nin\": [ &lt;expression&gt;, &lt;arrayExpression&gt; ] }\n</code></pre>"},{"location":"operators/nin/#example","title":"Example","text":""},{"location":"operators/nin/#input","title":"Input","text":"<pre><code>{ \"roles\": [\"viewer\", \"auditor\"] }\n</code></pre>"},{"location":"operators/nin/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"isAdmin\": { \"$nin\": [\"admin\", \"$roles\"] } } }\n</code></pre>"},{"location":"operators/nin/#output","title":"Output","text":"<pre><code>{ \"isAdmin\": true }\n</code></pre>"},{"location":"operators/not/","title":"$not","text":"<p>Returns the logical negation of the supplied expression.</p>"},{"location":"operators/not/#syntax","title":"Syntax","text":"<pre><code>{ \"$not\": [ &lt;expression&gt; ] }\n</code></pre>"},{"location":"operators/not/#example","title":"Example","text":""},{"location":"operators/not/#input","title":"Input","text":"<pre><code>{ \"isDeleted\": false }\n</code></pre>"},{"location":"operators/not/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"isActive\": { \"$not\": [\"$isDeleted\"] } } }\n</code></pre>"},{"location":"operators/not/#output","title":"Output","text":"<pre><code>{ \"isActive\": true }\n</code></pre>"},{"location":"operators/objectToArray/","title":"$objectToArray","text":"<p>The <code>$objectToArray</code> operator converts a document (object) into an array of key-value pair documents.</p>"},{"location":"operators/objectToArray/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$objectToArray\": &lt;documentExpression&gt; }\n</code></pre> <p>Each entry in the output array has the form:</p> <pre><code>{ \"k\": &lt;key&gt;, \"v\": &lt;value&gt; }\n</code></pre>"},{"location":"operators/objectToArray/#base-example-convert-object-to-array","title":"\u2705 Base Example \u2013 Convert Object to Array","text":""},{"location":"operators/objectToArray/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"data\": { \"x\": 1, \"y\": 2 } }\n</code></pre>"},{"location":"operators/objectToArray/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$objectToArray\": \"$data\" }\n</code></pre>"},{"location":"operators/objectToArray/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"k\": \"x\", \"v\": 1 },\n  { \"k\": \"y\", \"v\": 2 }\n]\n</code></pre>"},{"location":"operators/objectToArray/#ecommerce-example-flatten-dynamic-properties","title":"\ud83e\uddf1 Ecommerce Example \u2013 Flatten Dynamic Properties","text":""},{"location":"operators/objectToArray/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"attributes\": {\n        \"$objectToArray\": \"$customAttributes\"\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/objectToArray/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Sneakers\",\n  \"customAttributes\": {\n    \"size\": \"10\",\n    \"color\": \"Red\",\n    \"style\": \"Casual\"\n  }\n}\n</code></pre>"},{"location":"operators/objectToArray/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Sneakers\",\n  \"attributes\": [\n    { \"k\": \"size\", \"v\": \"10\" },\n    { \"k\": \"color\", \"v\": \"Red\" },\n    { \"k\": \"style\", \"v\": \"Casual\" }\n  ]\n}\n</code></pre>"},{"location":"operators/objectToArray/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Transform object keys into documents</li> <li>Use with <code>$map</code> and <code>$filter</code> on object properties</li> <li>Enable custom aggregation logic for dynamic keys</li> </ul>"},{"location":"operators/objectToArray/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$arrayToObject</code>, <code>$getField</code>, <code>$setField</code>, <code>$mergeObjects</code></li> </ul>"},{"location":"operators/objectToArray/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Input must be an object; returns error on arrays or null</li> <li>Often paired with <code>$map</code> or <code>$reduce</code> for key-based logic</li> </ul>"},{"location":"operators/or/","title":"$or","text":"<p>Returns <code>true</code> when any expression in the array evaluates to a truthy value.</p>"},{"location":"operators/or/#syntax","title":"Syntax","text":"<pre><code>{ \"$or\": [ &lt;expression1&gt;, &lt;expression2&gt;, ... ] }\n</code></pre>"},{"location":"operators/or/#example","title":"Example","text":""},{"location":"operators/or/#input","title":"Input","text":"<pre><code>{ \"status\": \"pending\", \"manualOverride\": true }\n</code></pre>"},{"location":"operators/or/#stage","title":"Stage","text":"<pre><code>{\n  \"$project\": {\n    \"shouldProcess\": {\n      \"$or\": [\n        { \"$eq\": [\"$status\", \"ready\"] },\n        \"$manualOverride\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"operators/or/#output","title":"Output","text":"<pre><code>{ \"shouldProcess\": true }\n</code></pre>"},{"location":"operators/pow/","title":"$pow","text":"<p>Raises a number to the specified exponent.</p>"},{"location":"operators/pow/#syntax","title":"Syntax","text":"<pre><code>{ \"$pow\": [ &lt;baseExpression&gt;, &lt;exponentExpression&gt; ] }\n</code></pre>"},{"location":"operators/pow/#example","title":"Example","text":""},{"location":"operators/pow/#input","title":"Input","text":"<pre><code>{ \"radius\": 3 }\n</code></pre>"},{"location":"operators/pow/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"areaFactor\": { \"$pow\": [\"$radius\", 2] } } }\n</code></pre>"},{"location":"operators/pow/#output","title":"Output","text":"<pre><code>{ \"areaFactor\": 9 }\n</code></pre>"},{"location":"operators/reduce/","title":"$reduce","text":"<p>The <code>$reduce</code> operator applies an expression to each element in an array and accumulates the result.</p>"},{"location":"operators/reduce/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$reduce\": {\n    \"input\": &lt;arrayExpression&gt;,\n    \"initialValue\": &lt;expression&gt;,\n    \"in\": &lt;accumulatorExpression&gt;\n  }\n}\n</code></pre> <ul> <li><code>input</code>: The array to iterate</li> <li><code>initialValue</code>: The starting value of the accumulator</li> <li><code>in</code>: Expression that updates the accumulator using <code>$$value</code> and <code>$$this</code></li> </ul>"},{"location":"operators/reduce/#base-example-sum-values","title":"\u2705 Base Example \u2013 Sum Values","text":""},{"location":"operators/reduce/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"nums\": [1, 2, 3, 4] }\n</code></pre>"},{"location":"operators/reduce/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$reduce\": {\n    \"input\": \"$nums\",\n    \"initialValue\": 0,\n    \"in\": { \"$add\": [\"$$value\", \"$$this\"] }\n  }\n}\n</code></pre>"},{"location":"operators/reduce/#output","title":"\ud83d\udce4 Output","text":"<pre><code>10\n</code></pre>"},{"location":"operators/reduce/#base-example-concatenate-strings","title":"\u2705 Base Example \u2013 Concatenate Strings","text":""},{"location":"operators/reduce/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"words\": [\"hello\", \"world\"] }\n</code></pre>"},{"location":"operators/reduce/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$reduce\": {\n    \"input\": \"$words\",\n    \"initialValue\": \"\",\n    \"in\": { \"$concat\": [\"$$value\", \" \", \"$$this\"] }\n  }\n}\n</code></pre>"},{"location":"operators/reduce/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\" hello world\"\n</code></pre>"},{"location":"operators/reduce/#ecommerce-example-total-price-of-all-items","title":"\ud83e\uddf1 Ecommerce Example \u2013 Total Price of All Items","text":""},{"location":"operators/reduce/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"total\": {\n        \"$reduce\": {\n          \"input\": \"$items\",\n          \"initialValue\": 0,\n          \"in\": {\n            \"$add\": [\"$$value\", { \"$multiply\": [\"$$this.price\", \"$$this.quantity\"] }]\n          }\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/reduce/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Book\", \"price\": 20, \"quantity\": 2 },\n    { \"name\": \"Bag\", \"price\": 50, \"quantity\": 1 }\n  ]\n}\n</code></pre>"},{"location":"operators/reduce/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"total\": 90 }\n</code></pre>"},{"location":"operators/reduce/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Compute totals or nested accumulations</li> <li>String aggregation</li> <li>Custom transformations</li> </ul>"},{"location":"operators/reduce/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$map</code>, <code>$filter</code>, <code>$concat</code>, <code>$sum</code>, <code>$avg</code></li> </ul>"},{"location":"operators/reduce/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li><code>$$value</code> refers to the accumulator</li> <li><code>$$this</code> refers to the current array element</li> </ul>"},{"location":"operators/regexMatch/","title":"$regexMatch","text":"<p>The <code>$regexMatch</code> operator evaluates whether a string input matches a regular expression pattern.</p>"},{"location":"operators/regexMatch/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$regexMatch\": {\n    \"input\": &lt;string&gt;,\n    \"regex\": &lt;pattern&gt;,\n    \"options\": &lt;string&gt;\n  }\n}\n</code></pre> <ul> <li><code>input</code>: The string to test.</li> <li><code>regex</code>: The pattern to match.</li> <li><code>options</code>: Optional flags like <code>\"i\"</code> (case-insensitive), <code>\"m\"</code> (multiline), etc.</li> </ul>"},{"location":"operators/regexMatch/#base-example-1-match-case-insensitive-word","title":"\u2705 Base Example 1 \u2013 Match Case-Insensitive Word","text":""},{"location":"operators/regexMatch/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"name\": \"Wireless Mouse\" }\n</code></pre>"},{"location":"operators/regexMatch/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$regexMatch\": {\n    \"input\": \"$name\",\n    \"regex\": \"mouse\",\n    \"options\": \"i\"\n  }\n}\n</code></pre>"},{"location":"operators/regexMatch/#output","title":"\ud83d\udce4 Output","text":"<pre><code>true\n</code></pre>"},{"location":"operators/regexMatch/#base-example-2-validate-product-id-format","title":"\u2705 Base Example 2 \u2013 Validate Product ID Format","text":""},{"location":"operators/regexMatch/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"productId\": \"ABC-1234\" }\n</code></pre>"},{"location":"operators/regexMatch/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$regexMatch\": {\n    \"input\": \"$productId\",\n    \"regex\": \"^[A-Z]{3}-\\d{4}$\"\n  }\n}\n</code></pre>"},{"location":"operators/regexMatch/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>true\n</code></pre>"},{"location":"operators/regexMatch/#ecommerce-example-check-brand-label-format","title":"\ud83e\uddf1 Ecommerce Example \u2013 Check Brand Label Format","text":""},{"location":"operators/regexMatch/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"brandValid\": {\n        \"$regexMatch\": {\n          \"input\": \"$items.brand\",\n          \"regex\": \"^[A-Z]{4,6}$\"\n        }\n      },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/regexMatch/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"TV\", \"brand\": \"SONY\" },\n    { \"name\": \"Book\", \"brand\": \"bk01\" }\n  ]\n}\n</code></pre>"},{"location":"operators/regexMatch/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"brandValid\": true, \"product\": \"TV\" },\n  { \"brandValid\": false, \"product\": \"Book\" }\n]\n</code></pre>"},{"location":"operators/regexMatch/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Format validation (e.g., SKU, ID)</li> <li>Keyword searching</li> <li>Input sanitization</li> </ul>"},{"location":"operators/regexMatch/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$regexFind</code>, <code>$regexFindAll</code>, <code>$regexMatch</code>, <code>$toLower</code>, <code>$split</code></li> </ul>"},{"location":"operators/regexMatch/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Use <code>\\</code> to escape characters like <code>\\d</code> in JSON.</li> <li>Combine with <code>$cond</code> or <code>$match</code> for rule evaluation.</li> </ul>"},{"location":"operators/reverseArray/","title":"$reverseArray","text":"<p>The <code>$reverseArray</code> operator returns a new array with the elements in reverse order.</p>"},{"location":"operators/reverseArray/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$reverseArray\": &lt;arrayExpression&gt; }\n</code></pre>"},{"location":"operators/reverseArray/#base-example-reverse-numbers","title":"\u2705 Base Example \u2013 Reverse Numbers","text":""},{"location":"operators/reverseArray/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"nums\": [1, 2, 3, 4, 5] }\n</code></pre>"},{"location":"operators/reverseArray/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$reverseArray\": \"$nums\" }\n</code></pre>"},{"location":"operators/reverseArray/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[5, 4, 3, 2, 1]\n</code></pre>"},{"location":"operators/reverseArray/#base-example-reverse-strings","title":"\u2705 Base Example \u2013 Reverse Strings","text":""},{"location":"operators/reverseArray/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"new\", \"sale\", \"exclusive\"] }\n</code></pre>"},{"location":"operators/reverseArray/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$reverseArray\": \"$tags\" }\n</code></pre>"},{"location":"operators/reverseArray/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\"exclusive\", \"sale\", \"new\"]\n</code></pre>"},{"location":"operators/reverseArray/#ecommerce-example-show-most-recent-orders-first","title":"\ud83e\uddf1 Ecommerce Example \u2013 Show Most Recent Orders First","text":""},{"location":"operators/reverseArray/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"customer\": \"$name\",\n      \"recentOrders\": {\n        \"$reverseArray\": \"$orders\"\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/reverseArray/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Alice\",\n  \"orders\": [\n    { \"orderId\": 1, \"amount\": 50 },\n    { \"orderId\": 2, \"amount\": 75 },\n    { \"orderId\": 3, \"amount\": 30 }\n  ]\n}\n</code></pre>"},{"location":"operators/reverseArray/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"customer\": \"Alice\",\n  \"recentOrders\": [\n    { \"orderId\": 3, \"amount\": 30 },\n    { \"orderId\": 2, \"amount\": 75 },\n    { \"orderId\": 1, \"amount\": 50 }\n  ]\n}\n</code></pre>"},{"location":"operators/reverseArray/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Display latest entries first</li> <li>Change processing order</li> <li>Use before slicing or accessing via index</li> </ul>"},{"location":"operators/reverseArray/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$slice</code>, <code>$arrayElemAt</code>, <code>$map</code>, <code>$concatArrays</code></li> </ul>"},{"location":"operators/reverseArray/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Input must be an array; otherwise returns <code>null</code>.</li> <li>Does not modify the original array.</li> </ul>"},{"location":"operators/round/","title":"$round","text":"<p>Rounds a number to the nearest integer or to a specified decimal place.</p>"},{"location":"operators/round/#syntax","title":"Syntax","text":"<pre><code>{ \"$round\": [ &lt;numberExpression&gt;, &lt;placeExpression?&gt; ] }\n</code></pre> <ul> <li>Omit the second argument to round to the nearest integer.</li> <li>Supply a positive <code>place</code> to round to decimal places, or a negative value to round to tens, hundreds, etc.</li> </ul>"},{"location":"operators/round/#example","title":"Example","text":""},{"location":"operators/round/#input","title":"Input","text":"<pre><code>{ \"score\": 87.456 }\n</code></pre>"},{"location":"operators/round/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"scoreRounded\": { \"$round\": [\"$score\", 1] } } }\n</code></pre>"},{"location":"operators/round/#output","title":"Output","text":"<pre><code>{ \"scoreRounded\": 87.5 }\n</code></pre>"},{"location":"operators/rtrim/","title":"$rtrim","text":"<p>The <code>$rtrim</code> operator removes specified characters from the end (right) of a string.</p>"},{"location":"operators/rtrim/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$rtrim\": {\n    \"input\": &lt;expression&gt;,\n    \"chars\": &lt;charsToTrim&gt;\n  }\n}\n</code></pre> <ul> <li><code>input</code>: The string to trim from the right</li> <li><code>chars</code>: Characters to remove (defaults to whitespace)</li> </ul>"},{"location":"operators/rtrim/#base-example-1-trim-trailing-whitespace","title":"\u2705 Base Example 1 \u2013 Trim Trailing Whitespace","text":""},{"location":"operators/rtrim/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"code\": \"SKU100   \" }\n</code></pre>"},{"location":"operators/rtrim/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$rtrim\": { \"input\": \"$code\" } }\n</code></pre>"},{"location":"operators/rtrim/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"SKU100\"\n</code></pre>"},{"location":"operators/rtrim/#base-example-2-trim-dashes-from-end","title":"\u2705 Base Example 2 \u2013 Trim Dashes from End","text":""},{"location":"operators/rtrim/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"slug\": \"tshirt---\" }\n</code></pre>"},{"location":"operators/rtrim/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$rtrim\": {\n    \"input\": \"$slug\",\n    \"chars\": \"-\"\n  }\n}\n</code></pre>"},{"location":"operators/rtrim/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"tshirt\"\n</code></pre>"},{"location":"operators/rtrim/#ecommerce-example-trim-codes-for-export","title":"\ud83e\uddf1 Ecommerce Example \u2013 Trim Codes for Export","text":""},{"location":"operators/rtrim/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"cleanCode\": {\n        \"$rtrim\": {\n          \"input\": \"$items.sku\",\n          \"chars\": \"-\"\n        }\n      },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/rtrim/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"sku\": \"ABC123---\", \"name\": \"Bag\" },\n    { \"sku\": \"XYZ999-\", \"name\": \"Shoes\" }\n  ]\n}\n</code></pre>"},{"location":"operators/rtrim/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"cleanCode\": \"ABC123\", \"product\": \"Bag\" },\n  { \"cleanCode\": \"XYZ999\", \"product\": \"Shoes\" }\n]\n</code></pre>"},{"location":"operators/rtrim/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Remove unwanted trailing symbols</li> <li>Clean up formatting before exporting</li> <li>Strip padding or delimiters from strings</li> </ul>"},{"location":"operators/rtrim/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$ltrim</code>, <code>$trim</code>, <code>$toLower</code>, <code>$substr</code></li> </ul>"},{"location":"operators/rtrim/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>If <code>chars</code> is omitted, whitespace is removed.</li> <li>Use with <code>$ltrim</code> or <code>$trim</code> to handle full sides.</li> </ul>"},{"location":"operators/setField/","title":"$setField","text":"<p>The <code>$setField</code> operator allows adding, updating, or replacing a field in a document.</p>"},{"location":"operators/setField/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$setField\": {\n    \"field\": &lt;fieldName&gt;,\n    \"input\": &lt;document&gt;,\n    \"value\": &lt;newValue&gt;\n  }\n}\n</code></pre> <ul> <li><code>field</code>: The field to set</li> <li><code>input</code>: The input document</li> <li><code>value</code>: The new value to assign</li> </ul>"},{"location":"operators/setField/#base-example-set-field-value","title":"\u2705 Base Example \u2013 Set Field Value","text":""},{"location":"operators/setField/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"a\": 1 }\n</code></pre>"},{"location":"operators/setField/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$setField\": {\n    \"field\": \"b\",\n    \"input\": \"$$ROOT\",\n    \"value\": 2\n  }\n}\n</code></pre>"},{"location":"operators/setField/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"a\": 1, \"b\": 2 }\n</code></pre>"},{"location":"operators/setField/#overwrite-existing-field","title":"\u2705 Overwrite Existing Field","text":""},{"location":"operators/setField/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"a\": 10 }\n</code></pre>"},{"location":"operators/setField/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$setField\": {\n    \"field\": \"a\",\n    \"input\": \"$$ROOT\",\n    \"value\": 99\n  }\n}\n</code></pre>"},{"location":"operators/setField/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"a\": 99 }\n</code></pre>"},{"location":"operators/setField/#ecommerce-example-add-rating-to-product-attribute","title":"\ud83e\uddf1 Ecommerce Example \u2013 Add Rating to Product Attribute","text":""},{"location":"operators/setField/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"updatedAttributes\": {\n        \"$setField\": {\n          \"field\": \"rating\",\n          \"input\": \"$attributes\",\n          \"value\": 4.8\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/setField/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Watch\",\n  \"attributes\": {\n    \"color\": \"Black\",\n    \"style\": \"Sport\"\n  }\n}\n</code></pre>"},{"location":"operators/setField/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Watch\",\n  \"updatedAttributes\": {\n    \"color\": \"Black\",\n    \"style\": \"Sport\",\n    \"rating\": 4.8\n  }\n}\n</code></pre>"},{"location":"operators/setField/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Modify nested subdocuments</li> <li>Add calculated fields</li> <li>Create documents with dynamic key-value pairs</li> </ul>"},{"location":"operators/setField/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$getField</code>, <code>$mergeObjects</code>, <code>$unsetField</code>, <code>$objectToArray</code></li> </ul>"},{"location":"operators/setField/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Allows modifying deeply nested fields with full control</li> <li>Supports dynamic field names using expressions</li> </ul>"},{"location":"operators/size/","title":"$size","text":"<p>The <code>$size</code> operator returns the number of elements in an array.</p>"},{"location":"operators/size/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$size\": &lt;arrayExpression&gt; }\n</code></pre> <p>The input must resolve to an array.</p>"},{"location":"operators/size/#base-example-count-elements","title":"\u2705 Base Example \u2013 Count Elements","text":""},{"location":"operators/size/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"tags\": [\"sale\", \"new\", \"exclusive\"] }\n</code></pre>"},{"location":"operators/size/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$size\": \"$tags\" }\n</code></pre>"},{"location":"operators/size/#output","title":"\ud83d\udce4 Output","text":"<pre><code>3\n</code></pre>"},{"location":"operators/size/#base-example-empty-array","title":"\u2705 Base Example \u2013 Empty Array","text":""},{"location":"operators/size/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"items\": [] }\n</code></pre>"},{"location":"operators/size/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$size\": \"$items\" }\n</code></pre>"},{"location":"operators/size/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>0\n</code></pre>"},{"location":"operators/size/#ecommerce-example-count-item-features","title":"\ud83e\uddf1 Ecommerce Example \u2013 Count Item Features","text":""},{"location":"operators/size/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"featureCount\": { \"$size\": \"$items.features\" }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/size/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    {\n      \"name\": \"Backpack\",\n      \"features\": [\"Padded\", \"Waterproof\", \"Adjustable Straps\"]\n    },\n    {\n      \"name\": \"Watch\",\n      \"features\": []\n    }\n  ]\n}\n</code></pre>"},{"location":"operators/size/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"product\": \"Backpack\", \"featureCount\": 3 },\n  { \"product\": \"Watch\", \"featureCount\": 0 }\n]\n</code></pre>"},{"location":"operators/size/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Count number of tags, features, options</li> <li>Validate minimum/maximum items</li> <li>Use with <code>$cond</code> or <code>$switch</code> for conditional logic</li> </ul>"},{"location":"operators/size/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$isArray</code>, <code>$map</code>, <code>$filter</code>, <code>$arrayElemAt</code></li> </ul>"},{"location":"operators/size/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Returns an error if input is not an array</li> <li>Use <code>$ifNull</code> or <code>$cond</code> for safety</li> </ul>"},{"location":"operators/slice/","title":"$slice","text":"<p>The <code>$slice</code> operator returns a subset of an array. You can specify the number of elements to return, and optionally, the starting position.</p>"},{"location":"operators/slice/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$slice\": [ &lt;arrayExpression&gt;, &lt;n&gt; ] }\n</code></pre> <p>or</p> <pre><code>{ \"$slice\": [ &lt;arrayExpression&gt;, &lt;start&gt;, &lt;n&gt; ] }\n</code></pre> <ul> <li><code>arrayExpression</code>: The array to slice.</li> <li><code>n</code>: The number of elements to return.</li> <li><code>start</code>: (optional) The index to start slicing from.</li> </ul>"},{"location":"operators/slice/#base-example-1-first-2-elements","title":"\u2705 Base Example 1 \u2013 First 2 Elements","text":""},{"location":"operators/slice/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"values\": [10, 20, 30, 40] }\n</code></pre>"},{"location":"operators/slice/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$slice\": [\"$values\", 2] }\n</code></pre>"},{"location":"operators/slice/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[10, 20]\n</code></pre>"},{"location":"operators/slice/#base-example-2-middle-slice","title":"\u2705 Base Example 2 \u2013 Middle Slice","text":""},{"location":"operators/slice/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"values\": [10, 20, 30, 40, 50] }\n</code></pre>"},{"location":"operators/slice/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$slice\": [\"$values\", 1, 3] }\n</code></pre>"},{"location":"operators/slice/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[20, 30, 40]\n</code></pre>"},{"location":"operators/slice/#ecommerce-example-get-first-2-features","title":"\ud83e\uddf1 Ecommerce Example \u2013 Get First 2 Features","text":""},{"location":"operators/slice/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"topFeatures\": {\n        \"$slice\": [\"$items.features\", 2]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/slice/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    {\n      \"name\": \"Smartwatch\",\n      \"features\": [\"Bluetooth\", \"Heart Rate\", \"GPS\", \"Waterproof\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"operators/slice/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"product\": \"Smartwatch\",\n    \"topFeatures\": [\"Bluetooth\", \"Heart Rate\"]\n  }\n]\n</code></pre>"},{"location":"operators/slice/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Truncate arrays</li> <li>Return previews</li> <li>Extract top-N items</li> </ul>"},{"location":"operators/slice/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$arrayElemAt</code>, <code>$filter</code>, <code>$reduce</code>, <code>$map</code>, <code>$indexOfArray</code></li> </ul>"},{"location":"operators/slice/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Negative <code>n</code> removes elements from the end.</li> <li>Use with <code>$sort</code> to return top records before slicing.</li> </ul>"},{"location":"operators/split/","title":"$split","text":"<p>The <code>$split</code> operator divides a string into an array of substrings based on a specified delimiter.</p>"},{"location":"operators/split/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$split\": [ &lt;string&gt;, &lt;delimiter&gt; ] }\n</code></pre>"},{"location":"operators/split/#base-example-1-split-email-address","title":"\u2705 Base Example 1 \u2013 Split Email Address","text":""},{"location":"operators/split/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"email\": \"user@example.com\" }\n</code></pre>"},{"location":"operators/split/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$split\": [\"$email\", \"@\"] }\n</code></pre>"},{"location":"operators/split/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\"user\", \"example.com\"]\n</code></pre>"},{"location":"operators/split/#base-example-2-break-path","title":"\u2705 Base Example 2 \u2013 Break Path","text":""},{"location":"operators/split/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"path\": \"inventory/electronics/phones\" }\n</code></pre>"},{"location":"operators/split/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$split\": [\"$path\", \"/\"] }\n</code></pre>"},{"location":"operators/split/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\"inventory\", \"electronics\", \"phones\"]\n</code></pre>"},{"location":"operators/split/#ecommerce-example-parse-composite-sku-codes","title":"\ud83e\uddf1 Ecommerce Example \u2013 Parse Composite SKU Codes","text":""},{"location":"operators/split/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"skuParts\": {\n        \"$split\": [\"$items.sku\", \"-\"]\n      },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/split/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Laptop\", \"sku\": \"ELEC-BRND-X123\" },\n    { \"name\": \"Shoes\", \"sku\": \"FASH-BRND-Y456\" }\n  ]\n}\n</code></pre>"},{"location":"operators/split/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"skuParts\": [\"ELEC\", \"BRND\", \"X123\"], \"product\": \"Laptop\" },\n  { \"skuParts\": [\"FASH\", \"BRND\", \"Y456\"], \"product\": \"Shoes\" }\n]\n</code></pre>"},{"location":"operators/split/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Email/username separation</li> <li>Path decomposition</li> <li>SKU/code parsing</li> </ul>"},{"location":"operators/split/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$arrayElemAt</code>, <code>$indexOfArray</code>, <code>$substr</code>, <code>$split</code>, <code>$map</code></li> </ul>"},{"location":"operators/split/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>If the delimiter is not found, the entire string is returned in a single-element array.</li> <li>Returns an empty array when splitting an empty string.</li> </ul>"},{"location":"operators/sqrt/","title":"$sqrt","text":"<p>Computes the square root of a numeric expression.</p>"},{"location":"operators/sqrt/#syntax","title":"Syntax","text":"<pre><code>{ \"$sqrt\": &lt;numberExpression&gt; }\n</code></pre>"},{"location":"operators/sqrt/#example","title":"Example","text":""},{"location":"operators/sqrt/#input","title":"Input","text":"<pre><code>{ \"variance\": 9 }\n</code></pre>"},{"location":"operators/sqrt/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"stdDev\": { \"$sqrt\": \"$variance\" } } }\n</code></pre>"},{"location":"operators/sqrt/#output","title":"Output","text":"<pre><code>{ \"stdDev\": 3 }\n</code></pre>"},{"location":"operators/strLenBytes/","title":"$strLenBytes","text":"<p>The <code>$strLenBytes</code> operator returns the length of a string in bytes (not characters).</p>"},{"location":"operators/strLenBytes/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$strLenBytes\": &lt;expression&gt; }\n</code></pre> <p>The expression must resolve to a string.</p>"},{"location":"operators/strLenBytes/#base-example-1-ascii-string","title":"\u2705 Base Example 1 \u2013 ASCII String","text":""},{"location":"operators/strLenBytes/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"name\": \"Laptop\" }\n</code></pre>"},{"location":"operators/strLenBytes/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$strLenBytes\": \"$name\" }\n</code></pre>"},{"location":"operators/strLenBytes/#output","title":"\ud83d\udce4 Output","text":"<pre><code>6\n</code></pre>"},{"location":"operators/strLenBytes/#base-example-2-unicode-characters","title":"\u2705 Base Example 2 \u2013 Unicode Characters","text":""},{"location":"operators/strLenBytes/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"emoji\": \"\ud83d\ude0a\" }\n</code></pre>"},{"location":"operators/strLenBytes/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$strLenBytes\": \"$emoji\" }\n</code></pre>"},{"location":"operators/strLenBytes/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>4\n</code></pre> <p>Emoji and many Unicode characters use multiple bytes.</p>"},{"location":"operators/strLenBytes/#ecommerce-example-calculate-byte-size-of-labels","title":"\ud83e\uddf1 Ecommerce Example \u2013 Calculate Byte Size of Labels","text":""},{"location":"operators/strLenBytes/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"label\": \"$items.name\",\n      \"byteLength\": {\n        \"$strLenBytes\": \"$items.name\"\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/strLenBytes/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Bag\" },\n    { \"name\": \"\u0928\u092e\u0938\u094d\u0924\u0947\" },\n    { \"name\": \"Keyboard\" }\n  ]\n}\n</code></pre>"},{"location":"operators/strLenBytes/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"label\": \"Bag\", \"byteLength\": 3 },\n  { \"label\": \"\u0928\u092e\u0938\u094d\u0924\u0947\", \"byteLength\": 18 },\n  { \"label\": \"Keyboard\", \"byteLength\": 8 }\n]\n</code></pre>"},{"location":"operators/strLenBytes/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Prepare size-limited exports</li> <li>Analyze string size for storage</li> <li>Truncate safely with <code>$substrBytes</code></li> </ul>"},{"location":"operators/strLenBytes/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$strLenCP</code>, <code>$substrBytes</code>, <code>$toString</code>, <code>$split</code></li> </ul>"},{"location":"operators/strLenBytes/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Byte length \u2260 character count in UTF-8.</li> <li>Use <code>$strLenCP</code> for actual character count.</li> </ul>"},{"location":"operators/strLenCP/","title":"$strLenCP","text":"<p>The <code>$strLenCP</code> operator returns the length of a string in UTF-8 code points (characters).</p>"},{"location":"operators/strLenCP/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$strLenCP\": &lt;expression&gt; }\n</code></pre> <p>The expression must resolve to a string.</p>"},{"location":"operators/strLenCP/#base-example-1-ascii-string","title":"\u2705 Base Example 1 \u2013 ASCII String","text":""},{"location":"operators/strLenCP/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"product\": \"Phone\" }\n</code></pre>"},{"location":"operators/strLenCP/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$strLenCP\": \"$product\" }\n</code></pre>"},{"location":"operators/strLenCP/#output","title":"\ud83d\udce4 Output","text":"<pre><code>5\n</code></pre>"},{"location":"operators/strLenCP/#base-example-2-unicode-word","title":"\u2705 Base Example 2 \u2013 Unicode Word","text":""},{"location":"operators/strLenCP/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"greeting\": \"\u0928\u092e\u0938\u094d\u0924\u0947\" }\n</code></pre>"},{"location":"operators/strLenCP/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$strLenCP\": \"$greeting\" }\n</code></pre>"},{"location":"operators/strLenCP/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>6\n</code></pre>"},{"location":"operators/strLenCP/#ecommerce-example-validate-product-name-length","title":"\ud83e\uddf1 Ecommerce Example \u2013 Validate Product Name Length","text":""},{"location":"operators/strLenCP/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"name\": \"$items.name\",\n      \"charLength\": {\n        \"$strLenCP\": \"$items.name\"\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/strLenCP/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Bag\" },\n    { \"name\": \"\u0928\u092e\u0938\u094d\u0924\u0947\" },\n    { \"name\": \"Keyboard\" }\n  ]\n}\n</code></pre>"},{"location":"operators/strLenCP/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"name\": \"Bag\", \"charLength\": 3 },\n  { \"name\": \"\u0928\u092e\u0938\u094d\u0924\u0947\", \"charLength\": 6 },\n  { \"name\": \"Keyboard\", \"charLength\": 8 }\n]\n</code></pre>"},{"location":"operators/strLenCP/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Character validation (min/max lengths)</li> <li>UI truncation</li> <li>Enforcing content size rules</li> </ul>"},{"location":"operators/strLenCP/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$strLenBytes</code>, <code>$substrCP</code>, <code>$toString</code>, <code>$split</code></li> </ul>"},{"location":"operators/strLenCP/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Use <code>$strLenCP</code> when Unicode characters are expected.</li> <li>For byte size, use <code>$strLenBytes</code>.</li> </ul>"},{"location":"operators/strcasecmp/","title":"$strcasecmp","text":"<p>The <code>$strcasecmp</code> operator performs a case-insensitive comparison of two strings and returns:</p> <ul> <li><code>0</code> if they are equal (ignoring case)</li> <li><code>1</code> if the first is greater</li> <li><code>-1</code> if the second is greater</li> </ul>"},{"location":"operators/strcasecmp/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$strcasecmp\": [ &lt;string1&gt;, &lt;string2&gt; ] }\n</code></pre>"},{"location":"operators/strcasecmp/#base-example-1-equal-strings","title":"\u2705 Base Example 1 \u2013 Equal Strings","text":""},{"location":"operators/strcasecmp/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"input1\": \"hello\", \"input2\": \"HELLO\" }\n</code></pre>"},{"location":"operators/strcasecmp/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$strcasecmp\": [\"$input1\", \"$input2\"] }\n</code></pre>"},{"location":"operators/strcasecmp/#output","title":"\ud83d\udce4 Output","text":"<pre><code>0\n</code></pre>"},{"location":"operators/strcasecmp/#base-example-2-alphabetical-check","title":"\u2705 Base Example 2 \u2013 Alphabetical Check","text":""},{"location":"operators/strcasecmp/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"input1\": \"apple\", \"input2\": \"banana\" }\n</code></pre>"},{"location":"operators/strcasecmp/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$strcasecmp\": [\"$input1\", \"$input2\"] }\n</code></pre>"},{"location":"operators/strcasecmp/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>-1\n</code></pre>"},{"location":"operators/strcasecmp/#ecommerce-example-compare-category-codes-for-sorting","title":"\ud83e\uddf1 Ecommerce Example \u2013 Compare Category Codes for Sorting","text":""},{"location":"operators/strcasecmp/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"isCategoryMatch\": {\n        \"$eq\": [\n          { \"$strcasecmp\": [\"$items.category\", \"FASHION\"] },\n          0\n        ]\n      },\n      \"name\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/strcasecmp/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Jacket\", \"category\": \"Fashion\" },\n    { \"name\": \"Speaker\", \"category\": \"Electronics\" }\n  ]\n}\n</code></pre>"},{"location":"operators/strcasecmp/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"isCategoryMatch\": true, \"name\": \"Jacket\" },\n  { \"isCategoryMatch\": false, \"name\": \"Speaker\" }\n]\n</code></pre>"},{"location":"operators/strcasecmp/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Case-insensitive comparisons</li> <li>Field normalization for filtering</li> <li>Use in <code>$project</code>, <code>$match</code>, or conditional logic</li> </ul>"},{"location":"operators/strcasecmp/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$eq</code>, <code>$toLower</code>, <code>$cmp</code>, <code>$cond</code></li> </ul>"},{"location":"operators/strcasecmp/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Both arguments must be strings.</li> <li>Returns numeric value based on case-insensitive lexicographical comparison.</li> </ul>"},{"location":"operators/substr/","title":"$substr","text":"<p>The <code>$substr</code> operator returns a substring of a string, starting at a specified index and with a specified length.</p>"},{"location":"operators/substr/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$substr\": [ &lt;string&gt;, &lt;start&gt;, &lt;length&gt; ] }\n</code></pre> <ul> <li><code>&lt;string&gt;</code>: The source string expression</li> <li><code>&lt;start&gt;</code>: Zero-based start index</li> <li><code>&lt;length&gt;</code>: Number of characters to return</li> </ul>"},{"location":"operators/substr/#base-example-1-extract-first-3-letters","title":"\u2705 Base Example 1 \u2013 Extract First 3 Letters","text":""},{"location":"operators/substr/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"product\": \"Shoes\" }\n</code></pre>"},{"location":"operators/substr/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$substr\": [\"$product\", 0, 3] }\n</code></pre>"},{"location":"operators/substr/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"Sho\"\n</code></pre>"},{"location":"operators/substr/#base-example-2-get-file-extension","title":"\u2705 Base Example 2 \u2013 Get File Extension","text":""},{"location":"operators/substr/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"filename\": \"invoice2024.pdf\" }\n</code></pre>"},{"location":"operators/substr/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$substr\": [\"$filename\", 12, 3] }\n</code></pre>"},{"location":"operators/substr/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"pdf\"\n</code></pre>"},{"location":"operators/substr/#ecommerce-example-shorten-brand-prefix-from-sku","title":"\ud83e\uddf1 Ecommerce Example \u2013 Shorten Brand Prefix from SKU","text":""},{"location":"operators/substr/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"shortSku\": { \"$substr\": [\"$items.sku\", 0, 5] },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/substr/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"sku\": \"BRAND12345\", \"name\": \"Backpack\" },\n    { \"sku\": \"DELTA98765\", \"name\": \"Laptop\" }\n  ]\n}\n</code></pre>"},{"location":"operators/substr/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"shortSku\": \"BRAND\", \"product\": \"Backpack\" },\n  { \"shortSku\": \"DELTA\", \"product\": \"Laptop\" }\n]\n</code></pre>"},{"location":"operators/substr/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Extract prefixes, suffixes, or sections</li> <li>Parse embedded strings</li> <li>Simplify field values for display</li> </ul>"},{"location":"operators/substr/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$substrBytes</code>, <code>$substrCP</code>, <code>$slice</code>, <code>$split</code>, <code>$indexOfBytes</code></li> </ul>"},{"location":"operators/substr/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li><code>$substr</code> is deprecated in favor of <code>$substrBytes</code> and <code>$substrCP</code> for Unicode correctness.</li> <li>Start index out of range returns an empty string.</li> </ul>"},{"location":"operators/substrBytes/","title":"$substrBytes","text":"<p>The <code>$substrBytes</code> operator returns a substring from a string, measured in bytes, starting at a specified index with a specified byte length.</p>"},{"location":"operators/substrBytes/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$substrBytes\": [ &lt;string&gt;, &lt;startByte&gt;, &lt;byteLength&gt; ] }\n</code></pre> <ul> <li><code>&lt;string&gt;</code>: The input string</li> <li><code>&lt;startByte&gt;</code>: Byte offset (starting from 0)</li> <li><code>&lt;byteLength&gt;</code>: Number of bytes to return</li> </ul>"},{"location":"operators/substrBytes/#base-example-1-extract-first-3-bytes-ascii-safe","title":"\u2705 Base Example 1 \u2013 Extract First 3 Bytes (ASCII safe)","text":""},{"location":"operators/substrBytes/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"code\": \"ABC123\" }\n</code></pre>"},{"location":"operators/substrBytes/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$substrBytes\": [\"$code\", 0, 3] }\n</code></pre>"},{"location":"operators/substrBytes/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"ABC\"\n</code></pre>"},{"location":"operators/substrBytes/#base-example-2-byte-truncation-of-file-name","title":"\u2705 Base Example 2 \u2013 Byte Truncation of File Name","text":""},{"location":"operators/substrBytes/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"filename\": \"product.csv\" }\n</code></pre>"},{"location":"operators/substrBytes/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$substrBytes\": [\"$filename\", 0, 7] }\n</code></pre>"},{"location":"operators/substrBytes/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"product\"\n</code></pre>"},{"location":"operators/substrBytes/#ecommerce-example-shorten-product-codes-for-export","title":"\ud83e\uddf1 Ecommerce Example \u2013 Shorten Product Codes for Export","text":""},{"location":"operators/substrBytes/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"shortCode\": {\n        \"$substrBytes\": [\"$items.sku\", 0, 5]\n      },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/substrBytes/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"sku\": \"CODE99999\", \"name\": \"Bag\" },\n    { \"sku\": \"TOOL88888\", \"name\": \"Drill\" }\n  ]\n}\n</code></pre>"},{"location":"operators/substrBytes/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"shortCode\": \"CODE9\", \"product\": \"Bag\" },\n  { \"shortCode\": \"TOOL8\", \"product\": \"Drill\" }\n]\n</code></pre>"},{"location":"operators/substrBytes/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Export byte-limited strings</li> <li>Handling legacy encodings (e.g., ASCII)</li> <li>Efficient slicing in fixed-byte-width systems</li> </ul>"},{"location":"operators/substrBytes/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$substr</code>, <code>$substrCP</code>, <code>$slice</code>, <code>$split</code>, <code>$indexOfBytes</code></li> </ul>"},{"location":"operators/substrBytes/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Works best with ASCII or single-byte encodings.</li> <li>May truncate multi-byte Unicode characters incorrectly \u2014 for Unicode-safe use <code>$substrCP</code>.</li> </ul>"},{"location":"operators/substrCP/","title":"$substrCP","text":"<p>The <code>$substrCP</code> operator returns a substring from a string, measured in UTF-8 code points (characters), starting at a specified character index with a specified number of characters.</p>"},{"location":"operators/substrCP/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$substrCP\": [ &lt;string&gt;, &lt;startChar&gt;, &lt;charLength&gt; ] }\n</code></pre> <ul> <li><code>&lt;string&gt;</code>: The input string</li> <li><code>&lt;startChar&gt;</code>: Character index to start from (0-based)</li> <li><code>&lt;charLength&gt;</code>: Number of characters (code points) to return</li> </ul>"},{"location":"operators/substrCP/#base-example-1-extract-first-4-characters","title":"\u2705 Base Example 1 \u2013 Extract First 4 Characters","text":""},{"location":"operators/substrCP/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"title\": \"Notebook\" }\n</code></pre>"},{"location":"operators/substrCP/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$substrCP\": [\"$title\", 0, 4] }\n</code></pre>"},{"location":"operators/substrCP/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"Note\"\n</code></pre>"},{"location":"operators/substrCP/#base-example-2-multilingual-safe-slicing","title":"\u2705 Base Example 2 \u2013 Multilingual Safe Slicing","text":""},{"location":"operators/substrCP/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"label\": \"\u0928\u092e\u0938\u094d\u0924\u0947\" }\n</code></pre>"},{"location":"operators/substrCP/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$substrCP\": [\"$label\", 0, 3] }\n</code></pre>"},{"location":"operators/substrCP/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"\u0928\u092e\u0938\u094d\"\n</code></pre>"},{"location":"operators/substrCP/#ecommerce-example-shorten-product-names","title":"\ud83e\uddf1 Ecommerce Example \u2013 Shorten Product Names","text":""},{"location":"operators/substrCP/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"shortName\": {\n        \"$substrCP\": [\"$items.name\", 0, 6]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/substrCP/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Bluetooth Speaker\" },\n    { \"name\": \"Wireless Keyboard\" }\n  ]\n}\n</code></pre>"},{"location":"operators/substrCP/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"shortName\": \"Blueto\" },\n  { \"shortName\": \"Wirele\" }\n]\n</code></pre>"},{"location":"operators/substrCP/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Multilingual-safe substring extraction</li> <li>Character-length-limited output</li> <li>Text formatting for display</li> </ul>"},{"location":"operators/substrCP/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$substr</code>, <code>$substrBytes</code>, <code>$split</code>, <code>$slice</code>, <code>$strLenCP</code></li> </ul>"},{"location":"operators/substrCP/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Use <code>$substrCP</code> over <code>$substr</code> or <code>$substrBytes</code> for Unicode strings.</li> <li>Avoid cutting emojis or multibyte characters with <code>$substrBytes</code>.</li> </ul>"},{"location":"operators/subtract/","title":"$subtract","text":"<p>The <code>$subtract</code> operator subtracts one number (or date) from another.</p>"},{"location":"operators/subtract/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$subtract\": [ &lt;expression1&gt;, &lt;expression2&gt; ] }\n</code></pre> <p><code>&lt;expression1&gt;</code> is the value to subtract from. <code>&lt;expression2&gt;</code> is the value to subtract.</p>"},{"location":"operators/subtract/#base-example-subtract-discount-from-price","title":"\u2705 Base Example \u2013 Subtract Discount from Price","text":""},{"location":"operators/subtract/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"price\": 100, \"discount\": 25 }\n</code></pre>"},{"location":"operators/subtract/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$subtract\": [\"$price\", \"$discount\"] }\n</code></pre>"},{"location":"operators/subtract/#output","title":"\ud83d\udce4 Output","text":"<pre><code>75\n</code></pre>"},{"location":"operators/subtract/#deep-nested-example-compute-remaining-balance-per-item","title":"\ud83e\uddf1 Deep Nested Example \u2013 Compute Remaining Balance per Item","text":""},{"location":"operators/subtract/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"due\": {\n        \"$subtract\": [\"$items.total\", \"$items.paid\"]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/subtract/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 2,\n  \"items\": [\n    { \"name\": \"Monitor\", \"total\": 200, \"paid\": 150 },\n    { \"name\": \"Keyboard\", \"total\": 100, \"paid\": 100 }\n  ]\n}\n</code></pre>"},{"location":"operators/subtract/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  { \"product\": \"Monitor\", \"due\": 50 },\n  { \"product\": \"Keyboard\", \"due\": 0 }\n]\n</code></pre>"},{"location":"operators/subtract/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Calculating remaining balances</li> <li>Date differences (with ISODate types)</li> <li>Price reductions and change tracking</li> </ul>"},{"location":"operators/subtract/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$add</code>, <code>$multiply</code>, <code>$divide</code></li> <li><code>$project</code>, <code>$group</code>, <code>$set</code></li> </ul>"},{"location":"operators/sum/","title":"$sum","text":"<p>Adds together numeric values and returns their total.</p>"},{"location":"operators/sum/#syntax","title":"Syntax","text":"<pre><code>{ \"$sum\": &lt;arrayExpression&gt; }\n</code></pre>"},{"location":"operators/sum/#example","title":"Example","text":""},{"location":"operators/sum/#input","title":"Input","text":"<pre><code>{ \"lineItems\": [29.99, 14.5, 9.0] }\n</code></pre>"},{"location":"operators/sum/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"orderTotal\": { \"$sum\": \"$lineItems\" } } }\n</code></pre>"},{"location":"operators/sum/#output","title":"Output","text":"<pre><code>{ \"orderTotal\": 53.49 }\n</code></pre>"},{"location":"operators/switch/","title":"$switch","text":"<p>The <code>$switch</code> operator allows multiple conditional branches, similar to a traditional <code>switch-case</code> statement.</p>"},{"location":"operators/switch/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$switch\": {\n    \"branches\": [\n      { \"case\": &lt;expression&gt;, \"then\": &lt;result&gt; },\n      ...\n    ],\n    \"default\": &lt;defaultResult&gt;\n  }\n}\n</code></pre>"},{"location":"operators/switch/#base-example-grade-evaluation","title":"\u2705 Base Example \u2013 Grade Evaluation","text":""},{"location":"operators/switch/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"score\": 85 }\n</code></pre>"},{"location":"operators/switch/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$switch\": {\n    \"branches\": [\n      { \"case\": { \"$gte\": [\"$score\", 90] }, \"then\": \"A\" },\n      { \"case\": { \"$gte\": [\"$score\", 80] }, \"then\": \"B\" },\n      { \"case\": { \"$gte\": [\"$score\", 70] }, \"then\": \"C\" }\n    ],\n    \"default\": \"F\"\n  }\n}\n</code></pre>"},{"location":"operators/switch/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"B\"\n</code></pre>"},{"location":"operators/switch/#ecommerce-example-price-bracket-label","title":"\ud83e\uddf1 Ecommerce Example \u2013 Price Bracket Label","text":""},{"location":"operators/switch/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"priceBracket\": {\n        \"$switch\": {\n          \"branches\": [\n            { \"case\": { \"$lte\": [\"$items.price\", 50] }, \"then\": \"Budget\" },\n            { \"case\": { \"$lte\": [\"$items.price\", 200] }, \"then\": \"Mid-Range\" },\n            { \"case\": { \"$lte\": [\"$items.price\", 1000] }, \"then\": \"Premium\" }\n          ],\n          \"default\": \"Luxury\"\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/switch/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Notebook\", \"price\": 30 },\n    { \"name\": \"Tablet\", \"price\": 180 },\n    { \"name\": \"Smartphone\", \"price\": 999 },\n    { \"name\": \"Laptop\", \"price\": 1200 }\n  ]\n}\n</code></pre>"},{"location":"operators/switch/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"product\": \"Notebook\", \"priceBracket\": \"Budget\" },\n  { \"product\": \"Tablet\", \"priceBracket\": \"Mid-Range\" },\n  { \"product\": \"Smartphone\", \"priceBracket\": \"Premium\" },\n  { \"product\": \"Laptop\", \"priceBracket\": \"Luxury\" }\n]\n</code></pre>"},{"location":"operators/switch/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Multi-condition branching</li> <li>Label assignment based on ranges</li> <li>Fallback logic for exceptions</li> </ul>"},{"location":"operators/switch/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$cond</code>, <code>$ifNull</code>, <code>$or</code>, <code>$and</code>, <code>$eq</code>, <code>$gt</code>, <code>$lt</code></li> </ul>"},{"location":"operators/switch/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Conditions are evaluated in order; the first match is returned.</li> <li>If no conditions match, the <code>default</code> is used.</li> </ul>"},{"location":"operators/toBool/","title":"$toBool","text":"<p>Converts a value to a boolean using MongoDB\u2019s truthiness rules.</p>"},{"location":"operators/toBool/#syntax","title":"Syntax","text":"<pre><code>{ \"$toBool\": &lt;expression&gt; }\n</code></pre>"},{"location":"operators/toBool/#example","title":"Example","text":""},{"location":"operators/toBool/#input","title":"Input","text":"<pre><code>{ \"flag\": \"true\" }\n</code></pre>"},{"location":"operators/toBool/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"asBoolean\": { \"$toBool\": \"$flag\" } } }\n</code></pre>"},{"location":"operators/toBool/#output","title":"Output","text":"<pre><code>{ \"asBoolean\": true }\n</code></pre>"},{"location":"operators/toDate/","title":"$toDate","text":"<p>Converts a value to a BSON <code>Date</code>. Strings are parsed using ISO-8601 formats unless options specify otherwise.</p>"},{"location":"operators/toDate/#syntax","title":"Syntax","text":"<pre><code>{ \"$toDate\": &lt;expression&gt; }\n</code></pre>"},{"location":"operators/toDate/#example","title":"Example","text":""},{"location":"operators/toDate/#input","title":"Input","text":"<pre><code>{ \"createdAt\": \"2025-02-01T12:30:00Z\" }\n</code></pre>"},{"location":"operators/toDate/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"createdAt\": { \"$toDate\": \"$createdAt\" } } }\n</code></pre>"},{"location":"operators/toDate/#output","title":"Output","text":"<pre><code>{ \"createdAt\": { \"$date\": \"2025-02-01T12:30:00Z\" } }\n</code></pre>"},{"location":"operators/toDouble/","title":"$toDouble","text":"<p>Converts a value to a double-precision floating point number.</p>"},{"location":"operators/toDouble/#syntax","title":"Syntax","text":"<pre><code>{ \"$toDouble\": &lt;expression&gt; }\n</code></pre>"},{"location":"operators/toDouble/#example","title":"Example","text":""},{"location":"operators/toDouble/#input","title":"Input","text":"<pre><code>{ \"price\": \"19.75\" }\n</code></pre>"},{"location":"operators/toDouble/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"price\": { \"$toDouble\": \"$price\" } } }\n</code></pre>"},{"location":"operators/toDouble/#output","title":"Output","text":"<pre><code>{ \"price\": 19.75 }\n</code></pre>"},{"location":"operators/toInt/","title":"$toInt","text":"<p>Converts a value to a 32-bit integer, truncating toward zero.</p>"},{"location":"operators/toInt/#syntax","title":"Syntax","text":"<pre><code>{ \"$toInt\": &lt;expression&gt; }\n</code></pre>"},{"location":"operators/toInt/#example","title":"Example","text":""},{"location":"operators/toInt/#input","title":"Input","text":"<pre><code>{ \"quantity\": \"15\" }\n</code></pre>"},{"location":"operators/toInt/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"quantity\": { \"$toInt\": \"$quantity\" } } }\n</code></pre>"},{"location":"operators/toInt/#output","title":"Output","text":"<pre><code>{ \"quantity\": 15 }\n</code></pre>"},{"location":"operators/toLower/","title":"$toLower","text":"<p>The <code>$toLower</code> operator converts a string to all lowercase letters.</p>"},{"location":"operators/toLower/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$toLower\": &lt;expression&gt; }\n</code></pre> <p>The expression must resolve to a string.</p>"},{"location":"operators/toLower/#base-example-1-lowercase-email","title":"\u2705 Base Example 1 \u2013 Lowercase Email","text":""},{"location":"operators/toLower/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"email\": \"USER@EXAMPLE.COM\" }\n</code></pre>"},{"location":"operators/toLower/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$toLower\": \"$email\" }\n</code></pre>"},{"location":"operators/toLower/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"user@example.com\"\n</code></pre>"},{"location":"operators/toLower/#base-example-2-city-name-normalization","title":"\u2705 Base Example 2 \u2013 City Name Normalization","text":""},{"location":"operators/toLower/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"city\": \"Toronto\" }\n</code></pre>"},{"location":"operators/toLower/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$toLower\": \"$city\" }\n</code></pre>"},{"location":"operators/toLower/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"toronto\"\n</code></pre>"},{"location":"operators/toLower/#ecommerce-example-normalize-brand-name","title":"\ud83e\uddf1 Ecommerce Example \u2013 Normalize Brand Name","text":""},{"location":"operators/toLower/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"brand_normalized\": {\n        \"$toLower\": \"$items.brand\"\n      },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/toLower/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Laptop\", \"brand\": \"HP\" },\n    { \"name\": \"Keyboard\", \"brand\": \"LogiTech\" }\n  ]\n}\n</code></pre>"},{"location":"operators/toLower/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"brand_normalized\": \"hp\", \"product\": \"Laptop\" },\n  { \"brand_normalized\": \"logitech\", \"product\": \"Keyboard\" }\n]\n</code></pre>"},{"location":"operators/toLower/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Case-insensitive comparisons</li> <li>Normalization for search, filter, and indexing</li> <li>String unification in user inputs</li> </ul>"},{"location":"operators/toLower/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$toUpper</code>, <code>$trim</code>, <code>$concat</code>, <code>$substr</code>, <code>$toString</code></li> </ul>"},{"location":"operators/toLower/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>If the input is not a string, it will raise an error.</li> <li>Use <code>$ifNull</code> or <code>$cond</code> to handle missing values gracefully.</li> </ul>"},{"location":"operators/toString/","title":"$toString","text":"<p>Converts a value to its string representation.</p>"},{"location":"operators/toString/#syntax","title":"Syntax","text":"<pre><code>{ \"$toString\": &lt;expression&gt; }\n</code></pre>"},{"location":"operators/toString/#example","title":"Example","text":""},{"location":"operators/toString/#input","title":"Input","text":"<pre><code>{ \"orderId\": 12345 }\n</code></pre>"},{"location":"operators/toString/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"orderId\": { \"$toString\": \"$orderId\" } } }\n</code></pre>"},{"location":"operators/toString/#output","title":"Output","text":"<pre><code>{ \"orderId\": \"12345\" }\n</code></pre>"},{"location":"operators/toUpper/","title":"$toUpper","text":"<p>The <code>$toUpper</code> operator converts a string to all uppercase letters.</p>"},{"location":"operators/toUpper/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$toUpper\": &lt;expression&gt; }\n</code></pre> <p>The expression must resolve to a string.</p>"},{"location":"operators/toUpper/#base-example-1-uppercase-city-name","title":"\u2705 Base Example 1 \u2013 Uppercase City Name","text":""},{"location":"operators/toUpper/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"city\": \"toronto\" }\n</code></pre>"},{"location":"operators/toUpper/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$toUpper\": \"$city\" }\n</code></pre>"},{"location":"operators/toUpper/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"TORONTO\"\n</code></pre>"},{"location":"operators/toUpper/#base-example-2-uppercase-username-for-display","title":"\u2705 Base Example 2 \u2013 Uppercase Username for Display","text":""},{"location":"operators/toUpper/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"username\": \"janedoe\" }\n</code></pre>"},{"location":"operators/toUpper/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$toUpper\": \"$username\" }\n</code></pre>"},{"location":"operators/toUpper/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"JANEDOE\"\n</code></pre>"},{"location":"operators/toUpper/#ecommerce-example-uppercase-category-labels","title":"\ud83e\uddf1 Ecommerce Example \u2013 Uppercase Category Labels","text":""},{"location":"operators/toUpper/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"categoryUpper\": { \"$toUpper\": \"$items.category\" },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/toUpper/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Shoes\", \"category\": \"fashion\" },\n    { \"name\": \"Tablet\", \"category\": \"electronics\" }\n  ]\n}\n</code></pre>"},{"location":"operators/toUpper/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"categoryUpper\": \"FASHION\", \"product\": \"Shoes\" },\n  { \"categoryUpper\": \"ELECTRONICS\", \"product\": \"Tablet\" }\n]\n</code></pre>"},{"location":"operators/toUpper/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Case normalization</li> <li>Visual formatting for UI</li> <li>Standardizing categories and labels</li> </ul>"},{"location":"operators/toUpper/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$toLower</code>, <code>$trim</code>, <code>$concat</code>, <code>$substr</code>, <code>$toString</code></li> </ul>"},{"location":"operators/toUpper/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Input must be a string.</li> <li>Combine with <code>$ifNull</code> or <code>$cond</code> to avoid null errors.</li> </ul>"},{"location":"operators/trim/","title":"$trim","text":"<p>The <code>$trim</code> operator removes specified characters from the beginning and end of a string.</p>"},{"location":"operators/trim/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$trim\": {\n    \"input\": &lt;expression&gt;,\n    \"chars\": &lt;charsToTrim&gt;\n  }\n}\n</code></pre> <ul> <li><code>input</code>: The string to trim</li> <li><code>chars</code>: The characters to remove (optional, defaults to whitespace)</li> </ul>"},{"location":"operators/trim/#base-example-1-trim-whitespace","title":"\u2705 Base Example 1 \u2013 Trim Whitespace","text":""},{"location":"operators/trim/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"username\": \"  alice123  \" }\n</code></pre>"},{"location":"operators/trim/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$trim\": { \"input\": \"$username\" }\n}\n</code></pre>"},{"location":"operators/trim/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"alice123\"\n</code></pre>"},{"location":"operators/trim/#base-example-2-trim-slashes-from-path","title":"\u2705 Base Example 2 \u2013 Trim Slashes from Path","text":""},{"location":"operators/trim/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"path\": \"/products/shoes/\" }\n</code></pre>"},{"location":"operators/trim/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$trim\": {\n    \"input\": \"$path\",\n    \"chars\": \"/\"\n  }\n}\n</code></pre>"},{"location":"operators/trim/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"products/shoes\"\n</code></pre>"},{"location":"operators/trim/#ecommerce-example-clean-category-labels","title":"\ud83e\uddf1 Ecommerce Example \u2013 Clean Category Labels","text":""},{"location":"operators/trim/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"cleanCategory\": {\n        \"$trim\": {\n          \"input\": \"$items.category\",\n          \"chars\": \"-\"\n        }\n      },\n      \"product\": \"$items.name\"\n    }\n  }\n]\n</code></pre>"},{"location":"operators/trim/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    { \"name\": \"Sneakers\", \"category\": \"--footwear--\" },\n    { \"name\": \"Watch\", \"category\": \"--accessories--\" }\n  ]\n}\n</code></pre>"},{"location":"operators/trim/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"cleanCategory\": \"footwear\", \"product\": \"Sneakers\" },\n  { \"cleanCategory\": \"accessories\", \"product\": \"Watch\" }\n]\n</code></pre>"},{"location":"operators/trim/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Strip extra characters (slashes, dashes, spaces)</li> <li>Normalize labels and IDs</li> <li>Clean user input</li> </ul>"},{"location":"operators/trim/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$ltrim</code>, <code>$rtrim</code>, <code>$toLower</code>, <code>$toUpper</code></li> </ul>"},{"location":"operators/trim/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>If <code>chars</code> is omitted, whitespace is trimmed by default.</li> <li>Useful before comparisons and filtering.</li> </ul>"},{"location":"operators/trunc/","title":"$trunc","text":"<p>Truncates a number toward zero to a specified precision (defaults to whole numbers).</p>"},{"location":"operators/trunc/#syntax","title":"Syntax","text":"<pre><code>{ \"$trunc\": [ &lt;numberExpression&gt;, &lt;placeExpression?&gt; ] }\n</code></pre> <ul> <li>Omit <code>place</code> to drop everything after the decimal.</li> <li>Use a positive place to keep decimal digits, or a negative place to truncate to tens, hundreds, etc.</li> </ul>"},{"location":"operators/trunc/#example","title":"Example","text":""},{"location":"operators/trunc/#input","title":"Input","text":"<pre><code>{ \"exchangeRate\": 74.987 }\n</code></pre>"},{"location":"operators/trunc/#stage","title":"Stage","text":"<pre><code>{ \"$project\": { \"roundedDown\": { \"$trunc\": [\"$exchangeRate\", 2] } } }\n</code></pre>"},{"location":"operators/trunc/#output","title":"Output","text":"<pre><code>{ \"roundedDown\": 74.98 }\n</code></pre>"},{"location":"operators/type/","title":"$type","text":"<p>The <code>$type</code> operator returns a string that identifies the BSON type of the input value.</p>"},{"location":"operators/type/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$type\": &lt;expression&gt; }\n</code></pre> <p>Returns values such as <code>\"string\"</code>, <code>\"int\"</code>, <code>\"double\"</code>, <code>\"date\"</code>, <code>\"bool\"</code>, <code>\"object\"</code>, <code>\"array\"</code>, etc.</p>"},{"location":"operators/type/#base-example-detect-type","title":"\u2705 Base Example \u2013 Detect Type","text":""},{"location":"operators/type/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"price\": 99.99 }\n</code></pre>"},{"location":"operators/type/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$type\": \"$price\" }\n</code></pre>"},{"location":"operators/type/#output","title":"\ud83d\udce4 Output","text":"<pre><code>\"double\"\n</code></pre>"},{"location":"operators/type/#type-of-nested-field","title":"\u2705 Type of Nested Field","text":""},{"location":"operators/type/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"metadata\": { \"tags\": [\"new\", \"hot\"] } }\n</code></pre>"},{"location":"operators/type/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{ \"$type\": \"$metadata.tags\" }\n</code></pre>"},{"location":"operators/type/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>\"array\"\n</code></pre>"},{"location":"operators/type/#ecommerce-example-validate-price-type-before-conversion","title":"\ud83e\uddf1 Ecommerce Example \u2013 Validate Price Type Before Conversion","text":""},{"location":"operators/type/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"priceType\": { \"$type\": \"$price\" },\n      \"price\": 1\n    }\n  }\n]\n</code></pre>"},{"location":"operators/type/#input-documents","title":"\ud83d\udce5 Input Documents","text":"<pre><code>[\n  { \"name\": \"Phone\", \"price\": \"699\" },\n  { \"name\": \"Laptop\", \"price\": 1499.99 }\n]\n</code></pre>"},{"location":"operators/type/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"product\": \"Phone\", \"priceType\": \"string\", \"price\": \"699\" },\n  { \"product\": \"Laptop\", \"priceType\": \"double\", \"price\": 1499.99 }\n]\n</code></pre>"},{"location":"operators/type/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Debug complex fields before transformation</li> <li>Conditional conversion or validation</li> <li>Auditing unknown schemas</li> </ul>"},{"location":"operators/type/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$convert</code>, <code>$ifNull</code>, <code>$cond</code>, <code>$literal</code></li> </ul>"},{"location":"operators/type/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Useful when working with inconsistent or dynamic data sources</li> <li>Helps avoid runtime conversion errors</li> </ul>"},{"location":"operators/unsetField/","title":"$unsetField","text":"<p>The <code>$unsetField</code> operator removes a field from a document dynamically.</p>"},{"location":"operators/unsetField/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$unsetField\": {\n    \"field\": &lt;fieldName&gt;,\n    \"input\": &lt;document&gt;\n  }\n}\n</code></pre> <ul> <li><code>field</code>: The field name to remove (string or expression)</li> <li><code>input</code>: The document to modify</li> </ul>"},{"location":"operators/unsetField/#base-example-remove-field","title":"\u2705 Base Example \u2013 Remove Field","text":""},{"location":"operators/unsetField/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"a\": 1, \"b\": 2 }\n</code></pre>"},{"location":"operators/unsetField/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$unsetField\": {\n    \"field\": \"b\",\n    \"input\": \"$$ROOT\"\n  }\n}\n</code></pre>"},{"location":"operators/unsetField/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"a\": 1 }\n</code></pre>"},{"location":"operators/unsetField/#remove-dynamic-field","title":"\u2705 Remove Dynamic Field","text":""},{"location":"operators/unsetField/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"fields\": { \"x\": 1, \"y\": 2 }, \"removeKey\": \"y\" }\n</code></pre>"},{"location":"operators/unsetField/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$unsetField\": {\n    \"field\": \"$removeKey\",\n    \"input\": \"$fields\"\n  }\n}\n</code></pre>"},{"location":"operators/unsetField/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>{ \"x\": 1 }\n</code></pre>"},{"location":"operators/unsetField/#ecommerce-example-remove-obsolete-attribute","title":"\ud83e\uddf1 Ecommerce Example \u2013 Remove Obsolete Attribute","text":""},{"location":"operators/unsetField/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  {\n    \"$project\": {\n      \"product\": \"$name\",\n      \"cleanAttributes\": {\n        \"$unsetField\": {\n          \"field\": \"legacyCode\",\n          \"input\": \"$attributes\"\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/unsetField/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Backpack\",\n  \"attributes\": {\n    \"color\": \"Blue\",\n    \"legacyCode\": \"DEPRECATED\"\n  }\n}\n</code></pre>"},{"location":"operators/unsetField/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Backpack\",\n  \"cleanAttributes\": {\n    \"color\": \"Blue\"\n  }\n}\n</code></pre>"},{"location":"operators/unsetField/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Clean up deprecated or legacy fields</li> <li>Sanitize sensitive data</li> <li>Apply dynamic field deletions</li> </ul>"},{"location":"operators/unsetField/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$setField</code>, <code>$getField</code>, <code>$objectToArray</code>, <code>$project</code>, <code>$unset</code></li> </ul>"},{"location":"operators/unsetField/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>Returns a new document with the field removed</li> <li>Dynamic field names supported</li> </ul>"},{"location":"operators/zip/","title":"$zip","text":"<p>The <code>$zip</code> operator merges multiple arrays element-wise into a single array of arrays.</p>"},{"location":"operators/zip/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$zip\": {\n    \"inputs\": [ &lt;array1&gt;, &lt;array2&gt;, ... ],\n    \"useLongestLength\": &lt;bool&gt;,  // optional\n    \"defaults\": [ &lt;default1&gt;, &lt;default2&gt;, ... ] // optional\n  }\n}\n</code></pre> <ul> <li><code>inputs</code>: The arrays to zip together</li> <li><code>useLongestLength</code>: If <code>true</code>, extends shorter arrays with <code>null</code> or <code>defaults</code></li> <li><code>defaults</code>: Values to use when an array runs out of elements</li> </ul>"},{"location":"operators/zip/#base-example-merge-name-and-age-lists","title":"\u2705 Base Example \u2013 Merge Name and Age Lists","text":""},{"location":"operators/zip/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"names\": [\"Alice\", \"Bob\", \"Charlie\"],\n  \"ages\": [30, 25, 35]\n}\n</code></pre>"},{"location":"operators/zip/#expression","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$zip\": {\n    \"inputs\": [\"$names\", \"$ages\"]\n  }\n}\n</code></pre>"},{"location":"operators/zip/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[[\"Alice\", 30], [\"Bob\", 25], [\"Charlie\", 35]]\n</code></pre>"},{"location":"operators/zip/#with-unequal-length-arrays-and-defaults","title":"\u2705 With Unequal Length Arrays and Defaults","text":""},{"location":"operators/zip/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"a\": [1, 2],\n  \"b\": [\"x\"]\n}\n</code></pre>"},{"location":"operators/zip/#expression_1","title":"\ud83d\udccc Expression","text":"<pre><code>{\n  \"$zip\": {\n    \"inputs\": [\"$a\", \"$b\"],\n    \"useLongestLength\": true,\n    \"defaults\": [null, \"NA\"]\n  }\n}\n</code></pre>"},{"location":"operators/zip/#output_1","title":"\ud83d\udce4 Output","text":"<pre><code>[[1, \"x\"], [2, \"NA\"]]\n</code></pre>"},{"location":"operators/zip/#ecommerce-example-merge-features-and-availability","title":"\ud83e\uddf1 Ecommerce Example \u2013 Merge Features and Availability","text":""},{"location":"operators/zip/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"product\": \"$items.name\",\n      \"featuresZipped\": {\n        \"$zip\": {\n          \"inputs\": [\"$items.features\", \"$items.available\"],\n          \"useLongestLength\": true,\n          \"defaults\": [\"Unknown\", false]\n        }\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"operators/zip/#input-document_2","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"items\": [\n    {\n      \"name\": \"Table\",\n      \"features\": [\"Wood\", \"Foldable\"],\n      \"available\": [true]\n    }\n  ]\n}\n</code></pre>"},{"location":"operators/zip/#output_2","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"product\": \"Table\",\n    \"featuresZipped\": [[\"Wood\", true], [\"Foldable\", false]]\n  }\n]\n</code></pre>"},{"location":"operators/zip/#common-use-cases","title":"\ud83d\udd27 Common Use Cases","text":"<ul> <li>Merge parallel arrays for display</li> <li>Create structured tabular pairs</li> <li>Fill missing values dynamically</li> </ul>"},{"location":"operators/zip/#related-operators","title":"\ud83d\udd17 Related Operators","text":"<ul> <li><code>$map</code>, <code>$concatArrays</code>, <code>$reduce</code>, <code>$arrayElemAt</code></li> </ul>"},{"location":"operators/zip/#notes","title":"\ud83e\udde0 Notes","text":"<ul> <li>All arrays must be of equal length unless <code>useLongestLength</code> is <code>true</code>.</li> <li>Combine with <code>$map</code> to format zipped output.</li> </ul>"},{"location":"platform/overview/","title":"Platform Architecture Overview","text":"<p>High-level map of Fluxion modules, runtimes, and extension points. Use this to select the right entry point and understand how pieces compose.</p>"},{"location":"platform/overview/#1-layered-architecture","title":"1. Layered architecture","text":"<pre><code>Connect  \u2192  Streaming Engine  \u2192  Rule Engine\n                  \u2502                \u2502\n          \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502                \u2502\n                  \u25bc                \u2502\n              Fluxion Core  \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n                  Enrich\n</code></pre> Layer Purpose Fluxion Core Deterministic aggregation engine (stages/operators), expression evaluator, metrics, registries. Fluxion Connect Source/sink connectors (Kafka, Event Hubs, MongoDB, custom SPI). Fluxion Enrich Operators that call external systems (<code>$httpCall</code>, <code>$sqlQuery</code>). Streaming Engine Always-on pipelines (fetch \u2192 transform \u2192 deliver \u2192 checkpoint). Rule Engine JSON/DSL-defined rule sets for decisioning and governance workflows."},{"location":"platform/overview/#2-module-checklist","title":"2. Module checklist","text":"Feature Module Reference Aggregation runtime <code>fluxion-core</code> Core Overview Connectors <code>fluxion-connect</code> Connect Overview Enrichment operators <code>fluxion-enrich</code> Enrich Overview Rule engine <code>fluxion-rules</code> Rule Engine Overview Streaming engine (contained in <code>fluxion-core</code> module today) Streaming Overview"},{"location":"platform/overview/#3-selecting-an-entry-point","title":"3. Selecting an entry point","text":"Need Start here Run aggregation pipelines in-process <code>fluxion-core</code> (see Usage Guide) Ingest from Kafka/Event Hubs/Mongo <code>fluxion-connect</code> + Streaming Engine Enrich with HTTP/SQL lookups <code>fluxion-enrich</code> operators Declarative rule authoring/governance <code>fluxion-rules</code> (Rule Engine) Long-running stream processing Streaming Engine (with Connect + Enrich)"},{"location":"platform/overview/#4-extending-fluxion","title":"4. Extending Fluxion","text":"<ol> <li>Add capabilities at the lowest layer.</li> <li>New operator/stage \u2192 contribute to Fluxion Core.</li> <li>New connector \u2192 implement SPI in Fluxion Connect.</li> <li>New enrichment behaviour \u2192 extend Fluxion Enrich.</li> <li>Expose through runtimes. Surface new operators/connectors to rule/streaming    engines so users can adopt them immediately.</li> <li>Document + test. Update docs/tests alongside the new contribution to keep    assistants and developers aligned.</li> </ol>"},{"location":"platform/overview/#5-integration-patterns","title":"5. Integration patterns","text":"Scenario Modules involved Notes Request/response service with pipeline execution Core Cache parsed stages, use <code>PipelineExecutor</code>. Manual approval workflow (Temporal) Core + Rules + Workflow integration See Temporal Bridge. Real-time enrichment from Kafka to HTTP Core + Connect + Enrich + Streaming Use streaming pipeline with Kafka source and HTTP sink/operators. Analytics batch job with JDBC source Core + custom source Extend streaming SPI or use executor in batch mode."},{"location":"platform/overview/#6-references-next-steps","title":"6. References &amp; next steps","text":"<ul> <li>Core Overview \u2013 runtime APIs and extension points.</li> <li>Connect Overview \u2013 built-in connectors and SPI.</li> <li>Enrich Overview \u2013 HTTP/SQL operators.</li> <li>Streaming Overview \u2013 pipeline lifecycle, error policies.</li> <li>Rule Engine Overview \u2013 declarative rule runtime.</li> <li>Usage Guide \u2013 end-to-end pipeline execution tutorial.</li> <li>Examples Gallery \u2013 ready-made pipelines to copy.</li> </ul> <p>This overview keeps the module map clear; dive into the linked guides for deeper, LLM-ready documentation.</p>"},{"location":"rules/","title":"Rule Engine Overview","text":"<p>Fluxion\u2019s rule engine lets you wrap aggregation pipelines in declarative rules. Each rule evaluates a document, tracks salience (priority), executes actions, and exposes hooks/state you can integrate into services or workflow engines.</p>"},{"location":"rules/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Fluxion modules <code>fluxion-core</code>, <code>fluxion-rules</code>, optional <code>fluxion-enrich</code> for external lookups. Runtime JVM service/worker where you evaluate rules. DSL / JSON Rule-set definitions (JSON DSL or builder API). Persistence (optional) Wherever you store rule sets (Git, DB, config service)."},{"location":"rules/#2-core-components","title":"2. Core components","text":"Component Purpose <code>RuleDefinition</code> Declares stages, salience, actions, metadata, and hooks for one rule. <code>RuleSet</code> Ordered collection of rules plus shared metadata and hooks. <code>RuleEngine</code> Evaluates documents against a rule set, returning passes and shared attributes. <code>RuleAction</code> Custom business logic triggered when a rule passes. <code>RuleHook</code> / <code>RuleSetHook</code> Pre/post evaluation callbacks for enrichment or auditing. <code>RuleValidator</code> / <code>RuleLintCollector</code> Static analysis to catch issues before runtime."},{"location":"rules/#platform-context","title":"Platform context","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    documents     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    passes/actions     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Connectors \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 \u2502 RuleEngine \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6 \u2502 Downstream \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2514\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2514\u2500\u2500\u2500\u2500\u2500\u25b2\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                      \u2502                                  \u2502\n                                      \u2502 Rule DSL / API                   \u2502 Shared attrs\n                                      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>For a full stack view (Core \u2194 Connect \u2194 Enrich \u2194 Engines), see the Platform Architecture overview.</p>"},{"location":"rules/#3-evaluation-flow","title":"3. Evaluation flow","text":"<ol> <li>Document ingestion \u2013 Connectors or application code supply a <code>Document</code>.</li> <li>Rule iteration \u2013 Rules are sorted by salience (highest first). Missing    stages or unsupported operators are rejected during validation.</li> <li>Pipeline execution \u2013 Each rule runs its Fluxion stages via <code>RulePipelineExecutor</code>.</li> <li>Shared state update \u2013 Rules can read/write <code>sharedAttributes</code> across the    entire rule set.</li> <li>Actions &amp; hooks \u2013 On pass, actions run and hooks fire (<code>before/after</code>).</li> <li>Result assembly \u2013 <code>RuleEvaluationResult</code> captures passes, shared state,    debug traces, and stage metrics.</li> </ol>"},{"location":"rules/#4-capabilities-at-a-glance","title":"4. Capabilities at a glance","text":"<ul> <li>Pipeline native \u2013 Reuse the same stages/operators as streaming pipelines.</li> <li>Salience &amp; priority \u2013 Control the order in which rules execute.</li> <li>Shared context \u2013 Pass data between rules via <code>sharedAttributes</code>.</li> <li>Hooks &amp; actions \u2013 Extend with ServiceLoader-based SPIs for side effects   (HTTP calls, notifications, auditing, etc.).</li> <li>Debug tracing \u2013 Enable stage-by-stage traces for troubleshooting.</li> <li>Static linting \u2013 <code>RuleValidator</code> and <code>RuleLintCollector</code> catch issues   before runtime (missing stages, duplicate salience, unsupported operators).</li> </ul>"},{"location":"rules/#5-integration-checklist","title":"5. Integration checklist","text":"Task Reference Load rule sets <code>fluxion-rules/src/main/java/.../RuleSetLoader</code> or custom code. Validate rules <code>RuleValidator.validateRule(...)</code>, <code>RuleLintCollector.collect(...)</code>. Evaluate <code>RuleEngine.evaluate(...)</code> or <code>RuleEngine.execute(...)</code> (with actions). Inspect results <code>RuleEvaluationResult</code> (passes, shared attributes, debug trace). Extend actions/hooks Implement <code>RuleAction</code>, <code>RuleHook</code>, or <code>RuleSetHook</code> via ServiceLoader."},{"location":"rules/#6-reading-guide","title":"6. Reading guide","text":"Section Use it when Quick Start Try the engine with runnable samples. Authoring Rule Sets Design JSON DSL or builder-based rule definitions. DSL Reference Need field-by-field schema. Runtime Execution Embed <code>RuleEngine</code> in a service or worker. API Reference Explore domain types (<code>RuleDefinition</code>, <code>RuleSet</code>, etc.). Validation &amp; Linting Build authoring tooling or CI checks. Testing &amp; Debugging Add regression tests and debug tracing. Extensions &amp; SPIs Publish custom stages/actions/hooks. Best Practices Naming, salience, and structure tips. Lifecycle &amp; Governance Manage versions, approvals, deployments. Integration Guide Wire rules into jobs or microservices. Tooling &amp; IDE Support IDE/editor integration notes. Examples Copy/paste walkthroughs."},{"location":"rules/#7-useful-source-files","title":"7. Useful source files","text":"Path Why it matters <code>fluxion-rules/src/main/java/.../RuleEngine.java</code> Core evaluation logic. <code>fluxion-rules/src/main/java/.../RuleDefinition.java</code> Builder + metadata for rules. <code>fluxion-rules/src/main/java/.../RuleSet.java</code> Salience ordering, hooks, metadata storage. <code>fluxion-rules/src/main/java/.../RuleValidator.java</code> Validation entry point. <code>fluxion-rules/src/test/java/...</code> Sample rule JSON, unit tests, linting examples. <p>Use these references when implementing rule authoring tools, validation pipelines, or runtime integrations.</p>"},{"location":"rules/api/","title":"API Reference","text":"<p>This page summarises the primary Java types involved in Fluxion's rule engine. It is not a replacement for Javadoc, but it captures the relationships and most frequently used methods so tooling and documentation generators can cross-link them.</p>"},{"location":"rules/api/#domain-model","title":"Domain model","text":"Type Purpose Key methods <code>RuleDefinition</code> Immutable description of a single rule (pipeline + actions + metadata). <code>name()</code>, <code>salience()</code>, <code>condition()</code>, <code>actions()</code>, <code>hooks()</code> <code>RuleDefinition.Builder</code> Fluent builder that validates on <code>build()</code>. <code>salience(int)</code>, <code>condition(RuleCondition)</code>, <code>addAction(RuleAction)</code>, <code>addHook(RuleHook)</code>, <code>addHookByName(String)</code> <code>RuleCondition</code> Wrapper around a list of <code>Stage</code> objects. <code>RuleCondition.pipeline(List&lt;Stage&gt;)</code>, <code>pipeline()</code> <code>RuleSet</code> Immutable collection of rules plus shared metadata and hooks. <code>rules()</code>, <code>hooks()</code>, <code>metadata()</code> <code>RuleSet.Builder</code> Fluent builder for rule sets. <code>addRule(RuleDefinition)</code>, <code>addHook(RuleSetHook)</code>, <code>addHookByName(String)</code>"},{"location":"rules/api/#runtime-types","title":"Runtime types","text":"Type Purpose Key methods <code>RuleEngine</code> Evaluates documents against a rule set. <code>evaluate(List&lt;Document&gt;, RuleSet)</code>, <code>evaluate(..., boolean debug)</code>, <code>execute(...)</code> <code>RuleEvaluationResult</code> Outcome for a single document. <code>document()</code>, <code>passes()</code>, <code>sharedAttributes()</code>, <code>ruleContexts()</code> <code>RulePass</code> Indicates a rule whose condition pipeline passed. <code>rule()</code>, <code>context()</code>, <code>actions()</code> <code>RuleExecutionContext</code> Mutable per-rule context that actions and hooks can use. <code>attributes()</code>, <code>putAttribute(String, Object)</code>, <code>sharedAttributes()</code>, <code>transformedDocuments()</code>, <code>debugTrace()</code> <code>RuleDebugStageTrace</code> (<code>ai.fluxion.rules.debug</code>) Debug snapshot for a single stage. <code>index()</code>, <code>operator()</code>, <code>inputs()</code>, <code>outputs()</code>, <code>filtered()</code>, <code>transformed()</code>, <code>error()</code> <code>RulePipelineExecutor</code> Internal adapter between rules and the core <code>PipelineExecutor</code>. <code>execute(RuleDefinition, RuleExecutionContext)</code>"},{"location":"rules/api/#registry-spi-types","title":"Registry &amp; SPI types","text":"Type Purpose <code>RuleActionRegistry</code> Global registry of <code>RuleAction</code> instances. Supports manual registration (<code>register</code>, <code>unregister</code>) and automatic discovery via <code>RuleActionContributor</code> SPI. <code>RuleHookRegistry</code> Resolves named <code>RuleHook</code> and <code>RuleSetHook</code> instances, including SPI-contributed hooks. <code>StageRegistry</code> Core registry of aggregation stages. Extended via <code>StageHandlerContributor</code> to publish custom operators. <code>RuleActionContributor</code> SPI interface for publishing action implementations via ServiceLoader. <code>RuleHookContributor</code> SPI interface for rule/rule-set hooks. <code>StageHandlerContributor</code> SPI interface for new aggregation stages."},{"location":"rules/api/#parser-validation-classes","title":"Parser &amp; validation classes","text":"Type Purpose Notes <code>RuleDslParser</code> Converts JSON DSL into <code>RuleSet</code>. Use <code>parseWithLints</code> for non-throwing validation. <code>RuleParseResult</code> Holds parsed rule set plus lint list. <code>hasRuleSet()</code>, <code>ruleSet()</code>, <code>hasLints()</code>, <code>lints()</code> <code>RuleLintCollector</code> Static lint discovery for rule definitions and DSL payloads. <code>collect(RuleDefinition)</code>, <code>collectFromDsl(JsonNode)</code> <code>RuleLint</code> Structured lint message. <code>type()</code>, <code>message()</code>, <code>ruleName()</code>, <code>context()</code> <code>RuleLintType</code> Enum of lint categories (<code>MISSING_STAGE</code>, <code>UNSUPPORTED_OPERATOR</code>, <code>DUPLICATED_SALIENCE</code>). <code>RuleValidator</code> Strict validation invoked during builder <code>build()</code>. Throws <code>RuleValidationException</code> on failure."},{"location":"rules/api/#actions-hooks-and-context-interfaces","title":"Actions, hooks, and context interfaces","text":"Type Purpose <code>RuleAction</code> Functional interface invoked during <code>execute</code>. Receives a <code>RuleExecutionContext</code>. <code>RuleHook</code> Offers <code>beforeEvaluation</code> and <code>afterActions</code> hooks per rule evaluation. Default methods make implementation optional. <code>RuleSetHook</code> Offers <code>beforeRules</code> and <code>afterRules</code> hooks for the entire rule set per document."},{"location":"rules/api/#utilities-support","title":"Utilities &amp; support","text":"<ul> <li><code>RulePipelineAdapter</code> converts a <code>RuleDefinition</code> into the list of <code>Stage</code> objects required by the core pipeline executor.</li> <li><code>RulePipelineResult</code> encapsulates pipeline outputs plus <code>StageMetrics</code> so the context can expose them later.</li> <li><code>RuleTester</code> (legacy harness) has been deprecated in favour of direct <code>RuleEngine</code> usage; see Testing &amp; Debugging.</li> </ul>"},{"location":"rules/api/#package-overview","title":"Package overview","text":"<pre><code>ai.fluxion.rules.actions        // Action registry and contributors\nai.fluxion.rules.domain         // RuleDefinition, RuleSet, builders\nai.fluxion.rules.dsl            // JSON parser and lint integration\nai.fluxion.rules.engine         // Runtime execution, contexts, hooks\nai.fluxion.rules.spi            // ServiceLoader extension points\nai.fluxion.rules.validation     // RuleValidator, lint collector\n</code></pre> <p>Use this map to configure IDE auto-completion, documentation cross-links, or VS Code snippet generators.</p>"},{"location":"rules/authoring/","title":"Authoring Rule Sets","text":"<p>Rules are described with a simple JSON DSL that mirrors MongoDB-style aggregation pipelines. A rule set groups related rules and provides shared metadata and hooks.</p> <pre><code>{\n  \"id\": \"orders\",\n  \"name\": \"Order Rules\",\n  \"version\": \"1.0.0\",\n  \"metadata\": {\n    \"team\": \"risk\"\n  },\n  \"rules\": [\n    {\n      \"id\": \"rule-1\",\n      \"name\": \"Active high value order\",\n      \"description\": \"Flag active orders above $500\",\n      \"salience\": 50,\n      \"stages\": [\n        { \"$match\": { \"status\": \"active\" } },\n        { \"$match\": { \"total\": { \"$gte\": 500 } } }\n      ],\n      \"actions\": [\"mark-active\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"rules/authoring/#top-level-structure","title":"Top-level structure","text":"Field Purpose <code>id</code>, <code>name</code>, <code>version</code> Optional identifiers used for reporting and lifecycle tooling. <code>metadata</code> Arbitrary key/value pairs carried into evaluation results. <code>rules</code> Ordered array of rule definitions. The engine sorts by <code>salience</code> (highest first) at build time."},{"location":"rules/authoring/#rule-definition-fields","title":"Rule definition fields","text":"Field Purpose <code>id</code>, <code>name</code>, <code>description</code> Human readable identifiers surfaced in traces and passes. <code>salience</code> Priority value (default <code>0</code>). Higher values execute sooner. <code>stages</code> Required array describing the aggregation pipeline. Empty pipelines are rejected. <code>actions</code> Optional list of action names. Actions must be registered in <code>RuleActionRegistry</code>. <code>metadata</code> Rule-specific metadata copied into pass contexts."},{"location":"rules/authoring/#building-rule-sets-programmatically","title":"Building rule sets programmatically","text":"<p>Use the fluent builders when constructing rules directly in Java:</p> <pre><code>RuleDefinition rule = RuleDefinition.builder(\"High value\")\n    .id(\"rule-1\")\n    .salience(100)\n    .condition(RuleCondition.pipeline(List.of(\n        new Stage(Map.of(\"$match\", Map.of(\"status\", \"active\"))),\n        new Stage(Map.of(\"$match\", Map.of(\"total\", Map.of(\"$gte\", 500))))\n    )))\n    .addAction(RuleActionRegistry.resolve(\"mark-active\").orElseThrow())\n    .build();\n\nRuleSet ruleSet = RuleSet.builder()\n    .id(\"orders\")\n    .version(\"1.0.0\")\n    .addRule(rule)\n    .build();\n</code></pre> <p>DSL payloads can be parsed using <code>RuleDslParser</code>. Call <code>parseWithLints</code> to surface validation warnings without throwing exceptions, or use <code>parse</code> for strict behaviour:</p> <pre><code>RuleDslParser parser = new RuleDslParser();\nRuleParseResult result = parser.parseWithLints(jsonPayload);\nif (result.hasLints()) {\n    // surface lint messages to authors\n}\nRuleSet ruleSet = result.ruleSet();\n</code></pre>"},{"location":"rules/authoring/#referencing-actions-and-hooks","title":"Referencing actions and hooks","text":"<ul> <li>Actions are referenced by name in the DSL. They must exist in <code>RuleActionRegistry</code> (either registered manually or discovered via the SPI). If the name is missing, parsing fails.</li> <li>When using the builder API you can call <code>addAction(RuleAction)</code> directly or resolve by name: <code>RuleActionRegistry.resolve(\"mark-active\").orElseThrow()</code>.</li> <li>Hooks are typically attached in Java using <code>addHookByName(String)</code>. DSL support for named hooks can be layered on top of this API by your tooling.</li> </ul>"},{"location":"rules/authoring/#sorting-and-conflicts","title":"Sorting and conflicts","text":"<p>Rules are automatically sorted by salience (descending). Duplicate salience values generate a validation error for the conflicting rules. Missing stages or unsupported operators are also flagged during validation\u2014see the Validation &amp; Linting guide for details.</p>"},{"location":"rules/authoring/#authoring-checklist","title":"Authoring checklist","text":"<ol> <li>Choose a descriptive rule name and populate <code>description</code>.</li> <li>Assign a salience value from your team's range (see Best Practices).</li> <li>Define a minimal pipeline\u2014avoid heavy logic in a single stage.</li> <li>Attach actions by name or via the builder. Ensure actions are registered in the application.</li> <li>Add metadata fields such as <code>owner</code>, <code>runbookUrl</code>, and <code>version</code>.</li> <li>Run linting via <code>parseWithLints</code> before committing.</li> </ol>"},{"location":"rules/best-practices/","title":"Best Practices","text":"<p>These guidelines reflect lessons learned from running the rule engine in production. Following them results in predictable behaviour, clear authoring workflows, and maintainable rule libraries.</p>"},{"location":"rules/best-practices/#design-principles","title":"Design principles","text":""},{"location":"rules/best-practices/#1-keep-salience-ranges-meaningful","title":"1. Keep salience ranges meaningful","text":"<ul> <li>Reserve broad ranges for major categories (e.g. <code>1000-1999</code> for blocking rules, <code>500-999</code> for warnings, <code>0-499</code> for enrichment).</li> <li>Avoid reusing salience values\u2014duplicate salience now triggers validation errors, but a deliberate scheme makes conflicts rare.</li> </ul>"},{"location":"rules/best-practices/#2-name-rules-for-intent","title":"2. Name rules for intent","text":"<ul> <li>Use verbs and nouns (<code>\"Flag high value order\"</code>, <code>\"Allow loyalty member\"</code>).</li> <li>Match IDs and metadata to your change-management system (<code>\"order.flag.highValue\"</code>).</li> <li>Include owner team in rule-set metadata (<code>\"owner\": \"payments-risk\"</code>).</li> </ul>"},{"location":"rules/best-practices/#3-keep-pipelines-short-and-testable","title":"3. Keep pipelines short and testable","text":"<ul> <li>Prefer multiple small stages over one complex <code>$expr</code>. It improves readability and aids debug traces.</li> <li>If you need complex transformations, perform them upstream using Fluxion Enrich or dedicated services.</li> </ul>"},{"location":"rules/best-practices/#4-treat-actions-as-idempotent","title":"4. Treat actions as idempotent","text":"<ul> <li>Actions may run again if a service retries after partial failure. Ensure side effects (notifications, database writes) can handle duplicates.</li> <li>Use context attributes to guard repeated work when necessary.</li> </ul>"},{"location":"rules/best-practices/#5-centralise-shared-data-in-sharedattributes","title":"5. Centralise shared data in <code>sharedAttributes</code>","text":"<ul> <li>Rule-set hooks can pre-compute data, such as customer segments, and store them in <code>sharedAttributes</code> for downstream rules.</li> <li>Document the keys you use so actions/hooks written by other teams can rely on them.</li> </ul>"},{"location":"rules/best-practices/#authoring-workflow","title":"Authoring workflow","text":"<ol> <li>Prototype the rule locally using the Quick Start steps.</li> <li>Commit the DSL file alongside unit tests that cover positive and negative cases.</li> <li>During review, include lint output (<code>parseWithLints</code>) and example passes (see Testing &amp; Debugging).</li> <li>Publish rule-set metadata describing owner, escalation path, and version.</li> </ol>"},{"location":"rules/best-practices/#actions-and-hooks","title":"Actions and hooks","text":"<ul> <li>Register actions at application bootstrap and avoid removing them at runtime. If an action name disappears, parsing will fail.</li> <li>For SPI-provided actions/hooks, package the contributor classes and service descriptors in the same jar to simplify deployment.</li> <li>Use hooks for cross-cutting concerns (audit, telemetry) and keep actions focused on decision outcomes.</li> </ul>"},{"location":"rules/best-practices/#debugging-tips","title":"Debugging tips","text":"<ul> <li>Enable debug mode only when diagnosing an issue; truncate traces before logging in production to reduce sensitive data exposure.</li> <li>When a rule fails unexpectedly, inspect <code>RuleExecutionContext.stageMetrics()</code> to see the pipeline throughput.</li> <li>Use <code>RuleDebugStageTrace.filtered()</code> to quickly spot the stage that removed a document.</li> </ul>"},{"location":"rules/best-practices/#performance-considerations","title":"Performance considerations","text":"<ul> <li>Rule evaluation is synchronous; if you run expensive actions, offload them to asynchronous queues.</li> <li>Cache rule sets in memory; rebuilding them per request wastes CPU and re-triggers validation.</li> <li>Use <code>RuleActionRegistry.reload()</code> in tests, not production. Production services should register actions explicitly on startup.</li> </ul>"},{"location":"rules/best-practices/#documentation-hygiene","title":"Documentation hygiene","text":"<ul> <li>Link each rule to runbooks or domain docs via metadata (e.g. <code>\"runbookUrl\"</code>).</li> <li>Maintain a changelog per rule set that references version numbers or git commits.</li> <li>Encourage authors to run an automated documentation generator that extracts rule summaries\u2014this page can serve as the template.</li> </ul>"},{"location":"rules/dsl-reference/","title":"DSL Reference","text":"<p>The rule DSL is JSON-based and intentionally mirrors MongoDB aggregation syntax. This reference documents every field recognised by <code>RuleDslParser</code> so that tooling, linters, and schema validators can target the correct structure.</p>"},{"location":"rules/dsl-reference/#rule-set-schema","title":"Rule set schema","text":"<pre><code>{\n  \"id\": \"string?\",\n  \"name\": \"string?\",\n  \"version\": \"string?\",\n  \"metadata\": { \"string\": \"any\" }?,\n  \"hooks\": [\"string\"]?,        // optional when using hook registry shortcuts (future)\n  \"rules\": [ RuleDefinition ]\n}\n</code></pre>"},{"location":"rules/dsl-reference/#rule-definition","title":"Rule definition","text":"<pre><code>{\n  \"id\": \"string?\",\n  \"name\": \"string\" (default: \"rule\"),\n  \"description\": \"string?\",\n  \"salience\": \"int\" (default: 0),\n  \"stages\": [ StageObject ],\n  \"actions\": [ \"string\" ]?,\n  \"metadata\": { \"string\": \"any\" }?\n}\n</code></pre>"},{"location":"rules/dsl-reference/#stage-object","title":"Stage object","text":"<p>A stage must be a single-key object whose key is a stage operator (e.g. <code>$match</code>). The value is the operator specification.</p> <pre><code>{ \"$match\": { \"status\": \"active\" } }\n</code></pre> <p>If you need to reuse pipelines, construct them in Java and attach them via the builder APIs.</p>"},{"location":"rules/dsl-reference/#json-schema-draft-7","title":"JSON schema (draft 7)","text":"<p>If you want strict schema validation, adapt the following snippet:</p> <pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"required\": [\"rules\"],\n  \"properties\": {\n    \"id\": {\"type\": \"string\"},\n    \"name\": {\"type\": \"string\"},\n    \"version\": {\"type\": \"string\"},\n    \"metadata\": {\"type\": \"object\"},\n    \"rules\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"stages\"],\n        \"properties\": {\n          \"id\": {\"type\": \"string\"},\n          \"name\": {\"type\": \"string\"},\n          \"description\": {\"type\": \"string\"},\n          \"salience\": {\"type\": \"integer\"},\n          \"stages\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"object\",\n              \"minProperties\": 1,\n              \"maxProperties\": 1\n            }\n          },\n          \"actions\": {\n            \"type\": \"array\",\n            \"items\": {\"type\": \"string\"}\n          },\n          \"metadata\": {\"type\": \"object\"}\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"rules/dsl-reference/#programmatic-builder-equivalence","title":"Programmatic builder equivalence","text":"DSL field Builder call <code>id</code> <code>RuleDefinition.Builder.id(String)</code> <code>name</code> supplied via <code>RuleDefinition.builder(name)</code> <code>description</code> <code>RuleDefinition.Builder.description(String)</code> <code>salience</code> <code>RuleDefinition.Builder.salience(int)</code> <code>stages</code> <code>RuleCondition.pipeline(List&lt;Stage&gt;)</code> <code>actions</code> <code>RuleDefinition.Builder.addAction(RuleAction)</code> / <code>addActions(List)</code> <code>metadata</code> <code>RuleDefinition.Builder.metadata(Map)</code> <p>Rule-set level metadata and hooks follow the same pattern: <code>RuleSet.Builder.metadata(...)</code>, <code>addHook</code>, and <code>addHookByName</code>.</p>"},{"location":"rules/dsl-reference/#validation-rules","title":"Validation rules","text":"<p>Refer to Validation &amp; Linting for the precise rules enforced by <code>RuleValidator</code> and the lint collector. In summary:</p> <ul> <li><code>stages</code> must be present and non-empty.</li> <li>Each stage must contain exactly one operator.</li> <li>Operators must exist in <code>StageRegistry</code> (built-ins or contributed via SPI).</li> <li>Salience values must be unique within a rule set.</li> </ul>"},{"location":"rules/dsl-reference/#tooling-tips","title":"Tooling tips","text":"<ul> <li>Provide auto-complete for common stage operators (e.g. <code>$match</code>, <code>$project</code>), leveraging the same catalogue used for aggregator docs.</li> <li>Offer snippets that expand to <code>\"actions\": [ \"&lt;action-name&gt;\" ]</code> and <code>\"metadata\": {}</code>.</li> <li>Surface lint messages returned by <code>parseWithLints</code> inline; they contain <code>context</code> keys such as <code>stageIndex</code> and <code>operator</code> which can map to editor diagnostics.</li> </ul>"},{"location":"rules/examples/","title":"Rule Engine Examples","text":"<p>This page collects end-to-end scenarios that demonstrate how to describe, validate, and execute rules. Each example builds on the core concepts covered in the other guides.</p>"},{"location":"rules/examples/#example-1-basic-pass-with-dsl-and-java","title":"Example 1 \u2014 Basic pass with DSL and Java","text":""},{"location":"rules/examples/#dsl-definition","title":"DSL definition","text":"<pre><code>{\n  \"id\": \"orders\",\n  \"rules\": [\n    {\n      \"id\": \"active-order\",\n      \"name\": \"Active order\",\n      \"salience\": 10,\n      \"stages\": [\n        { \"$match\": { \"status\": \"active\" } }\n      ]\n    }\n  ]\n}\n</code></pre>"},{"location":"rules/examples/#parsing-validation","title":"Parsing &amp; validation","text":"<pre><code>String json = Files.readString(Path.of(\"orders-rule.json\"));\nRuleDslParser parser = new RuleDslParser();\nRuleParseResult result = parser.parseWithLints(json);\nif (result.hasLints()) {\n    throw new IllegalStateException(\"Rule issues: \" + result.lints());\n}\nRuleSet ruleSet = result.ruleSet();\n</code></pre>"},{"location":"rules/examples/#runtime-evaluation","title":"Runtime evaluation","text":"<pre><code>RuleEngine engine = new RuleEngine();\nDocument doc = new Document(Map.of(\"status\", \"active\"));\nList&lt;RuleEvaluationResult&gt; results = engine.evaluate(List.of(doc), ruleSet);\nboolean passed = !results.getFirst().passes().isEmpty();\n</code></pre>"},{"location":"rules/examples/#example-8-dsl-rule-with-actions-and-hooks","title":"Example 8 \u2014 DSL rule with actions and hooks","text":"<p>You can declare actions and hooks directly in the DSL as long as they are registered at runtime. The <code>actions</code> array references action names, while the optional <code>hooks</code> arrays reference rule and rule-set hooks by name (resolved from <code>RuleHookRegistry</code>).</p> <pre><code>{\n  \"id\": \"loyalty-offers\",\n  \"name\": \"Loyalty Offers\",\n  \"rules\": [\n    {\n      \"id\": \"gold-upgrade\",\n      \"name\": \"Upgrade loyal customers\",\n      \"description\": \"Grant gold tier when spend exceeds threshold\",\n      \"salience\": 500,\n      \"stages\": [\n        { \"$match\": { \"loyaltyTier\": \"silver\" } },\n        { \"$match\": { \"lifetimeSpend\": { \"$gte\": 2500 } } }\n      ],\n      \"actions\": [\"grant-gold-tier\", \"notify-upgrade\"],\n      \"hooks\": [\"audit-loyalty\"]\n    }\n  ],\n  \"hooks\": [\"audit-ruleset\"]\n}\n</code></pre> <p>Minimal bootstrap code:</p> <pre><code>@Configuration\nclass LoyaltyRuleConfig {\n\n    @PostConstruct\n    void registerActsAndHooks() {\n        RuleActionRegistry.register(\"grant-gold-tier\", ctx -&gt; ctx.putSharedAttribute(\"upgrade\", true));\n        RuleActionRegistry.register(\"notify-upgrade\", ctx -&gt; notificationClient.send(ctx.rule().name()));\n\n        RuleHookRegistry.registerRuleHook(\"audit-loyalty\", new LoyaltyAuditHook());\n        RuleHookRegistry.registerRuleSetHook(\"audit-ruleset\", new LoyaltyRuleSetHook());\n    }\n}\n</code></pre>"},{"location":"rules/examples/#after-registration-the-dsl-snippet-above-can-reference-those-names-the-parser-leaves-actions-and-hooks-untouched-at-runtime-the-rule-builder-resolves-them-and-attaches-the-implementations-before-evaluation","title":"After registration, the DSL snippet above can reference those names. The parser leaves <code>actions</code> and <code>hooks</code> untouched; at runtime, the rule builder resolves them and attaches the implementations before evaluation.","text":""},{"location":"rules/examples/#example-9-dsl-with-staged-metadata-and-custom-attributes","title":"Example 9 \u2014 DSL with staged metadata and custom attributes","text":"<p>Metadata travels with the rule and is exposed via <code>RuleExecutionContext.metadata()</code> and <code>RuleDefinition.metadata()</code>. This is helpful for downstream logging, tracing, or business logic.</p> <pre><code>{\n  \"id\": \"orders\",\n  \"version\": \"1.4.0\",\n  \"metadata\": {\n    \"owner\": \"payments-risk\",\n    \"runbook\": \"https://wiki/internal/runbooks/order-risk\"\n  },\n  \"rules\": [\n    {\n      \"id\": \"high-risk-order\",\n      \"name\": \"High risk order\",\n      \"salience\": 800,\n      \"metadata\": {\n        \"category\": \"fraud\",\n        \"severity\": \"high\"\n      },\n      \"stages\": [\n        { \"$match\": { \"status\": \"pending\" } },\n        { \"$match\": { \"riskScore\": { \"$gte\": 0.9 } } }\n      ],\n      \"actions\": [\"flag-order\"],\n      \"hooks\": [\"audit-order\"]\n    }\n  ]\n}\n</code></pre> <p>When evaluating a document:</p> <pre><code>RuleEvaluationResult result = engine.execute(List.of(orderDoc), ruleSet).getFirst();\nRulePass pass = result.passes().getFirst();\nMap&lt;String, Object&gt; metadata = pass.rule().metadata();\nlog.info(\"Rule {} fired with severity {}\", pass.rule().id(), metadata.get(\"severity\"));\n</code></pre>"},{"location":"rules/examples/#this-keeps-governance-data-alongside-the-rule-definition-and-makes-it-available-to-actions-hooks-and-observability-pipelines","title":"This keeps governance data alongside the rule definition and makes it available to actions, hooks, and observability pipelines.","text":""},{"location":"rules/examples/#example-2-actions-and-shared-attributes","title":"Example 2 \u2014 Actions and shared attributes","text":"<p>This scenario flags suspicious orders and records the decision in the shared context.</p> <pre><code>RuleActionRegistry.register(\"flag-order\", context -&gt; {\n    context.putAttribute(\"decision\", \"flagged\");\n    context.putSharedAttribute(\"latestDecision\", context.rule().name());\n});\n\nRuleDefinition suspicious = RuleDefinition.builder(\"Suspicious order\")\n    .salience(100)\n    .condition(RuleCondition.pipeline(List.of(\n        new Stage(Map.of(\"$match\", Map.of(\"status\", \"pending\"))),\n        new Stage(Map.of(\"$match\", Map.of(\"total\", Map.of(\"$gte\", 1000))))\n    )))\n    .addAction(RuleActionRegistry.resolve(\"flag-order\").orElseThrow())\n    .build();\n\nRuleSet ruleSet = RuleSet.builder().addRule(suspicious).build();\n\nList&lt;RuleEvaluationResult&gt; results = new RuleEngine().execute(\n    List.of(new Document(Map.of(\"status\", \"pending\", \"total\", 1500))),\n    ruleSet\n);\nRuleExecutionContext ctx = results.getFirst().passes().getFirst().context();\nassert \"flagged\".equals(ctx.attributes().get(\"decision\"));\nassert \"Suspicious order\".equals(results.getFirst().sharedAttributes().get(\"latestDecision\"));\n</code></pre> <p>When this runs in production, both shared and per-rule attributes can be logged or forwarded downstream.</p>"},{"location":"rules/examples/#example-3-hooks-for-auditing","title":"Example 3 \u2014 Hooks for auditing","text":"<p>Register hook providers via the SPI (see Extensions &amp; SPIs), then reference them by name:</p> <pre><code>RuleDefinition rule = RuleDefinition.builder(\"Audited rule\")\n    .condition(RuleCondition.pipeline(List.of(\n        new Stage(Map.of(\"$match\", Map.of(\"status\", \"active\")))\n    )))\n    .addHookByName(\"audit-before\")\n    .build();\n\nRuleSet ruleSet = RuleSet.builder()\n    .addHookByName(\"audit-ruleset\")\n    .addRule(rule)\n    .build();\n</code></pre> <p>The contributed hooks can log the evaluation timeline, enrich shared attributes, or emit metrics.</p>"},{"location":"rules/examples/#example-4-debugging-unexpected-drops","title":"Example 4 \u2014 Debugging unexpected drops","text":"<p>Enable debug mode to discover which stage filtered a document out.</p> <pre><code>Document doc = new Document(Map.of(\"status\", \"inactive\"));\nRuleEvaluationResult result = new RuleEngine()\n    .evaluate(List.of(doc), ruleSet, true)\n    .getFirst();\n\nRuleExecutionContext context = result.ruleContexts().getFirst();\nRuleDebugStageTrace trace = context.debugTrace().getFirst();\nSystem.out.printf(\"Stage %s filtered document (outputs=%d)\\n\",\n    trace.operator(), trace.outputs().size());\n</code></pre> <p>Each <code>RuleDebugStageTrace</code> contains snapshots of input/out documents, so you can attach them to support tickets or dashboards.</p>"},{"location":"rules/examples/#example-5-lint-feedback-for-authoring-tools","title":"Example 5 \u2014 Lint feedback for authoring tools","text":"<p>Provide rich feedback to rule authors before deployment:</p> <pre><code>RuleParseResult result = new RuleDslParser().parseWithLints(json);\nif (result.hasLints()) {\n    for (RuleLint lint : result.lints()) {\n        ui.notify(lint.type(), lint.message(), lint.context());\n    }\n}\n</code></pre> <p>Typical lint payload:</p> <pre><code>{\n  \"type\": \"UNSUPPORTED_OPERATOR\",\n  \"ruleName\": \"Inactive rule\",\n  \"message\": \"Rule 'Inactive rule' uses unsupported operator '$foo' at position 1\",\n  \"context\": {\n    \"stageIndex\": 0,\n    \"operator\": \"$foo\"\n  }\n}\n</code></pre> <p>Helping authors correct rules early prevents surprises during runtime deployment.</p>"},{"location":"rules/examples/#example-6-combining-multiple-rules-with-salience-bands","title":"Example 6 \u2014 Combining multiple rules with salience bands","text":"<pre><code>RuleDefinition allowLoyalty = RuleDefinition.builder(\"Allow loyalty member\")\n    .salience(200)\n    .condition(RuleCondition.pipeline(List.of(\n        new Stage(Map.of(\"$match\", Map.of(\"loyalty\", true)))\n    )))\n    .build();\n\nRuleDefinition escalateFraud = RuleDefinition.builder(\"Escalate fraud\")\n    .salience(900)\n    .condition(RuleCondition.pipeline(List.of(\n        new Stage(Map.of(\"$match\", Map.of(\"flags\", Map.of(\"$in\", List.of(\"fraud\")))))\n    )))\n    .build();\n\nRuleSet ruleSet = RuleSet.builder()\n    .addRule(allowLoyalty)\n    .addRule(escalateFraud)\n    .build();\n</code></pre> <p>Because salience values differ, the <code>escalateFraud</code> rule executes first. When both pass, two <code>RulePass</code> objects are returned, in salience order.</p>"},{"location":"rules/examples/#example-7-rule-set-hooks-for-cross-document-context","title":"Example 7 \u2014 Rule-set hooks for cross-document context","text":"<pre><code>RuleSetHook auditHook = new RuleSetHook() {\n    @Override\n    public void beforeRules(Document doc, Map&lt;String, Object&gt; shared) {\n        shared.put(\"auditStart\", Instant.now());\n    }\n\n    @Override\n    public void afterRules(Document doc, Map&lt;String, Object&gt; shared, List&lt;RulePass&gt; passes) {\n        Duration elapsed = Duration.between((Instant) shared.get(\"auditStart\"), Instant.now());\n        metrics.record(\"rules.elapsed\", elapsed.toMillis());\n    }\n};\n\nRuleSet ruleSet = RuleSet.builder()\n    .addHook(auditHook)\n    .addRule(rule)\n    .build();\n</code></pre> <p>Hook output (e.g. metrics recording) applies once per document regardless of how many rules passed.</p>"},{"location":"rules/extensions/","title":"Extending the Rule Engine","text":"<p>Fluxion exposes ServiceLoader-based service provider interfaces (SPIs) for adding behaviours without modifying core modules.</p>"},{"location":"rules/extensions/#custom-aggregation-stages","title":"Custom aggregation stages","text":"<p>Register additional aggregation stages by implementing <code>ai.fluxion.core.engine.spi.StageHandlerContributor</code> in any module on the classpath.</p> <pre><code>public final class CustomStageContributor implements StageHandlerContributor {\n    @Override\n    public Map&lt;String, StageHandler&gt; stageHandlers() {\n        return Map.of(\"$geoFence\", new GeoFenceStageHandler());\n    }\n}\n</code></pre> <p>Add the fully qualified class name to <code>META-INF/services/ai.fluxion.core.engine.spi.StageHandlerContributor</code>. <code>StageRegistry</code> automatically loads contributors at startup, making the new stage available to both pipelines and rules.</p>"},{"location":"rules/extensions/#manual-actionhook-registration","title":"Manual action/hook registration","text":"<p>You can register actions and hooks imperatively during application start-up. In a Spring Boot service, run the registration inside a <code>@PostConstruct</code> method:</p> <pre><code>@Configuration\nclass RuleEngineConfig {\n\n    @PostConstruct\n    void registerActionsAndHooks() {\n        RuleActionRegistry.register(\"flag-order\", ctx -&gt; ctx.putAttribute(\"decision\", \"flagged\"));\n        RuleHookRegistry.registerRuleHook(\"audit-before\", new AuditRuleHook());\n        RuleHookRegistry.registerRuleSetHook(\"audit-ruleset\", new AuditRuleSetHook());\n    }\n}\n</code></pre> <p>Outside of Spring, execute the same registration logic when your application boots (e.g., in your dependency injection initializer or main method). Manual registration works well for small deployments or when actions are tightly coupled to a single service.</p>"},{"location":"rules/extensions/#rule-actions","title":"Rule actions","text":"<p>Implement <code>ai.fluxion.rules.spi.RuleActionContributor</code> to publish reusable actions.</p> <pre><code>public final class CustomerActions implements RuleActionContributor {\n    @Override\n    public Map&lt;String, RuleAction&gt; ruleActions() {\n        return Map.of(\n            \"flag-customer\", context -&gt; context.putSharedAttribute(\"customerFlagged\", true)\n        );\n    }\n}\n</code></pre> <p>Declare the contributor in <code>META-INF/services/ai.fluxion.rules.spi.RuleActionContributor</code>. <code>RuleActionRegistry</code> discovers actions automatically; resolve them by name or call <code>RuleActionRegistry.reload()</code> in tests to trigger discovery.</p>"},{"location":"rules/extensions/#serviceloader-checklist","title":"ServiceLoader checklist","text":"<ol> <li>Implement the contributor interface (<code>RuleActionContributor</code>, <code>RuleHookContributor</code>, or <code>StageHandlerContributor</code>).</li> <li>Create the matching service descriptor file under <code>META-INF/services/</code> with the fully qualified class name (one per line if multiple).</li> <li>Package the implementation and descriptor in the same jar placed on the application classpath.</li> <li>Restart the application (or call the <code>reload()</code> helper in tests) to pick up new contributors.</li> <li>Use consistent naming (<code>team.feature.action-name</code>) to avoid collisions\u2014when duplicate names exist, the last one registered wins.</li> </ol> <p>ServiceLoader-based contributors shine when you maintain a catalogue of reusable actions/hooks across multiple services.</p>"},{"location":"rules/extensions/#rule-and-rule-set-hooks","title":"Rule and rule-set hooks","text":"<p>Use <code>ai.fluxion.rules.spi.RuleHookContributor</code> to add hooks that can be referenced by name when building rules or rule sets.</p> <pre><code>public final class AuditHooks implements RuleHookContributor {\n    @Override\n    public Map&lt;String, RuleHook&gt; ruleHooks() {\n        return Map.of(\"audit-before\", new AuditRuleHook());\n    }\n\n    @Override\n    public Map&lt;String, RuleSetHook&gt; ruleSetHooks() {\n        return Map.of(\"audit-ruleset\", new AuditRuleSetHook());\n    }\n}\n</code></pre> <p>With the contributor registered, builders can call:</p> <pre><code>RuleDefinition.builder(\"My Rule\")\n    .addHookByName(\"audit-before\")\n    ...\nRuleSet.builder()\n    .addHookByName(\"audit-ruleset\")\n    ...\n</code></pre>"},{"location":"rules/extensions/#testing-spis","title":"Testing SPIs","text":"<p>When writing unit tests for SPI providers, remember to place the service descriptor under <code>src/test/resources/META-INF/services/</code> so the test classpath discovers it. The project\u2019s <code>RuleActionContributorTest</code>, <code>RuleHookContributorTest</code>, and <code>StageRegistryContributorTest</code> illustrate the pattern.</p>"},{"location":"rules/extensions/#distribution-considerations","title":"Distribution considerations","text":"<ul> <li>Package contributors in the same jar as their service descriptor. Missing descriptors result in silent no-ops.</li> <li>If multiple modules register the same action/hook name, the last one wins. Adopt naming conventions (e.g. prefix with organisation/team).</li> <li>Reload behaviour: <code>RuleActionRegistry.reload()</code> and <code>RuleHookRegistry.reload()</code> rebuild the registry by re-running ServiceLoader. Use these only in tests or controlled admin flows to avoid race conditions.</li> </ul>"},{"location":"rules/extensions/#combining-spis","title":"Combining SPIs","text":"<p>You can combine custom stages and actions for vertical features. Example:</p> <ol> <li>Create a <code>$httpEnrich</code> stage via <code>StageHandlerContributor</code> that fetches external data.</li> <li>Publish an action <code>record-http-enrich</code> that stores enrichment metadata.</li> <li>Build rules that reference both constructs, allowing the engine to fetch data and tag outcomes in one pass.</li> </ol>"},{"location":"rules/glossary/","title":"Rule Engine Glossary","text":"<p>This glossary summarises the primary domain types exposed by <code>fluxion-rules</code> (and related helpers in <code>fluxion-core</code>). Use it as a quick reference when navigating APIs or designing tooling.</p> Type Purpose Key fields / data Typical usage <code>RuleDefinition</code> Immutable blueprint of a rule: it packages the metadata, salience, condition pipeline, actions, and hooks that define behaviour. <code>id</code>, <code>name</code>, <code>description</code>, <code>salience</code>, <code>RuleCondition</code>, <code>List&lt;RuleAction&gt;</code>, rule-level <code>metadata</code>, <code>List&lt;RuleHook&gt;</code>. Construct with the fluent builder or DSL; rules are sorted by salience within a <code>RuleSet</code>. <code>RuleCondition</code> Aggregation pipeline that decides whether a rule passes for a document. Ordered <code>List&lt;Stage&gt;</code> (Fluxion core stages). Created via <code>RuleCondition.pipeline(...)</code> when parsing DSL or building rules programmatically. <code>RuleSet</code> Immutable bundle of rules plus shared hooks/metadata. <code>id</code>, <code>name</code>, <code>version</code>, sorted <code>List&lt;RuleDefinition&gt;</code>, rule-set <code>metadata</code>, <code>List&lt;RuleSetHook&gt;</code>. Acts as the deployable artifact the <code>RuleEngine</code> evaluates. <code>RuleAction</code> Functional interface executed after a rule passes (during <code>execute</code>). Receives <code>RuleExecutionContext</code>; can mutate context, shared attributes, emit side effects. Register manually (<code>RuleActionRegistry.register</code>) or auto-discover via the SPI. <code>RuleHook</code> Per-rule lifecycle callbacks around evaluation/action execution. Optional overrides for <code>beforeEvaluation(...)</code> and <code>afterActions(...)</code>. Instrument or enrich individual rules without altering the engine. <code>RuleSetHook</code> Hooks that wrap evaluation of the entire rule set for a document. <code>beforeRules(...)</code>, <code>afterRules(...)</code> (with access to passes). Implement shared enrichment, auditing, telemetry across rules. <code>RuleEngine</code> Stateless orchestrator that runs documents through a <code>RuleSet</code>. Delegates to <code>RulePipelineExecutor</code>, returns <code>RuleEvaluationResult</code>. Use <code>evaluate</code> for read-only checks, <code>execute</code> to run actions; supports debug traces. <code>RulePass</code> Indicates a rule whose condition pipeline succeeded for the current document. Access to the originating <code>RuleDefinition</code>, <code>RuleExecutionContext</code>, and queued <code>RuleAction</code>s. Returned from <code>RuleEvaluationResult.passes()</code>; call <code>executeActions()</code> in post-processing. <code>RuleEvaluationResult</code> Aggregated outcome of evaluating one document. <code>document()</code>, <code>passes()</code>, <code>sharedAttributes()</code>, <code>ruleContexts()</code>. Inspect passes, per-rule contexts, debug traces, and shared state after evaluation. <code>RuleExecutionContext</code> Mutable per-rule context populated during evaluation. Original <code>Document</code>, shared attributes map, rule metadata, transformed documents, <code>StageMetrics</code>, optional debug traces. Accessible by actions, hooks, tests, and tooling. <code>RuleDebugStageTrace</code> Rule-facing wrapper over core debug traces showing stage-by-stage effects. Stage index/operator, stage spec snapshot, input/output documents, captured exception (if any). Available via <code>RuleExecutionContext.debugTrace()</code> when debug mode is enabled. <code>RuleDslParser</code> Converts JSON DSL payloads into validated <code>RuleSet</code>s. Uses Jackson; emits lint warnings with context. Call <code>parse</code> (strict) or <code>parseWithLints</code> (non-throwing) in authoring tools and CI pipelines. <code>RuleParseResult</code> Container for <code>parseWithLints</code> output. Optional <code>RuleSet</code> plus ordered <code>List&lt;RuleLint&gt;</code>. Check <code>hasLints()</code> to surface structured feedback before deployment. <code>RuleLint</code> / <code>RuleLintType</code> Structured representation of static validation issues. Lint type (<code>MISSING_STAGE</code>, <code>UNSUPPORTED_OPERATOR</code>, <code>DUPLICATED_SALIENCE</code>), descriptive message, rule name, context map. Display to rule authors; used by <code>RuleValidator</code> to enforce correctness. <code>RuleValidator</code> Strict validator invoked by builders. Throws <code>RuleValidationException</code> if any lint remains. Guarantees programmatic rule construction matches DSL validation rules. <code>RulePipelineExecutor</code> Rule-level adapter around the shared <code>PipelineExecutor</code>. Executes a rule\u2019s pipeline, records <code>StageMetrics</code>, captures debug traces. Used internally by <code>RuleEngine</code>; rarely consumed directly. <code>RulePipelineResult</code> Value object capturing pipeline output. Immutable list of resulting <code>Document</code>s and corresponding <code>StageMetrics</code>. Fed back into <code>RuleExecutionContext</code> for transformed documents and metrics. <code>RuleActionRegistry</code> Global action registry. Register, resolve, clear, reload actions. Populate at application start-up or via ServiceLoader contributors. <code>RuleHookRegistry</code> Registry for named rule and rule-set hooks. Register, resolve, clear, reload convenience methods. Enables <code>addHookByName</code> in builders so hooks can be referenced declaratively. <code>RuleActionContributor</code> / <code>RuleHookContributor</code> ServiceLoader SPIs for reusable actions/hooks. Return maps of names \u2192 implementations. Package contributors and <code>META-INF/services</code> descriptors to auto-discover behaviours. <code>PipelineExecutor</code> (core) Shared stage execution engine used across Fluxion. Executes <code>List&lt;Stage&gt;</code> pipelines, collects <code>StageMetrics</code>, supports debug tracing. Rule engine delegates here; other components (streaming, batch) can reuse it. <code>StageMetrics</code> Aggregated performance metrics per stage. Invocation counts, documents in/out, total duration, queue sizes (latest &amp; max). Exposed via <code>RuleExecutionContext.stageMetrics()</code> and exported through OpenTelemetry. <p>Need another term? Let us know\u2014this glossary is meant to evolve alongside the rule engine.</p>"},{"location":"rules/integration/","title":"Integration Guide","text":"<p>This recipe shows how to embed the rule engine directly inside a Java service. The example uses Spring Boot, but the same concepts apply to any DI framework.</p>"},{"location":"rules/integration/#1-wire-the-engine-and-rule-set","title":"1. Wire the engine and rule set","text":"<p>Create a configuration class that builds a singleton <code>RuleEngine</code> and a <code>RuleSet</code> parsed from JSON. The JSON can live on the classpath, a config service, or any storage of your choice.</p> <pre><code>@Configuration\nclass RuleEngineConfig {\n\n    private final ResourceLoader resourceLoader;\n\n    RuleEngineConfig(ResourceLoader resourceLoader) {\n        this.resourceLoader = resourceLoader;\n    }\n\n    @Bean\n    RuleEngine ruleEngine() {\n        return new RuleEngine();\n    }\n\n    @Bean\n    RuleDslParser ruleDslParser() {\n        return new RuleDslParser();\n    }\n\n    @Bean\n    RuleSet ruleSet(RuleDslParser parser) throws IOException {\n        Resource resource = resourceLoader.getResource(\"classpath:rules/orders.json\");\n        String json = resource.getContentAsString(StandardCharsets.UTF_8);\n\n        RuleParseResult result = parser.parseWithLints(json);\n        if (result.hasLints()) {\n            throw new IllegalStateException(\"Rule errors: \" + result.lints());\n        }\n        return result.ruleSet();\n    }\n\n    @PostConstruct\n    void registerActionsAndHooks() {\n        RuleActionRegistry.register(\"flag-order\", ctx -&gt; ctx.putAttribute(\"decision\", \"flagged\"));\n        // Register hooks similarly or rely on ServiceLoader contributors.\n    }\n}\n</code></pre> <p>Thread-safety guidance</p> <ul> <li>Share a single <code>RuleEngine</code> bean; it is stateless and safe across threads.</li> <li>Treat <code>RuleSet</code> as immutable; reload it atomically if you need hot updates (e.g., using <code>AtomicReference&lt;RuleSet&gt;</code>).</li> <li>Reuse <code>RuleDslParser</code> if you frequently reload rule sets.</li> </ul>"},{"location":"rules/integration/#2-inject-the-engine-where-you-need-it","title":"2. Inject the engine where you need it","text":"<pre><code>@RestController\n@RequestMapping(\"/rules\")\nclass RuleController {\n\n    private final RuleEngine ruleEngine;\n    private final Supplier&lt;RuleSet&gt; ruleSetSupplier;\n\n    RuleController(RuleEngine ruleEngine, RuleSet ruleSet) {\n        this.ruleEngine = ruleEngine;\n        this.ruleSetSupplier = () -&gt; ruleSet; // Replace with AtomicReference for hot reloads.\n    }\n\n    @PostMapping(\"/evaluate\")\n    List&lt;RuleEvaluationResult&gt; evaluate(@RequestBody Map&lt;String, Object&gt; payload,\n                                        @RequestParam(defaultValue = \"false\") boolean execute,\n                                        @RequestParam(defaultValue = \"false\") boolean debug) {\n        Document document = new Document(payload);\n        RuleSet ruleSet = ruleSetSupplier.get();\n        if (execute) {\n            return ruleEngine.execute(List.of(document), ruleSet, debug);\n        }\n        return ruleEngine.evaluate(List.of(document), ruleSet, debug);\n    }\n}\n</code></pre> <p>You can adapt the same pattern for message listeners, schedulers, or event handlers; just inject the <code>RuleEngine</code> and <code>RuleSet</code> wherever you need rule evaluation.</p>"},{"location":"rules/integration/#3-reloading-rules","title":"3. Reloading rules","text":"<p>To support dynamic updates, wrap the <code>RuleSet</code> in an <code>AtomicReference</code> and schedule a task that pulls new JSON, validates it, and swaps the reference:</p> <pre><code>@Component\nclass RuleReloader {\n\n    private final AtomicReference&lt;RuleSet&gt; ruleSetRef = new AtomicReference&lt;&gt;();\n    private final RuleDslParser parser;\n    private final RuleEngine ruleEngine;\n\n    RuleReloader(RuleDslParser parser, RuleEngine ruleEngine) {\n        this.parser = parser;\n        this.ruleEngine = ruleEngine;\n    }\n\n    @Scheduled(fixedDelayString = \"PT5M\")\n    void refresh() throws IOException {\n        String json = fetchFromS3(\"s3://config/rules/orders.json\");\n        RuleParseResult result = parser.parseWithLints(json);\n        if (!result.hasLints()) {\n            ruleSetRef.set(result.ruleSet());\n        } else {\n            log.warn(\"Skipping rule update due to lints: {}\", result.lints());\n        }\n    }\n\n    RuleSet currentRuleSet() {\n        return ruleSetRef.get();\n    }\n}\n</code></pre> <p>Pass <code>ruleSetRef::get</code> into your controllers/services so they always read the most recent version.</p>"},{"location":"rules/integration/#4-observability-debugging","title":"4. Observability &amp; debugging","text":"<ul> <li>Enable debug mode (<code>evaluate(..., true)</code>) when diagnosing issues; inspect <code>context.debugTrace()</code> for per-stage data.</li> <li>Export metrics via the built-in OpenTelemetry bridge (configure <code>OTEL_*</code> environment variables).</li> <li>Log <code>RuleEvaluationResult.passes()</code> and shared attributes to trace decisions.</li> </ul>"},{"location":"rules/integration/#5-actions-and-hooks","title":"5. Actions and hooks","text":"<ul> <li>Register actions manually (as shown above) or via ServiceLoader contributors.</li> <li>Use <code>RuleHookRegistry.addHookByName</code> / <code>RuleSet.Builder.addHookByName</code> when consuming contributors by name.</li> <li>Keep actions idempotent; they may run again if you call <code>execute</code> multiple times.</li> </ul> <p>With these patterns, you can embed Fluxion\u2019s rule engine directly into your service while retaining full control over configuration, deployment, and lifecycle.</p>"},{"location":"rules/lifecycle/","title":"Lifecycle &amp; Governance","text":"<p>The rule engine is often used in regulated domains where auditability and change control matter. This guide outlines how to manage rule versions from draft to production.</p>"},{"location":"rules/lifecycle/#artefact-lifecycle","title":"Artefact lifecycle","text":"<ol> <li>Draft \u2013 rules are authored in feature branches or sandbox environments. Validation runs locally.</li> <li>Review \u2013 lints must pass; peer review focuses on correctness, salience, and metadata quality.</li> <li>Approval \u2013 sign-off from domain owners. Record the approval in rule metadata (<code>\"approvedBy\"</code>, <code>\"ticket\"</code>).</li> <li>Deployment \u2013 rule sets are packaged with application releases or delivered to a rule registry.</li> <li>Monitoring \u2013 track pass rates, shared attributes, and action outcomes. Compare against baselines.</li> <li>Retirement \u2013 mark rules as deprecated, remove actions/hooks, and clean up metadata once retired.</li> </ol>"},{"location":"rules/lifecycle/#versioning-strategy","title":"Versioning strategy","text":"<ul> <li>Use semantic versions on rule sets (<code>1.2.0</code>). Bump:</li> <li>MAJOR when salience ordering or semantics change dramatically.</li> <li>MINOR when adding/removing rules or metadata.</li> <li>PATCH for action/hook tweaks that keep behaviour equivalent.</li> <li>Store previous versions for auditing; <code>RuleSet</code> instances are immutable so you can snapshot them easily.</li> </ul>"},{"location":"rules/lifecycle/#audit-trails","title":"Audit trails","text":"<ul> <li>Persist rule JSON and metadata for each deployment (e.g. in object storage or git).</li> <li>Log rule evaluations with rule ID, salience, pass outcome, and shared attributes.</li> <li>Use <code>RuleDebugStageTrace</code> in incident investigations; archive traces only when necessary because they may contain PII.</li> </ul>"},{"location":"rules/lifecycle/#change-management-metadata","title":"Change management metadata","text":"<p>Embed governance fields inside <code>metadata</code>:</p> <pre><code>\"metadata\": {\n  \"owner\": \"payments-risk\",\n  \"approvedBy\": \"alice@example.com\",\n  \"ticket\": \"RISK-2042\",\n  \"runbookUrl\": \"https://wiki/rules/high-value\"\n}\n</code></pre> <p>Make the owning service surface this metadata in dashboards or change logs.</p>"},{"location":"rules/lifecycle/#deployment-patterns","title":"Deployment patterns","text":"<ul> <li>Config service \u2013 store rule sets in a central service; services fetch and cache them. Provide a diff endpoint for tooling.</li> <li>Embedded jar \u2013 bundle rules with application code. Rebuild and redeploy to roll out changes; keep release notes comprehensive.</li> <li>Hybrid \u2013 embed a baseline ruleset and allow overrides from a registry at runtime. Ensure validation runs on both sources.</li> </ul>"},{"location":"rules/lifecycle/#rollback-plan","title":"Rollback plan","text":"<ul> <li>Keep the previous <code>RuleSet</code> in memory. If monitoring flags regressions, swap back instantly.</li> <li>Version metadata should include <code>supersedes</code> or <code>previousVersion</code> so tooling can automate rollback selection.</li> </ul>"},{"location":"rules/lifecycle/#multitenancy","title":"Multitenancy","text":"<p>If you host rules for multiple teams or customers:</p> <ul> <li>Namescope rule IDs (<code>tenant.ruleId</code>) and salience ranges per tenant.</li> <li>Consider separate <code>RuleEngine</code> instances or partitions to keep shared attributes isolated.</li> <li>Enforce quotas (number of rules, evaluation latency) per tenant at the orchestration layer.</li> </ul> <p>Governance ensures the rule engine remains predictable, audited, and compliant with organisational policies.</p>"},{"location":"rules/quickstart/","title":"Quick Start","text":"<p>This walkthrough shows how to go from an empty project to a running rule engine evaluation. It covers four steps:</p> <ol> <li>Declare dependencies</li> <li>Write a rule set (DSL + Java)</li> <li>Validate and load the rule</li> <li>Evaluate documents and inspect passes</li> </ol>"},{"location":"rules/quickstart/#1-dependencies","title":"1. Dependencies","text":"<p>Add the Fluxion artifacts to your build. With Maven:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;ai.fluxion&lt;/groupId&gt;\n  &lt;artifactId&gt;fluxion-core&lt;/artifactId&gt;\n  &lt;version&gt;${fluxion.version}&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n  &lt;groupId&gt;ai.fluxion&lt;/groupId&gt;\n  &lt;artifactId&gt;fluxion-rules&lt;/artifactId&gt;\n  &lt;version&gt;${fluxion.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Gradle (Kotlin DSL):</p> <pre><code>dependencies {\n    implementation(\"ai.fluxion:fluxion-core:$fluxionVersion\")\n    implementation(\"ai.fluxion:fluxion-rules:$fluxionVersion\")\n}\n</code></pre> <p>Ensure any custom actions/stages you need are on the classpath before the engine initialises.</p>"},{"location":"rules/quickstart/#2-write-a-rule-set","title":"2. Write a rule set","text":"<p>Create a JSON file (<code>rules.json</code>) describing the conditions and actions you want:</p> <pre><code>{\n  \"id\": \"orders\",\n  \"name\": \"Order Decisions\",\n  \"rules\": [\n    {\n      \"id\": \"high-value\",\n      \"name\": \"High value order\",\n      \"salience\": 100,\n      \"stages\": [\n        { \"$match\": { \"status\": \"active\" } },\n        { \"$match\": { \"total\": { \"$gte\": 500 } } }\n      ],\n      \"actions\": [\"flag-order\"]\n    }\n  ]\n}\n</code></pre> <p>Register an action somewhere during startup:</p> <pre><code>RuleActionRegistry.register(\"flag-order\", context -&gt; {\n    context.putAttribute(\"decision\", \"flagged\");\n});\n</code></pre>"},{"location":"rules/quickstart/#3-validate-and-load-the-rule","title":"3. Validate and load the rule","text":"<pre><code>RuleDslParser parser = new RuleDslParser();\nRuleParseResult result = parser.parseWithLints(Files.readString(Path.of(\"rules.json\")));\nif (result.hasLints()) {\n    result.lints().forEach(lint -&gt;\n        System.err.printf(\"[%s] %s%n\", lint.type(), lint.message())\n    );\n    throw new IllegalStateException(\"Fix lints before continuing\");\n}\nRuleSet ruleSet = result.ruleSet();\n</code></pre> <p>Alternatively, build directly in Java:</p> <pre><code>RuleDefinition rule = RuleDefinition.builder(\"High value\")\n    .salience(100)\n    .condition(RuleCondition.pipeline(List.of(\n        new Stage(Map.of(\"$match\", Map.of(\"status\", \"active\"))),\n        new Stage(Map.of(\"$match\", Map.of(\"total\", Map.of(\"$gte\", 500))))\n    )))\n    .addAction(RuleActionRegistry.resolve(\"flag-order\").orElseThrow())\n    .build();\n\nRuleSet ruleSet = RuleSet.builder().addRule(rule).build();\n</code></pre>"},{"location":"rules/quickstart/#4-evaluate-documents","title":"4. Evaluate documents","text":"<pre><code>RuleEngine engine = new RuleEngine();\nList&lt;Document&gt; documents = List.of(\n    new Document(Map.of(\"status\", \"active\", \"total\", 750)),\n    new Document(Map.of(\"status\", \"inactive\", \"total\", 1200))\n);\n\nList&lt;RuleEvaluationResult&gt; results = engine.execute(documents, ruleSet, true);\n\nfor (RuleEvaluationResult result : results) {\n    System.out.printf(\"Document %s -&gt; passes=%d shared=%s%n\",\n        result.document().toMap(),\n        result.passes().size(),\n        result.sharedAttributes()\n    );\n\n    for (RulePass rulePass : result.passes()) {\n        System.out.printf(\"  Rule %s actions=%s debug=%s%n\",\n            rulePass.rule().name(),\n            rulePass.context().attributes(),\n            rulePass.context().debugTrace()\n        );\n    }\n}\n</code></pre> <p><code>RulePass</code> exposes the rule, context, and queued actions for any rule whose condition pipeline passed. Debug mode (<code>true</code>) collects <code>RuleDebugStageTrace</code> entries so you can inspect how each stage impacted the document.</p>"},{"location":"rules/quickstart/#next-steps","title":"Next steps","text":"<ul> <li>Learn the DSL schema to build validation tooling.</li> <li>Understand runtime execution and how hooks share context.</li> <li>Explore testing strategies and the extension SPIs.</li> </ul>"},{"location":"rules/runtime/","title":"Runtime Execution Flow","text":"<p>The rule engine executes rule sets in three phases:</p> <ol> <li>Rule-set hooks (before) \u2013 <code>RuleSetHook.beforeRules</code> runs once per input document. Use it to populate shared attributes or perform pre-processing.</li> <li>Rule evaluation loop \u2013 for each rule (sorted by salience):</li> <li>A <code>RuleExecutionContext</code> is created with the source document, shared attributes, and metadata.</li> <li>Optional <code>RuleHook.beforeEvaluation</code> callbacks fire.</li> <li>The rule's pipeline is executed by <code>RulePipelineExecutor</code>, which delegates to the core <code>PipelineExecutor</code>.</li> <li>If the pipeline yields documents, a <code>RulePass</code> is produced, containing the rule, context, and associated actions.</li> <li>Rule-set hooks (after) \u2013 <code>RuleSetHook.afterRules</code> observes the aggregate passes and shared attributes for the document.</li> </ol> <p>Finally, when <code>RuleEngine.execute</code> is used instead of <code>evaluate</code>, the engine iterates over passes and runs each action's <code>execute</code> method, followed by <code>RuleHook.afterActions</code> callbacks. <code>RuleEngine.evaluate</code> stops before actions run, making it suitable for read-only evaluation or \"test this rule\" flows.</p>"},{"location":"rules/runtime/#ruleexecutioncontext","title":"RuleExecutionContext","text":"<p>The context exposes:</p> <ul> <li><code>document()</code> \u2013 original input document.</li> <li><code>sharedAttributes()</code> \u2013 mutable map shared across rules in the same rule set.</li> <li><code>attributes()</code> \u2013 rule-specific mutable map for actions and hooks.</li> <li><code>transformedDocuments()</code> \u2013 output documents returned by the rule pipeline.</li> <li><code>stageMetrics()</code> \u2013 aggregated pipeline metrics from the most recent execution.</li> <li>Optional debug trace (see below).</li> </ul>"},{"location":"rules/runtime/#debug-tracing","title":"Debug tracing","text":"<p>Call <code>RuleEngine.evaluate(..., true)</code> or <code>RuleEngine.execute(..., true)</code> to enable debug mode. When enabled, the underlying core <code>PipelineExecutor</code> captures per-stage snapshots and each <code>RuleExecutionContext</code> exposes them as a list of <code>RuleDebugStageTrace</code> entries (<code>ai.fluxion.rules.debug</code> package) containing:</p> <ul> <li>Stage index and operator name.</li> <li>Stage specification snapshot.</li> <li>Input and output document snapshots for that stage.</li> <li>Any exception thrown by the stage handler.</li> </ul> <p>This trace is available via <code>context.debugTrace()</code> and is invaluable for building rule debugging tools. Each trace entry also exposes <code>filtered()</code> / <code>transformed()</code> booleans you can use to highlight the stage that changed execution. Because the snapshots come directly from the shared core <code>PipelineExecutor</code>, the same mechanism can power future engines (e.g. streaming) without additional work.</p>"},{"location":"rules/runtime/#actions-and-hooks-at-runtime","title":"Actions and hooks at runtime","text":"<ul> <li>Actions run after the pipeline passes when <code>execute</code> is called. They can mutate the context (mutations are visible to downstream hooks) or trigger side effects.</li> <li>Rule hooks execute before and after actions, allowing you to audit or transform results.</li> <li>Rule set hooks run once per document and receive the list of passes, making them ideal for shared enrichment or aggregation.</li> </ul> <p>The runtime enforces immutability where appropriate\u2014rule definitions, rule sets, and metadata are copied defensively\u2014while contexts remain mutable to support orchestrating state. Avoid caching the context outside the evaluation call; treat it as request-scoped.</p>"},{"location":"rules/runtime/#threading-model","title":"Threading model","text":"<ul> <li><code>RuleEngine</code> is stateless and thread-safe. Share a single instance across requests.</li> <li><code>RuleExecutionContext</code> is created per rule evaluation and must not be reused.</li> <li><code>RuleActionRegistry</code> / <code>RuleHookRegistry</code> are static singletons; register contributions during application bootstrap before evaluating any rules.</li> </ul>"},{"location":"rules/runtime/#error-handling","title":"Error handling","text":"<ul> <li>If a stage throws an exception, the engine records it on the relevant <code>RuleDebugStageTrace</code> (when debugging) and propagates the exception.</li> <li>Actions should surface domain errors by throwing runtime exceptions; upstream services can translate them into HTTP/gRPC responses.</li> <li>Hooks should avoid throwing where possible\u2014log and continue to keep rule evaluation deterministic.</li> </ul>"},{"location":"rules/spring-boot-integration/","title":"Spring Boot Starter Integration","text":"<p>This guide shows how to embed the Fluxion rule engine inside a Spring Boot application using the <code>fluxion-rules-spring-boot-starter</code>. It covers dependency wiring, rule-set discovery, REST evaluation, and operational telemetry through Micrometer and Actuator.</p> <p>Requirements: Spring Boot 3.2+, Java 21, Fluxion <code>0.0.1-SNAPSHOT</code> (or later).</p>"},{"location":"rules/spring-boot-integration/#1-add-the-starter-dependency","title":"1. Add the starter dependency","text":"<p>=== \"Maven\"</p> <pre><code>```xml\n&lt;dependency&gt;\n    &lt;groupId&gt;ai.fluxion&lt;/groupId&gt;\n    &lt;artifactId&gt;fluxion-rules-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;${fluxion.version}&lt;/version&gt;\n&lt;/dependency&gt;\n```\n</code></pre> <p>=== \"Gradle\"</p> <pre><code>```kotlin\nimplementation(\"ai.fluxion:fluxion-rules-spring-boot-starter:$fluxionVersion\")\n```\n</code></pre> <p>The starter pulls in Spring Boot autoconfiguration, the Fluxion rule engine, and optional Actuator/Micrometer integrations.</p>"},{"location":"rules/spring-boot-integration/#2-provide-rule-set-json","title":"2. Provide rule-set JSON","text":"<p>Create JSON rule sets using the standard DSL. Place them on the classpath or any location reachable via Spring <code>Resource</code> patterns.</p> <pre><code>src\n \u2514\u2500\u2500 main\n     \u2514\u2500\u2500 resources\n         \u2514\u2500\u2500 rules\n             \u251c\u2500\u2500 orders.json\n             \u251c\u2500\u2500 customers.json\n             \u2514\u2500\u2500 returns.json\n</code></pre> <p>Example <code>orders.json</code>:</p> <pre><code>{\n  \"id\": \"orders\",\n  \"name\": \"Order Rules\",\n  \"version\": \"1.0.0\",\n  \"rules\": [\n    {\n      \"id\": \"high-value\",\n      \"name\": \"High value order\",\n      \"salience\": 10,\n      \"stages\": [\n        { \"$match\": { \"total\": { \"$gte\": 1000 } } }\n      ],\n      \"actions\": [\"flag-order\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"rules/spring-boot-integration/#3-configure-discovery-and-exposure","title":"3. Configure discovery and exposure","text":"<p><code>application.yml</code> example:</p> <pre><code>spring:\n  application:\n    name: fluxion-rules-service\n\nfluxion:\n  rules:\n    locations:\n      - classpath:rules/*.json\n    fail-on-error: true\n    require-explicit-id: true\n    registry-enabled: true\n    evaluation-service-enabled: true\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: health,info,fluxionRules\n</code></pre> <p>Key points:</p> <ul> <li><code>locations</code> accepts any Spring <code>Resource</code> pattern (<code>classpath*:rules/*.json</code>, <code>file:/etc/fluxion/*.json</code>, etc.).</li> <li><code>fail-on-error=false</code> lets the app boot even when some JSON is invalid; errors are reported via Actuator.</li> <li><code>registry-enabled=false</code> skips the in-memory <code>RuleSetRegistry</code> if you provide your own.</li> <li><code>evaluation-service-enabled=false</code> disables the convenience <code>RuleEvaluationService</code> bean.</li> </ul>"},{"location":"rules/spring-boot-integration/#property-reference","title":"Property reference","text":"<p>All starter settings share the <code>fluxion.rules.</code> prefix:</p> Property Description Default <code>directory</code> Legacy filesystem directory scanned when <code>locations</code> is empty. Relative paths resolve against the application working directory. <code>rules</code> <code>locations</code> List of Spring <code>Resource</code> patterns (e.g. <code>classpath*:rules/*.json</code>, <code>file:/etc/fluxion/*.json</code>). When empty the starter falls back to <code>directory</code>. <code>[]</code> <code>fail-on-error</code> Fail startup if discovery fails or JSON cannot be parsed. When <code>false</code>, errors are logged and surfaced via Actuator. <code>true</code> <code>require-explicit-id</code> Enforce rule-set <code>id</code> values in JSON. When <code>false</code>, ids fall back to the file name. <code>true</code> <code>registry-enabled</code> Publish the auto-configured <code>RuleSetRegistry</code> bean. Disable when you provide your own registry implementation. <code>true</code> <code>evaluation-service-enabled</code> Publish the convenience <code>RuleEvaluationService</code>; requires the registry bean. <code>true</code> <p>Refer to the starter configuration table whenever you need to tweak behaviour per environment.</p>"},{"location":"rules/spring-boot-integration/#4-react-to-rule-discovery","title":"4. React to rule discovery","text":"<p>Use <code>RuleSetsLoadedEvent</code> to register custom actions/hooks or kick off downstream processes once rule sets are loaded.</p> <pre><code>@Component\nclass RuleBootstrapListener {\n\n    @EventListener\n    void onRuleSetsLoaded(RuleSetsLoadedEvent event) {\n        // Register custom rule actions on first load\n        RuleActionRegistry.register(\"audit-event\", ctx -&gt;\n                log.info(\"Audit rule {}\", ctx.rule().name()));\n\n        // Wire rule-set hooks dynamically if desired\n        RuleHookRegistry.registerRuleSetHook(\"capture-metrics\", new MetricsCapturingHook());\n\n        // Inspect loaded descriptors for logging or auditing\n        event.getLoadResult().registry().descriptors()\n                .forEach(descriptor -&gt; log.info(\"Loaded rule set {} from {}\", descriptor.id(), descriptor.source()));\n    }\n}\n</code></pre> <p>Hook/action registration can also rely on ServiceLoader SPIs; the event is an optional integration point for dynamic wiring.</p>"},{"location":"rules/spring-boot-integration/#5-evaluate-requests-via-rest","title":"5. Evaluate requests via REST","text":"<p>Inject <code>RuleEvaluationService</code> to evaluate inbound JSON payloads:</p> <pre><code>@RestController\n@RequestMapping(\"/rules\")\nclass RuleEvaluationController {\n\n    private final RuleEvaluationService evaluationService;\n\n    RuleEvaluationController(RuleEvaluationService evaluationService) {\n        this.evaluationService = evaluationService;\n    }\n\n    @PostMapping(\"{ruleSetId}/evaluate\")\n    RuleEvaluationResult evaluate(@PathVariable String ruleSetId,\n                                  @RequestBody Map&lt;String, Object&gt; payload) {\n        return evaluationService.evaluate(new Document(payload), ruleSetId, true);\n    }\n}\n</code></pre> <p>When <code>RuleEvaluationService</code> is disabled, inject <code>RuleEngine</code> directly:</p> <pre><code>RuleEvaluationResult evaluateManual(String ruleSetId, Map&lt;String, Object&gt; payload) {\n    RuleSet ruleSet = registry.getRequired(ruleSetId);\n    return ruleEngine.evaluate(new Document(payload), ruleSet);\n}\n</code></pre>"},{"location":"rules/spring-boot-integration/#6-observe-health-metadata-and-metrics","title":"6. Observe health, metadata, and metrics","text":"<p>With <code>spring-boot-starter-actuator</code> on the classpath:</p> <ul> <li><code>/actuator/health/fluxionRules</code> includes <code>ruleSetCount</code>, <code>lastLoaded</code>, and a list of non-fatal discovery errors.</li> <li><code>/actuator/fluxionRules</code> returns rule-set descriptors (<code>id</code>, <code>name</code>, <code>version</code>, <code>ruleCount</code>, <code>metadata</code>, <code>source</code>) and the same error payload.</li> <li>Micrometer gauges are auto-bound: </li> <li><code>fluxion.rules.rule_sets</code> \u2013 number of loaded rule sets</li> <li><code>fluxion.rules.load_errors</code> \u2013 non-fatal error count (only increments when <code>fail-on-error=false</code>)</li> <li><code>fluxion.rules.last_loaded_epoch_millis</code> \u2013 epoch timestamp of the last successful load</li> </ul> <p>Example <code>/actuator/fluxionRules</code> response:</p> <pre><code>{\n  \"ruleSets\": [\n    {\n      \"id\": \"orders\",\n      \"name\": \"Order Rules\",\n      \"version\": \"1.0.0\",\n      \"ruleCount\": 4,\n      \"metadata\": {\n        \"owner\": \"payments-risk\"\n      },\n      \"source\": \"classpath:rules/orders.json\"\n    }\n  ],\n  \"errors\": [],\n  \"loadedAt\": \"2024-10-10T18:23:11.123Z\"\n}\n</code></pre> <p>Errors appear only when <code>fail-on-error=false</code> and the starter skips malformed files.</p> <p>Expose the endpoints via <code>management.endpoints.web.exposure.include</code>. Feed metrics into Prometheus, Datadog, etc.</p>"},{"location":"rules/spring-boot-integration/#7-testing-patterns","title":"7. Testing patterns","text":"<p>Use <code>ApplicationContextRunner</code> to verify autoconfiguration:</p> <pre><code>new ApplicationContextRunner()\n        .withConfiguration(AutoConfigurations.of(FluxionRulesAutoConfiguration.class))\n        .withPropertyValues(\"fluxion.rules.locations=classpath:rules/*.json\")\n        .run(context -&gt; {\n            assertThat(context).hasSingleBean(RuleSetRegistry.class);\n            assertThat(context.getBean(RuleSetRegistry.class).find(\"orders\")).isPresent();\n        });\n</code></pre> <p>For behavioural tests, call <code>RuleEvaluationService</code> with sample documents and assert on <code>RulePass</code> outputs.</p>"},{"location":"rules/spring-boot-integration/#8-sample-application","title":"8. Sample application","text":"<p>A runnable Spring Boot sample demonstrating YAML config, REST endpoints, and Actuator exposure lives in the <code>samples/fluxion-rules-starter-sample/</code> directory of the core repository. A dedicated samples repository will be linked here once published.</p>"},{"location":"rules/spring-boot-integration/#9-extend-rules-with-custom-actionshooks-via-the-spis-see-extensions-spis","title":"9. Extend rules with custom actions/hooks via the SPIs (see Extensions &amp; SPIs)","text":"<p>The starter honours the rule-engine Service Provider Interfaces (SPIs), so any custom actions or hooks you publish are discovered automatically at startup. This keeps behaviour reusable and infrastructure code minimal.</p>"},{"location":"rules/spring-boot-integration/#when-to-use-the-spis","title":"When to use the SPIs","text":"<ul> <li>Share a library of actions/hooks across multiple services.</li> <li>Encapsulate side-effects (notifications, persistence, metrics) in actions rather than controllers.</li> <li>Attach instrumentation or safety guards (timeouts, auditing) through hooks.</li> </ul>"},{"location":"rules/spring-boot-integration/#implementation-steps","title":"Implementation steps","text":"<ol> <li>Create a contributor class.</li> <li>Actions: implement <code>ai.fluxion.rules.spi.RuleActionContributor</code> and return a <code>Map&lt;String, RuleAction&gt;</code>.</li> <li>Hooks: implement <code>ai.fluxion.rules.spi.RuleHookContributor</code> and return maps for <code>RuleHook</code> and/or <code>RuleSetHook</code>.</li> <li>Both delegate to the shared <code>ai.fluxion.core.pipeline</code> infrastructure, so any action/hook you publish can be reused by other Fluxion engines (e.g., streaming) without additional wiring.</li> <li>Register with ServiceLoader. Add a descriptor file under <code>META-INF/services/</code> containing the fully-qualified class name.</li> <li>Package on the classpath. Include the contributor jar in your application; the starter\u2019s registries load it via <code>ServiceLoader</code>.</li> <li>Reference by name in DSL/Java. Use the action/hook names in rule JSON or builder APIs (<code>builder.addHookByName(\"audit-before\")</code>).</li> </ol>"},{"location":"rules/spring-boot-integration/#example-action-contributor","title":"Example: Action contributor","text":"<pre><code>package com.example.rules.actions;\n\nimport ai.fluxion.rules.domain.RuleAction;\nimport ai.fluxion.rules.spi.RuleActionContributor;\n\nimport java.util.Map;\n\npublic final class NotificationActionContributor implements RuleActionContributor {\n\n    @Override\n    public Map&lt;String, RuleAction&gt; ruleActions() {\n        return Map.of(\n                \"notify-upgrade\", context -&gt; notificationClient().sendUpgrade(context.document()),\n                \"flag-order\", context -&gt; context.putAttribute(\"flagged\", true)\n        );\n    }\n\n    private NotificationClient notificationClient() {\n        return NotificationClientHolder.INSTANCE;\n    }\n}\n</code></pre> <p><code>META-INF/services/ai.fluxion.rules.spi.RuleActionContributor</code>:</p> <pre><code>com.example.rules.actions.NotificationActionContributor\n</code></pre>"},{"location":"rules/spring-boot-integration/#example-hook-contributor","title":"Example: Hook contributor","text":"<pre><code>package com.example.rules.hooks;\n\nimport ai.fluxion.rules.engine.RuleHook;\nimport ai.fluxion.rules.engine.RuleSetHook;\nimport ai.fluxion.rules.spi.RuleHookContributor;\n\nimport java.util.Map;\n\npublic final class AuditingHookContributor implements RuleHookContributor {\n\n    @Override\n    public Map&lt;String, RuleHook&gt; ruleHooks() {\n        return Map.of(\"audit-before\", context -&gt; auditService().logStart(context));\n    }\n\n    @Override\n    public Map&lt;String, RuleSetHook&gt; ruleSetHooks() {\n        return Map.of(\"capture-metrics\", new MetricsCapturingHook());\n    }\n}\n</code></pre> <p><code>META-INF/services/ai.fluxion.rules.spi.RuleHookContributor</code>:</p> <pre><code>com.example.rules.hooks.AuditingHookContributor\n</code></pre>"},{"location":"rules/spring-boot-integration/#testing-contributors","title":"Testing contributors","text":"<pre><code>@Test\nvoid actionContributorRegistersNames() {\n    NotificationActionContributor contributor = new NotificationActionContributor();\n    assertThat(contributor.ruleActions()).containsKey(\"notify-upgrade\");\n}\n</code></pre> <p>You can also bootstrap a Spring context (with the starter on the classpath) and assert that <code>RuleActionRegistry.resolve(\"notify-upgrade\")</code> returns the expected implementation.</p>"},{"location":"rules/spring-boot-integration/#dynamic-overrides-via-events","title":"Dynamic overrides via events","text":"<p>For experiments or environment-specific tweaks, register actions/hooks imperatively inside a <code>RuleSetsLoadedEvent</code> listener:</p> <pre><code>@EventListener\nvoid onRulesLoaded(RuleSetsLoadedEvent event) {\n    RuleActionRegistry.register(\"debug-action\", ctx -&gt; log.debug(\"rule {} fired\", ctx.rule().name()));\n}\n</code></pre> <p>These manual registrations live alongside ServiceLoader contributions and are handy for toggling behaviour based on feature flags or configuration services.</p> <p>Tip: keep action/hook names lowercase-with-dashes to avoid collisions and keep DSL payloads readable.</p>"},{"location":"rules/testing/","title":"Testing &amp; Debugging Rules","text":"<p>Reliable rules need automated tests and diagnostics. Fluxion offers several tools to make this straightforward.</p>"},{"location":"rules/testing/#unit-testing-with-ruleengine","title":"Unit testing with RuleEngine","text":"<p>Embed the rule engine in your test suite and supply documents that exercise success and failure paths.</p> <pre><code>RuleDefinition rule = RuleDefinition.builder(\"High value\")\n    .condition(RuleCondition.pipeline(List.of(\n        new Stage(Map.of(\"$match\", Map.of(\"status\", \"active\"))),\n        new Stage(Map.of(\"$match\", Map.of(\"total\", Map.of(\"$gte\", 500))))\n    )))\n    .build();\n\nRuleSet ruleSet = RuleSet.builder().addRule(rule).build();\n\nRuleEngine engine = new RuleEngine();\nList&lt;RuleEvaluationResult&gt; results = engine.execute(List.of(new Document(Map.of(\n    \"status\", \"active\",\n    \"total\", 750\n))), ruleSet);\n\nassertFalse(results.getFirst().passes().isEmpty());\n</code></pre> <p>Use dedicated tests to verify negative cases (documents that should not pass) and to assert that actions and hooks mutate context as expected.</p>"},{"location":"rules/testing/#debug-traces-in-tests","title":"Debug traces in tests","text":"<p>Enable debug mode to capture stage-level traces:</p> <pre><code>RuleEvaluationResult result = engine.evaluate(List.of(document), ruleSet, true).getFirst();\nRuleExecutionContext context = result.ruleContexts().getFirst();\nfor (RuleDebugStageTrace trace : context.debugTrace()) {\n    // inspect trace.operator(), trace.inputs(), trace.outputs()\n}\n</code></pre> <p>Capturing traces is helpful when rules become complex\u2014store the traces as golden files or log them when a test fails.</p>"},{"location":"rules/testing/#static-lint-assertions","title":"Static lint assertions","text":"<p>When testing DSL ingestion, call <code>RuleDslParser.parseWithLints</code> and assert that no lints are returned. This mimics the behaviour of authoring tools and guarantees that the definitions are valid before you deploy them.</p> <pre><code>RuleParseResult result = new RuleDslParser().parseWithLints(jsonPayload);\nassertFalse(result.hasLints(), () -&gt; \"Unexpected lint: \" + result.lints());\n</code></pre>"},{"location":"rules/testing/#ci-recommendations","title":"CI recommendations","text":"<ul> <li>Run <code>mvn test</code> (or your build equivalent) on each change; the module-level tests cover the rule engine logic.</li> <li>Add dedicated suites for your domain-specific rules using the strategies above.</li> <li>Surface lint messages as part of pull-request feedback to catch configuration issues early.</li> </ul>"},{"location":"rules/testing/#optional-golden-dataset-strategy","title":"Optional: golden dataset strategy","text":"<p>For complex rule sets, you can maintain a golden dataset (JSON documents + expected outcomes):</p> <ol> <li>Store documents in a version-controlled directory (<code>rulesets/orders/examples/*.json</code>).</li> <li>Write a test harness that loads each document, runs the rule engine, and compares passes against expected values recorded in YAML/JSON.</li> <li>When rules change, update the golden files as part of the review so diffs are easy to inspect.</li> </ol>"},{"location":"rules/testing/#optional-property-based-testing","title":"Optional: property-based testing","text":"<p>Use property-based frameworks (jqwik / QuickTheories) to generate documents and assert invariants:</p> <ul> <li>Idempotence \u2013 executing the same rule twice with the same document should produce identical passes.</li> <li>Boundary checks \u2013 ensure salience boundaries behave as expected (e.g. no rule below salience X passes when an above-threshold rule should own the decision).</li> <li>Composability \u2013 shared attributes should remain consistent regardless of rule execution order (the engine enforces salience ordering, but invariants still help).</li> </ul>"},{"location":"rules/testing/#optional-observability-driven-qa","title":"Optional: observability-driven QA","text":"<ul> <li>Export metrics for pass counts per rule and watch for sudden spikes/drops after deployments.</li> <li>Capture samples of <code>RuleExecutionContext.attributes()</code> for audit trails.</li> <li>Integrate with chaos tooling: mutate documents to ensure the rule engine fails fast when faced with unexpected fields/types.</li> </ul>"},{"location":"rules/tooling/","title":"Tooling &amp; IDE Support","text":"<p>This page explains how to build productive tooling around the rule engine, including VS Code extensions, language servers, and CI automation. The goal is to make authoring rules as ergonomic as editing source code.</p>"},{"location":"rules/tooling/#json-schema-completion","title":"JSON schema &amp; completion","text":"<ul> <li>Use the DSL Reference schema to power inline validation.</li> <li>Provide completion for common stage operators and actions. Fetch action names by interrogating your deployment registry or by reading <code>RuleActionRegistry.ruleActions()</code> at runtime.</li> <li>Suggest salience values based on best-practice ranges (see Best Practices).</li> </ul>"},{"location":"rules/tooling/#vs-code-snippet-example","title":"VS Code snippet example","text":"<pre><code>{\n  \"Add Rule\": {\n    \"scope\": \"json\",\n    \"prefix\": \"rule\",\n    \"body\": [\n      \"{\",\n      \"  \\\"name\\\": \\\"${1:Rule name}\\\",\",\n      \"  \\\"salience\\\": ${2:100},\",\n      \"  \\\"stages\\\": [\",\n      \"    { \\\"$match\\\": { \\\"${3:field}\\\": \\\"${4:value}\\\" } }\",\n      \"  ],\",\n      \"  \\\"actions\\\": [\\\"${5:action-name}\\\"]\",\n      \"}\",\n      \"$0\"\n    ]\n  }\n}\n</code></pre>"},{"location":"rules/tooling/#language-server-tips","title":"Language server tips","text":"<ul> <li>Run <code>RuleDslParser.parseWithLints</code> in the background to convert lint results into diagnostics.</li> <li>Use the <code>context</code> data from <code>RuleLint</code> (e.g. <code>stageIndex</code>) to place squiggles on the correct stage.</li> <li>Provide code actions that insert missing stages or fix operator casing.</li> </ul>"},{"location":"rules/tooling/#java-editor-assistance","title":"Java editor assistance","text":"<p>For teams writing rules in code:</p> <ul> <li>Publish live templates that scaffold the builder pattern (<code>RuleDefinition.builder(\u2026)</code>).</li> <li>Offer inspections that warn when <code>RuleDefinition.builder</code> is created without calling <code>.condition(...)</code>.</li> <li>Use static analysis to ensure <code>RuleSet.Builder.addRule</code> is followed by <code>.build()</code> before evaluation.</li> </ul>"},{"location":"rules/tooling/#cli-and-ci-integrations","title":"CLI and CI integrations","text":"<ul> <li>Add a <code>rules lint</code> CLI command that wraps <code>parseWithLints</code> and prints lints in SARIF or GitHub annotation format.</li> <li>Integrate linting and unit tests into pull-request workflows; fail the build when lints are present.</li> <li>Generate summary reports listing salience, actions, and metadata for every rule.</li> </ul>"},{"location":"rules/tooling/#debug-trace-visualisation","title":"Debug trace visualisation","text":"<ul> <li>Build a viewer that formats <code>RuleDebugStageTrace</code> entries as a table. Include stage index, operator, input size, output size, and diff summary.</li> <li>For VS Code, render the trace in a WebView when the user runs a \u201cTest rule\u201d command.</li> </ul>"},{"location":"rules/tooling/#example-vs-code-extension-workflow","title":"Example VS Code extension workflow","text":"<ol> <li>Activation \u2013 extension activates on <code>rules.json</code> files.</li> <li>Schema association \u2013 registers the JSON schema and snippets above.</li> <li>Lint task \u2013 exposes a command <code>fluxion.rules.lint</code> that invokes a local CLI.</li> <li>Test command \u2013 prompts for a sample JSON document, sends it to a locally running rule service, then shows passes and debug trace in the UI.</li> <li>Action registry sync \u2013 optionally polls a dev server for available action names and hot reloads completion lists.</li> </ol> <p>A clear tooling story makes the rule engine approachable for both humans and AI assistants. Use these building blocks to craft bespoke authoring experiences for your teams.</p>"},{"location":"rules/validation/","title":"Validation &amp; Linting","text":"<p>Robust validation prevents broken rules from reaching production. Fluxion provides two complementary mechanisms:</p>"},{"location":"rules/validation/#builder-time-validation","title":"Builder-time validation","text":"<p>Both <code>RuleDefinition.Builder.build()</code> and <code>RuleSet.Builder.build()</code> call <code>RuleValidator</code> which currently enforces:</p> <ul> <li>Each rule must define at least one pipeline stage.</li> <li>No stage may be empty (missing an operator).</li> <li>Every referenced operator must exist in <code>StageRegistry</code>.</li> <li>Rule sets may not contain duplicate salience values across rules.</li> </ul> <p>Failures raise <code>RuleValidationException</code> with a human-readable message.</p>"},{"location":"rules/validation/#static-lint-collection","title":"Static lint collection","text":"<p><code>RuleLintCollector</code> inspects either Java definitions or raw DSL JSON and emits structured <code>RuleLint</code> entries describing issues:</p> <ul> <li><code>MISSING_STAGE</code> \u2013 rule contains no stages or an empty entry.</li> <li><code>UNSUPPORTED_OPERATOR</code> \u2013 references an operator that is not registered.</li> <li><code>DUPLICATED_SALIENCE</code> \u2013 multiple rules share the same salience.</li> </ul> <p>Use <code>RuleDslParser.parseWithLints</code> to collect lints without immediately throwing exceptions. This is ideal for authoring tools that want to display warnings inline.</p> <pre><code>RuleParseResult result = parser.parseWithLints(json);\nif (result.hasLints()) {\n    for (RuleLint lint : result.lints()) {\n        // surface lint.type(), lint.message(), lint.context()\n    }\n}\n</code></pre> <p>The same collector backs the builder-time validation, ensuring consistent behaviour between authoring-time linting and runtime enforcement.</p>"},{"location":"rules/validation/#recommended-workflow","title":"Recommended workflow","text":"<ol> <li>Parse incoming rule definitions with <code>parseWithLints</code> and surface all lint messages to authors.</li> <li>If no lints are returned, persist or deploy the rule set as needed.</li> <li>At runtime, rely on the builders' strict validation to catch any regressions introduced through programmatic changes.</li> </ol>"},{"location":"rules/validation/#handling-lint-metadata","title":"Handling lint metadata","text":"<p>Each <code>RuleLint</code> carries a <code>context()</code> map that includes helpful pointers:</p> Key Meaning <code>stageIndex</code> Zero-based index of the stage that triggered the lint. <code>operator</code> Operator name (for <code>UNSUPPORTED_OPERATOR</code>). <code>salience</code> Conflicting salience value (for <code>DUPLICATED_SALIENCE</code>). <code>conflictsWith</code> Name of the existing rule with the same salience. <p>Map these keys to editor ranges or structured logs so users can quickly remediate.</p>"},{"location":"rules/validation/#custom-validation","title":"Custom validation","text":"<p>If you need organisation-specific checks (e.g. required metadata fields):</p> <ol> <li>Parse the rule set using <code>RuleDslParser</code>.</li> <li>Run your own validator on the resulting <code>RuleSet</code> or <code>RuleDefinition</code> objects.</li> <li>Wrap failures in a custom <code>RuleLint</code> extension or convert them to your own diagnostic format.</li> </ol> <p>Because <code>RuleSet</code> is immutable you can safely cache validated instances across requests.</p>"},{"location":"shared/llm-assistant-notes/","title":"Notes for LLM Assistants","text":"<p>Use these guardrails when generating answers or sample code for Fluxion users.</p>"},{"location":"shared/llm-assistant-notes/#supported-entry-points","title":"Supported Entry Points","text":"<ul> <li>Execution: <code>ai.fluxion.core.engine.PipelineExecutor#run(List&lt;Document&gt;, List&lt;Stage&gt;, Map&lt;String,Object&gt;)</code></li> <li>Parsing helpers: <code>DocumentParser.getStagesFromJsonArray</code> and <code>DocumentParser.getDocumentsFromJsonArray</code></li> <li>Registries: <code>OperatorRegistry</code> and <code>StageRegistry</code> (thread-safe singletons). Prefer ServiceLoader contributors over ad-hoc registration in production code.</li> </ul>"},{"location":"shared/llm-assistant-notes/#unsupported-future-work","title":"Unsupported / Future Work","text":"<ul> <li>Stages: <code>$merge</code>, <code>$out</code>, <code>$search</code>, <code>$vectorSearch</code></li> <li>Streaming orchestration (connectors, sinks) is experimental; only the Kafka source is available.</li> <li>No built-in persistence\u2014applications must save pipeline results manually.</li> </ul> <p>When asked for the items above, respond that they are not supported yet and refer to the roadmap notes in the documentation.</p>"},{"location":"shared/llm-assistant-notes/#recommended-patterns","title":"Recommended Patterns","text":"<ul> <li>Cache parsed pipelines and reuse the <code>List&lt;Stage&gt;</code> rather than re-parsing JSON for every request.</li> <li>Wrap executor invocations in try/catch and surface <code>IllegalArgumentException</code> details back to callers.</li> <li>For enrichment operators, include example HTTP conversations or SQL queries so users can adapt them quickly.</li> </ul>"},{"location":"shared/llm-assistant-notes/#terminology-reminders","title":"Terminology Reminders","text":"<ul> <li>\u201cPipeline\u201d in Fluxion currently means document-level transformation; aggregation across collections is on the roadmap.</li> <li>\u201cStage\u201d refers to Mongo-style DSL blocks (<code>$match</code>, <code>$project</code>, etc.).</li> <li>\u201cGlobals\u201d are the runtime scope (third argument to <code>run</code>) and map to the <code>$$GLOBALS</code> variable.</li> </ul> <p>Providing accurate guidance along these lines helps teams adopt Fluxion without confusion.</p>"},{"location":"shared/resilience/","title":"Resilience Patterns (Retry &amp; Circuit Breaker)","text":"<p>Fluxion leverages Resilience4j across enrichment operators (<code>$httpCall</code>, <code>$sqlQuery</code>) and streaming connectors. This guide consolidates the available options, usage tips, and testing helpers.</p>"},{"location":"shared/resilience/#1-retry-options","title":"1. Retry options","text":"Field Meaning Default <code>name</code> Identifier for the retry instance. Pipelines sharing the same name also share retry state. Derived from operator/connector name <code>maxAttempts</code> Total attempts (initial call + retries). <code>1</code> <code>waitDurationMs</code> Fixed backoff between attempts (milliseconds). <code>1000</code> <code>multiplier</code> &gt; 1.0 enables exponential backoff (<code>waitDurationMs</code> as base). <code>1.0</code> <code>retryOn</code> List of exception class names to include. <code>[]</code> <code>ignore</code> Exceptions to fail fast without retrying. <code>[]</code>"},{"location":"shared/resilience/#example","title":"Example","text":"<pre><code>{\n  \"retry\": {\n    \"name\": \"orders-db-retry\",\n    \"maxAttempts\": 3,\n    \"waitDurationMs\": 50,\n    \"multiplier\": 2.0,\n    \"retryOn\": [\"java.sql.SQLTransientException\"],\n    \"ignore\": [\"java.sql.SQLException\"]\n  }\n}\n</code></pre>"},{"location":"shared/resilience/#2-circuit-breaker-options","title":"2. Circuit breaker options","text":"Field Meaning Default <code>enabled</code> Enables/disables the breaker. <code>true</code> <code>name</code> Identifier for the breaker instance. Shared names share state. Derived from operator/connector name <code>failureRateThreshold</code> Percentage of failures that opens the breaker. <code>50</code> <code>slowCallRateThreshold</code> Percentage of slow calls counted as failures. <code>100</code> <code>slowCallDurationThresholdMs</code> Milliseconds defining a slow call. <code>60000</code> <code>waitDurationInOpenStateMs</code> Time to stay OPEN before half-open probes. <code>10000</code> <code>permittedCallsInHalfOpenState</code> Trial calls while HALF_OPEN. <code>2</code> <code>minimumNumberOfCalls</code> Minimum sample size before metrics apply. <code>10</code> <code>slidingWindowSize</code> Size of metrics window. <code>100</code> <code>slidingWindowType</code> <code>0</code> for count-based, <code>1</code> for time-based. <code>1</code> <code>record</code> / <code>ignore</code> Additional exception class names to record/ignore. <code>[]</code>"},{"location":"shared/resilience/#example_1","title":"Example","text":"<pre><code>{\n  \"circuitBreaker\": {\n    \"name\": \"user-service-breaker\",\n    \"failureRateThreshold\": 30,\n    \"slowCallRateThreshold\": 50,\n    \"slowCallDurationThresholdMs\": 2000,\n    \"waitDurationInOpenStateMs\": 30000,\n    \"minimumNumberOfCalls\": 5,\n    \"permittedCallsInHalfOpenState\": 3,\n    \"slidingWindowSize\": 20,\n    \"slidingWindowType\": 0\n  }\n}\n</code></pre>"},{"location":"shared/resilience/#3-usage-guidelines","title":"3. Usage guidelines","text":"<ul> <li>Keep retries low for idempotent operations; avoid retrying non-idempotent   writes without compensating actions.</li> <li>Use unique <code>name</code> values per downstream system to isolate metrics; reuse names   only when pipelines intentionally share state.</li> <li>Combine retry + circuit breaker for noisy/slow dependencies (retry handles   transient spikes, breaker protects against sustained failure).</li> <li>Surface breaker events to your monitoring/alerting stack (Resilience4j emits   metrics you can wire into Micrometer/Prometheus).</li> </ul>"},{"location":"shared/resilience/#4-testing-utilities","title":"4. Testing utilities","text":"<ul> <li><code>$httpCall</code>: <code>HttpCallOperator.resetResilience()</code> resets retry/breaker state in tests.</li> <li><code>$sqlQuery</code>: <code>SqlQueryOperator.resetResilience()</code> does the same for SQL.</li> <li>Streaming connectors expose similar reset hooks if needed (<code>Kafka</code>/<code>EventHub</code>).</li> </ul> <p>Run enrichment tests to validate configuration:</p> <pre><code>mvn -pl fluxion-enrich -am test\n</code></pre>"},{"location":"shared/resilience/#5-references","title":"5. References","text":"Doc Notes <code>$httpCall</code> Shows resilience usage in HTTP calls. <code>$sqlQuery</code> SQL enrichment with retry/breaker. Resilience4j Official docs. <p>Apply these settings consistently across operators and connectors to tune resilience without scattering configuration details.</p>"},{"location":"stages/","title":"Stage Reference Overview","text":"<p>Fluxion implements a large subset of MongoDB aggregation stages. Use this index to jump to detailed pages for each stage and discover related functionality.</p>"},{"location":"stages/#core-transformation-stages","title":"Core Transformation Stages","text":"<ul> <li>$match: filter documents with MongoDB query semantics.</li> <li>$project: reshape documents, include/exclude fields, compute expressions.</li> <li>$addFields / $set: append or overwrite fields with aggregation expressions.</li> <li>$unset: remove fields from documents.</li> <li>$replaceRoot / $replaceWith: promote a sub-document to the root.</li> <li>$limit and $skip: paginate documents flowing through the pipeline.</li> <li>$sort and $sortByCount: reorder documents or tally counts by expression.</li> <li>$unwind: explode arrays into individual documents.</li> </ul>"},{"location":"stages/#grouping-bucketing","title":"Grouping &amp; Bucketing","text":"<ul> <li>$group: group by <code>_id</code> and apply accumulators (<code>$sum</code>, <code>$avg</code>, etc.).</li> <li>$bucket and $bucketAuto: bucket values using explicit boundaries or automatic distribution.</li> <li>$facet: run multiple pipelines in parallel and merge the results.</li> </ul>"},{"location":"stages/#windowing-time-series","title":"Windowing &amp; Time Series","text":"<ul> <li>$setWindowFields: apply window functions with partitioning and ordering.</li> <li>$densify: fill gaps in time-series or sequence data.</li> <li>$fill: carry forward or interpolate missing values.</li> </ul>"},{"location":"stages/#lookup-integrations","title":"Lookup &amp; Integrations","text":"<ul> <li>$lookup: join with another collection or pipeline.</li> </ul>"},{"location":"stages/#advanced-specialized","title":"Advanced / Specialized","text":"<ul> <li>$merge, $out, $search, $vectorSearch: environment-specific stages with additional deployment prerequisites.</li> <li>$sampleRate: probabilistic sampling using per-document Bernoulli draws.</li> </ul> <p>Use the sidebar for the full alphabetical list. Each stage page covers payload syntax, options, and representative examples you can drop into your pipelines.</p>"},{"location":"stages/addFields/","title":"$addFields","text":"<p>The <code>$addFields</code> stage adds new fields to existing documents or modifies existing ones. It is often used to compute derived values during aggregation.</p> <p>This stage does not filter or remove documents \u2014 it enriches them.</p>"},{"location":"stages/addFields/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$addFields\": { \"fieldName\": &lt;expression&gt; } }\n</code></pre> <p>You can specify multiple fields in a single <code>$addFields</code> stage.</p>"},{"location":"stages/addFields/#ecommerce-example-add-computed-total-field-per-order","title":"\ud83d\uded2 Ecommerce Example \u2013 Add Computed <code>total</code> Field per Order","text":"<pre><code>{\n  \"$addFields\": {\n    \"total\": {\n      \"$sum\": {\n        \"$map\": {\n          \"input\": \"$items\",\n          \"as\": \"item\",\n          \"in\": {\n            \"$multiply\": [\"$$item.price\", \"$$item.quantity\"]\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/addFields/#input-document","title":"Input Document","text":"<pre><code>{\n  \"orderId\": 1,\n  \"items\": [\n    { \"name\": \"Laptop\", \"price\": 1200, \"quantity\": 1 },\n    { \"name\": \"Mouse\", \"price\": 50, \"quantity\": 2 }\n  ]\n}\n</code></pre>"},{"location":"stages/addFields/#output-document","title":"Output Document","text":"<pre><code>{\n  \"orderId\": 1,\n  \"items\": [...],\n  \"total\": 1300\n}\n</code></pre>"},{"location":"stages/addFields/#add-nested-field-shippingisfree","title":"\ud83d\udce6 Add Nested Field \u2013 <code>shipping.isFree</code>","text":"<pre><code>{\n  \"$addFields\": {\n    \"shipping.isFree\": {\n      \"$cond\": {\n        \"if\": { \"$gte\": [\"$total\", 500] },\n        \"then\": true,\n        \"else\": false\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/addFields/#input-document_1","title":"Input Document","text":"<pre><code>{\n  \"total\": 700,\n  \"shipping\": {}\n}\n</code></pre>"},{"location":"stages/addFields/#output-document_1","title":"Output Document","text":"<pre><code>{\n  \"total\": 700,\n  \"shipping\": {\n    \"isFree\": true\n  }\n}\n</code></pre>"},{"location":"stages/addFields/#modify-existing-fields","title":"\ud83d\udd01 Modify Existing Fields","text":"<pre><code>{\n  \"$addFields\": {\n    \"customerName\": { \"$toUpper\": \"$customerName\" }\n  }\n}\n</code></pre>"},{"location":"stages/addFields/#input-document_2","title":"Input Document","text":"<pre><code>{\n  \"customerName\": \"alice\"\n}\n</code></pre>"},{"location":"stages/addFields/#output-document_2","title":"Output Document","text":"<pre><code>{\n  \"customerName\": \"ALICE\"\n}\n</code></pre>"},{"location":"stages/addFields/#combine-with-system-variables","title":"\ud83e\udde0 Combine with System Variables","text":"<pre><code>{\n  \"$addFields\": {\n    \"updatedAt\": \"$$NOW\",\n    \"originalDoc\": \"$$ROOT\"\n  }\n}\n</code></pre>"},{"location":"stages/addFields/#input-document_3","title":"Input Document","text":"<pre><code>{\n  \"product\": \"Monitor\",\n  \"price\": 250\n}\n</code></pre>"},{"location":"stages/addFields/#output-document_3","title":"Output Document","text":"<pre><code>{\n  \"product\": \"Monitor\",\n  \"price\": 250,\n  \"updatedAt\": \"2024-04-14T12:00:00Z\",\n  \"originalDoc\": {\n    \"product\": \"Monitor\",\n    \"price\": 250\n  }\n}\n</code></pre>"},{"location":"stages/addFields/#special-support-remove","title":"\u26a0\ufe0f Special Support \u2013 <code>$$REMOVE</code>","text":"<p>In Fluxion, you can use <code>$$REMOVE</code> to dynamically remove a field:</p> <pre><code>{\n  \"$addFields\": {\n    \"discount\": {\n      \"$cond\": {\n        \"if\": { \"$eq\": [\"$isMember\", false] },\n        \"then\": \"$$REMOVE\",\n        \"else\": \"$discount\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/addFields/#input-document_4","title":"Input Document","text":"<pre><code>{\n  \"isMember\": false,\n  \"discount\": 20\n}\n</code></pre>"},{"location":"stages/addFields/#output-document_4","title":"Output Document","text":"<pre><code>{\n  \"isMember\": false\n}\n</code></pre>"},{"location":"stages/addFields/#behavior","title":"\ud83d\udd0d Behavior","text":"Aspect Behavior Missing fields Will be added Existing fields Will be overwritten Nested paths Supported (e.g., <code>\"a.b.c\"</code>) <code>null</code> values Allowed Removed fields Supported via <code>$$REMOVE</code>"},{"location":"stages/addFields/#used-with","title":"\u2705 Used With","text":"<ul> <li><code>$cond</code>, <code>$map</code>, <code>$filter</code>, <code>$project</code>, <code>$mergeObjects</code></li> </ul>"},{"location":"stages/addFields/#related-stages","title":"\ud83d\udd17 Related Stages","text":"<ul> <li><code>$set</code> \u2013 alias of <code>$addFields</code></li> <li><code>$project</code> \u2013 for shaping output fields</li> </ul>"},{"location":"stages/bucket/","title":"$bucket","text":"<p>The <code>$bucket</code> stage groups documents into buckets defined by specified boundaries. It is commonly used for range-based grouping (e.g., price bands, age bands).</p>"},{"location":"stages/bucket/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$bucket\": {\n    \"groupBy\": &lt;expression&gt;,\n    \"boundaries\": [ &lt;lower1&gt;, &lt;upper1&gt;, &lt;upper2&gt;, ... ],\n    \"default\": \"Other\",\n    \"output\": {\n      &lt;field&gt;: { &lt;accumulator&gt;: &lt;expression&gt; }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/bucket/#ecommerce-example-group-orders-by-total-sales-price","title":"\ud83d\udce6 Ecommerce Example \u2013 Group Orders by Total Sales Price","text":"<pre><code>{\n  \"$bucket\": {\n    \"groupBy\": \"$total\",\n    \"boundaries\": [0, 100, 500, 1000],\n    \"default\": \"Other\",\n    \"output\": {\n      \"orderCount\": { \"$sum\": 1 },\n      \"avgTotal\": { \"$avg\": \"$total\" },\n      \"maxTotal\": { \"$max\": \"$total\" }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/bucket/#input-documents","title":"Input Documents","text":"<pre><code>[\n  { \"orderId\": 1, \"total\": 45 },\n  { \"orderId\": 2, \"total\": 200 },\n  { \"orderId\": 3, \"total\": 800 },\n  { \"orderId\": 4, \"total\": 1200 }\n]\n</code></pre>"},{"location":"stages/bucket/#output-documents","title":"Output Documents","text":"<pre><code>[\n  { \"_id\": 0, \"orderCount\": 1, \"avgTotal\": 45, \"maxTotal\": 45 },\n  { \"_id\": 100, \"orderCount\": 1, \"avgTotal\": 200, \"maxTotal\": 200 },\n  { \"_id\": 500, \"orderCount\": 1, \"avgTotal\": 800, \"maxTotal\": 800 },\n  { \"_id\": \"Other\", \"orderCount\": 1, \"avgTotal\": 1200, \"maxTotal\": 1200 }\n]\n</code></pre>"},{"location":"stages/bucket/#supported-accumulators-in-bucket","title":"\u2795 Supported Accumulators in <code>$bucket</code>","text":"Accumulator Description Example Use <code>$sum</code> Total count/value Number of orders <code>$avg</code> Average of values Avg price per bucket <code>$min</code> Minimum value Lowest total <code>$max</code> Maximum value Highest total <code>$push</code> Collect values Order IDs <code>$addToSet</code> Unique entries Customer segments"},{"location":"stages/bucket/#operator-support-in-groupby-expression","title":"\ud83d\udd27 Operator Support in <code>groupBy</code> Expression","text":"Operator Example <code>$subtract</code> <code>{ \"$subtract\": [\"$price\", \"$discount\"] }</code> <code>$convert</code> <code>{ \"$convert\": { \"input\": \"$amount\", \"to\": \"int\" } }</code> <code>$cond</code> <code>{ \"$cond\": { \"if\": { \"$gt\": [\"$total\", 500] }, \"then\": \"$total\", \"else\": 0 } }</code>"},{"location":"stages/bucket/#example-with-operator-in-groupby","title":"\ud83d\udcc8 Example with Operator in <code>groupBy</code>","text":"<pre><code>{\n  \"$bucket\": {\n    \"groupBy\": {\n      \"$convert\": {\n        \"input\": \"$price\",\n        \"to\": \"int\"\n      }\n    },\n    \"boundaries\": [0, 100, 500],\n    \"default\": \"Other\",\n    \"output\": {\n      \"productCount\": { \"$sum\": 1 },\n      \"totalPrice\": { \"$sum\": \"$price\" }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/bucket/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Sort your boundaries in ascending order</li> <li><code>default</code> handles out-of-bound values</li> <li>Works best on numeric fields (e.g., price, age, rating)</li> </ul>"},{"location":"stages/bucket/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$bucketAuto</code></li> <li><code>$group</code></li> <li><code>$facet</code></li> </ul>"},{"location":"stages/bucketAuto/","title":"$bucketAuto","text":"<p>The <code>$bucketAuto</code> stage automatically categorizes documents into a specified number of equi-sized buckets based on a specified <code>groupBy</code> expression.</p> <p>Unlike <code>$bucket</code>, it does not require manually defined boundaries \u2014 the system computes them based on data distribution.</p>"},{"location":"stages/bucketAuto/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$bucketAuto\": {\n    \"groupBy\": &lt;expression&gt;,\n    \"buckets\": &lt;number&gt;,\n    \"output\": {\n      &lt;field&gt;: { &lt;accumulator&gt;: &lt;expression&gt; }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/bucketAuto/#ecommerce-example-auto-bucket-orders-by-total-field","title":"\ud83d\udce6 Ecommerce Example \u2013 Auto-Bucket Orders by <code>total</code> Field","text":"<pre><code>{\n  \"$bucketAuto\": {\n    \"groupBy\": \"$total\",\n    \"buckets\": 3,\n    \"output\": {\n      \"count\": { \"$sum\": 1 },\n      \"averageTotal\": { \"$avg\": \"$total\" }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/bucketAuto/#input-documents","title":"Input Documents","text":"<pre><code>[\n  { \"orderId\": 1, \"total\": 45 },\n  { \"orderId\": 2, \"total\": 120 },\n  { \"orderId\": 3, \"total\": 300 },\n  { \"orderId\": 4, \"total\": 550 },\n  { \"orderId\": 5, \"total\": 800 },\n  { \"orderId\": 6, \"total\": 1100 }\n]\n</code></pre>"},{"location":"stages/bucketAuto/#output-documents-example-buckets","title":"Output Documents (Example Buckets)","text":"<pre><code>[\n  {\n    \"_id\": { \"min\": 45, \"max\": 300 },\n    \"count\": 3,\n    \"averageTotal\": 155\n  },\n  {\n    \"_id\": { \"min\": 300, \"max\": 800 },\n    \"count\": 2,\n    \"averageTotal\": 675\n  },\n  {\n    \"_id\": { \"min\": 800, \"max\": 1100 },\n    \"count\": 1,\n    \"averageTotal\": 1100\n  }\n]\n</code></pre> <p>\u2139\ufe0f The ranges and averages are automatically determined.</p>"},{"location":"stages/bucketAuto/#supported-accumulators-in-bucketauto","title":"\u2795 Supported Accumulators in <code>$bucketAuto</code>","text":"Accumulator Description Example Use <code>$sum</code> Count documents or totals Count of orders <code>$avg</code> Average of values Avg order value <code>$min</code> Minimum Lowest total <code>$max</code> Maximum Highest total <code>$push</code> Push array of values Push productIds <code>$addToSet</code> Unique entries Unique customer types"},{"location":"stages/bucketAuto/#operator-support-in-groupby-expression","title":"\ud83d\udd27 Operator Support in <code>groupBy</code> Expression","text":"Operator Example <code>$subtract</code> <code>{ \"$subtract\": [\"$price\", \"$discount\"] }</code> <code>$convert</code> <code>{ \"$convert\": { \"input\": \"$price\", \"to\": \"int\" } }</code> <code>$cond</code> <code>{ \"$cond\": { \"if\": { \"$gte\": [\"$total\", 1000] }, \"then\": \"$total\", \"else\": 0 } }</code>"},{"location":"stages/bucketAuto/#example-with-operator-in-groupby","title":"\ud83d\udcc8 Example with Operator in <code>groupBy</code>","text":"<pre><code>{\n  \"$bucketAuto\": {\n    \"groupBy\": {\n      \"$convert\": {\n        \"input\": \"$total\",\n        \"to\": \"int\"\n      }\n    },\n    \"buckets\": 4,\n    \"output\": {\n      \"orderCount\": { \"$sum\": 1 },\n      \"maxTotal\": { \"$max\": \"$total\" }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/bucketAuto/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Use for automatic segmentation when manual ranges aren\u2019t known</li> <li>Useful for analytics dashboards and histogram-like insights</li> <li>Output buckets may not be evenly sized by count</li> </ul>"},{"location":"stages/bucketAuto/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$bucket</code></li> <li><code>$group</code></li> <li><code>$facet</code></li> </ul>"},{"location":"stages/densify/","title":"$densify","text":"<p><code>$densify</code> generates synthetic documents to close gaps in numeric or time-based series. Use it after sorting (and optionally partitioning) to ensure downstream stages operate on regular intervals.</p>"},{"location":"stages/densify/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$densify\": {\n    \"field\": \"&lt;path&gt;\",\n    \"partitionByFields\": [ \"&lt;field&gt;\", ... ],   // optional\n    \"range\": {\n      \"step\": &lt;number&gt;,\n      \"unit\": \"day\" | \"hour\" | ...,           // optional (dates)\n      \"bounds\": \"full\" | [ &lt;lower&gt;, &lt;upper&gt; ]\n    }\n  }\n}\n</code></pre> <ul> <li><code>field</code>: Numeric or temporal field to densify. For date/time, supply a <code>unit</code> (<code>millisecond</code>, <code>second</code>, <code>minute</code>, <code>hour</code>, or <code>day</code>).</li> <li><code>partitionByFields</code>: Partition keys evaluated per document; densification runs independently per partition.</li> <li><code>bounds</code>: <code>\"full\"</code> uses the first and last values; arrays extend the range explicitly.</li> </ul>"},{"location":"stages/densify/#example-fill-missing-daily-observations","title":"\ud83d\uded2 Example \u2013 Fill Missing Daily Observations","text":"<pre><code>{\n  \"$densify\": {\n    \"field\": \"eventDate\",\n    \"partitionByFields\": [\"sku\"],\n    \"range\": {\n      \"step\": 1,\n      \"unit\": \"day\",\n      \"bounds\": \"full\"\n    }\n  }\n}\n</code></pre> <p>If only 2023-01-01 and 2023-01-03 exist for a SKU, <code>$densify</code> inserts a synthetic document for 2023-01-02 with the partition fields present and other fields unset.</p>"},{"location":"stages/densify/#input","title":"\ud83d\udce5 Input","text":"<pre><code>[\n  { \"sku\": \"A\", \"eventDate\": { \"$date\": \"2024-01-01\" }, \"quantity\": 5 },\n  { \"sku\": \"A\", \"eventDate\": { \"$date\": \"2024-01-03\" }, \"quantity\": 7 }\n]\n</code></pre>"},{"location":"stages/densify/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"sku\": \"A\", \"eventDate\": { \"$date\": \"2024-01-01\" }, \"quantity\": 5 },\n  { \"sku\": \"A\", \"eventDate\": { \"$date\": \"2024-01-02\" } },\n  { \"sku\": \"A\", \"eventDate\": { \"$date\": \"2024-01-03\" }, \"quantity\": 7 }\n]\n</code></pre>"},{"location":"stages/densify/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Run <code>$sort</code> beforehand so documents arrive ordered by partition and densify field.</li> <li>Combine with <code>$fill</code> to backfill values (linear interpolation, LOCF, or constants) after generating gap rows.</li> <li>Bounds array values accept literals, numeric epochs, or ISO date strings.</li> </ul>"},{"location":"stages/densify/#related-stages","title":"\ud83d\udd17 Related Stages","text":"<ul> <li><code>$fill</code></li> <li><code>$setWindowFields</code></li> <li><code>$bucket</code></li> </ul>"},{"location":"stages/facet/","title":"$facet","text":"<p>The <code>$facet</code> stage allows you to run multiple aggregation pipelines in parallel on the same input documents. Each pipeline outputs to a separate field in the result.</p> <p>Ideal for generating dashboards, side-by-side summaries, or multi-metric analysis.</p>"},{"location":"stages/facet/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$facet\": {\n    \"facetName1\": [ &lt;pipeline1&gt; ],\n    \"facetName2\": [ &lt;pipeline2&gt; ],\n    ...\n  }\n}\n</code></pre> <p>Each value must be a valid aggregation pipeline (array of stages).</p>"},{"location":"stages/facet/#ecommerce-example-dashboard-top-categories-brands-and-price-segments","title":"\ud83d\udce6 Ecommerce Example \u2013 Dashboard: Top Categories, Brands, and Price Segments","text":"<pre><code>{\n  \"$facet\": {\n    \"topCategories\": [\n      { \"$group\": { \"_id\": \"$category\", \"totalSales\": { \"$sum\": \"$price\" } } },\n      { \"$sort\": { \"totalSales\": -1 } },\n      { \"$limit\": 3 }\n    ],\n    \"topBrands\": [\n      { \"$group\": { \"_id\": \"$brand\", \"count\": { \"$sum\": 1 } } },\n      { \"$sort\": { \"count\": -1 } },\n      { \"$limit\": 3 }\n    ],\n    \"priceSegments\": [\n      {\n        \"$bucket\": {\n          \"groupBy\": \"$price\",\n          \"boundaries\": [0, 100, 500, 1000],\n          \"default\": \"Other\",\n          \"output\": { \"count\": { \"$sum\": 1 } }\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"stages/facet/#input-documents","title":"Input Documents","text":"<pre><code>[\n  { \"product\": \"Laptop\", \"price\": 900, \"category\": \"Electronics\", \"brand\": \"BrandA\" },\n  { \"product\": \"Phone\", \"price\": 600, \"category\": \"Electronics\", \"brand\": \"BrandB\" },\n  { \"product\": \"Shoes\", \"price\": 75, \"category\": \"Fashion\", \"brand\": \"BrandA\" },\n  { \"product\": \"Book\", \"price\": 20, \"category\": \"Books\", \"brand\": \"BrandC\" }\n]\n</code></pre>"},{"location":"stages/facet/#output-document","title":"Output Document","text":"<pre><code>{\n  \"topCategories\": [\n    { \"_id\": \"Electronics\", \"totalSales\": 1500 },\n    { \"_id\": \"Fashion\", \"totalSales\": 75 },\n    { \"_id\": \"Books\", \"totalSales\": 20 }\n  ],\n  \"topBrands\": [\n    { \"_id\": \"BrandA\", \"count\": 2 },\n    { \"_id\": \"BrandB\", \"count\": 1 },\n    { \"_id\": \"BrandC\", \"count\": 1 }\n  ],\n  \"priceSegments\": [\n    { \"_id\": 0, \"count\": 2 },\n    { \"_id\": 500, \"count\": 1 },\n    { \"_id\": 1000, \"count\": 1 }\n  ]\n}\n</code></pre>"},{"location":"stages/facet/#supported-accumulators","title":"\u2795 Supported Accumulators","text":"<p>Any accumulator supported by <code>$group</code>, <code>$bucket</code>, or <code>$bucketAuto</code> is usable inside <code>$facet</code> pipelines:</p> Accumulator Description <code>$sum</code> Count or total values <code>$avg</code> Mean price or rating <code>$min</code> / <code>$max</code> Price extremes <code>$push</code>, <code>$addToSet</code> Collect values"},{"location":"stages/facet/#operators-in-expressions","title":"\ud83d\udd27 Operators in Expressions","text":"<p>Operators are used inside stages nested in each facet pipeline:</p> Operator Example <code>$multiply</code> <code>{ \"$multiply\": [\"$price\", \"$qty\"] }</code> <code>$cond</code> <code>{ \"$cond\": { \"if\": ..., \"then\": ..., \"else\": ... } }</code> <code>$map</code> Transform arrays <code>$reduce</code> Total prices"},{"location":"stages/facet/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Use <code>$facet</code> to aggregate once and branch for multiple metrics.</li> <li>Combine <code>$facet</code> with <code>$group</code>, <code>$bucket</code>, <code>$sort</code>, <code>$project</code>, etc.</li> <li>Avoid overly deep pipelines in each facet to keep it efficient.</li> </ul>"},{"location":"stages/facet/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$group</code></li> <li><code>$bucket</code></li> <li><code>$project</code></li> <li><code>$match</code></li> </ul>"},{"location":"stages/fill/","title":"$fill","text":"<p><code>$fill</code> repairs missing or null fields using forward-fill (LOCF), linear interpolation, or explicit values. Pair it with <code>$densify</code> to produce continuous time-series streams before windowing.</p>"},{"location":"stages/fill/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$fill\": {\n    \"partitionBy\": &lt;expression&gt;,          // optional\n    \"sortBy\": { \"&lt;field&gt;\": 1 | -1 },\n    \"output\": {\n      \"&lt;field&gt;\": { \"method\": \"locf\" | \"linear\" },\n      \"&lt;field&gt;\": { \"value\": &lt;expression&gt; }\n    }\n  }\n}\n</code></pre> <ul> <li><code>partitionBy</code>: Expression evaluated per document; partitions are filled independently.</li> <li><code>sortBy</code>: Required ordering within each partition. Only single-field sort is currently supported.</li> <li><code>output</code>: Map of target fields to either a <code>method</code> (<code>locf</code> or <code>linear</code>) or a literal <code>value</code> expression.</li> </ul>"},{"location":"stages/fill/#example-locf-and-linear-interpolation","title":"\ud83d\uded2 Example \u2013 LOCF and Linear Interpolation","text":"<pre><code>{\n  \"$fill\": {\n    \"partitionBy\": \"$deviceId\",\n    \"sortBy\": { \"timestamp\": 1 },\n    \"output\": {\n      \"temperature\": { \"method\": \"linear\" },\n      \"status\": { \"method\": \"locf\" },\n      \"quality\": { \"value\": \"unknown\" }\n    }\n  }\n}\n</code></pre> <ul> <li><code>temperature</code> values are linearly interpolated between surrounding non-null readings.</li> <li><code>status</code> carries forward the most recent non-null value.</li> <li><code>quality</code> defaults to the literal string <code>\"unknown\"</code> whenever the field is missing.</li> </ul>"},{"location":"stages/fill/#input","title":"\ud83d\udce5 Input","text":"<pre><code>[\n  {\n    \"deviceId\": \"A\",\n    \"timestamp\": 1,\n    \"temperature\": 20.0,\n    \"status\": \"OK\"\n  },\n  {\n    \"deviceId\": \"A\",\n    \"timestamp\": 2,\n    \"temperature\": null\n  },\n  {\n    \"deviceId\": \"A\",\n    \"timestamp\": 3,\n    \"temperature\": 24.0,\n    \"status\": \"WARN\"\n  }\n]\n</code></pre>"},{"location":"stages/fill/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"deviceId\": \"A\",\n    \"timestamp\": 1,\n    \"temperature\": 20.0,\n    \"status\": \"OK\",\n    \"quality\": \"unknown\"\n  },\n  {\n    \"deviceId\": \"A\",\n    \"timestamp\": 2,\n    \"temperature\": 22.0,\n    \"status\": \"OK\",\n    \"quality\": \"unknown\"\n  },\n  {\n    \"deviceId\": \"A\",\n    \"timestamp\": 3,\n    \"temperature\": 24.0,\n    \"status\": \"WARN\",\n    \"quality\": \"unknown\"\n  }\n]\n</code></pre>"},{"location":"stages/fill/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>The stage only overwrites fields that are <code>null</code> or missing; existing values are preserved.</li> <li>Linear interpolation requires both a previous and next numeric value; leading/trailing nulls remain unchanged.</li> <li>Combine with <code>$densify</code> to manufacture intermediate timestamps before filling.</li> </ul>"},{"location":"stages/fill/#related-stages","title":"\ud83d\udd17 Related Stages","text":"<ul> <li><code>$densify</code></li> <li><code>$setWindowFields</code></li> <li><code>$group</code></li> </ul>"},{"location":"stages/group/","title":"$group","text":"<p>The <code>$group</code> stage aggregates documents by a specified <code>_id</code> expression and applies accumulator operations to grouped documents.</p>"},{"location":"stages/group/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$group\": {\n    \"_id\": &lt;expression&gt;,\n    \"field1\": { \"&lt;accumulator&gt;\": &lt;expression&gt; },\n    ...\n  }\n}\n</code></pre>"},{"location":"stages/group/#ecommerce-example-total-sales-and-item-count-per-category","title":"\ud83d\udce6 Ecommerce Example \u2013 Total Sales and Item Count per Category","text":"<pre><code>{\n  \"$group\": {\n    \"_id\": \"$category\",\n    \"totalSales\": { \"$sum\": \"$price\" },\n    \"itemCount\": { \"$sum\": 1 }\n  }\n}\n</code></pre>"},{"location":"stages/group/#input-documents","title":"Input Documents","text":"<pre><code>[\n  { \"product\": \"Laptop\", \"category\": \"Electronics\", \"price\": 900 },\n  { \"product\": \"Phone\", \"category\": \"Electronics\", \"price\": 600 },\n  { \"product\": \"Shoes\", \"category\": \"Fashion\", \"price\": 75 },\n  { \"product\": \"Book\", \"category\": \"Books\", \"price\": 20 }\n]\n</code></pre>"},{"location":"stages/group/#output-documents","title":"Output Documents","text":"<pre><code>[\n  { \"_id\": \"Electronics\", \"totalSales\": 1500, \"itemCount\": 2 },\n  { \"_id\": \"Fashion\", \"totalSales\": 75, \"itemCount\": 1 },\n  { \"_id\": \"Books\", \"totalSales\": 20, \"itemCount\": 1 }\n]\n</code></pre>"},{"location":"stages/group/#group-by-composite-keys","title":"\ud83d\udd01 Group by Composite Keys","text":"<pre><code>{\n  \"$group\": {\n    \"_id\": { \"category\": \"$category\", \"brand\": \"$brand\" },\n    \"count\": { \"$sum\": 1 }\n  }\n}\n</code></pre>"},{"location":"stages/group/#supported-accumulators","title":"\u2795 Supported Accumulators","text":"Accumulator Description <code>$sum</code> Total or count <code>$avg</code> Average value <code>$min</code> / <code>$max</code> Extremes <code>$push</code> Array of values <code>$addToSet</code> Unique values <code>$first</code> / <code>$last</code> First/last by input order"},{"location":"stages/group/#ecommerce-accumulator-examples","title":"\ud83c\udfaf Ecommerce Accumulator Examples","text":"<pre><code>{\n  \"$group\": {\n    \"_id\": \"$category\",\n    \"avgPrice\": { \"$avg\": \"$price\" },\n    \"minPrice\": { \"$min\": \"$price\" },\n    \"maxPrice\": { \"$max\": \"$price\" },\n    \"allBrands\": { \"$push\": \"$brand\" },\n    \"uniqueBrands\": { \"$addToSet\": \"$brand\" },\n    \"firstItem\": { \"$first\": \"$product\" },\n    \"lastItem\": { \"$last\": \"$product\" }\n  }\n}\n</code></pre>"},{"location":"stages/group/#operators-in-expressions","title":"\ud83d\udd27 Operators in Expressions","text":"<p>Operators may appear in <code>_id</code> and value expressions.</p> Operator Example <code>$toUpper</code> <code>{ \"$toUpper\": \"$category\" }</code> <code>$cond</code> <code>{ \"$cond\": { \"if\": ..., \"then\": ..., \"else\": ... } }</code> <code>$convert</code> Convert field to number or string <code>$multiply</code> Pre-process price with quantity"},{"location":"stages/group/#example-group-by-uppercase-category-and-conditional-total","title":"Example \u2013 Group by Uppercase Category and Conditional Total","text":"<pre><code>{\n  \"$group\": {\n    \"_id\": { \"$toUpper\": \"$category\" },\n    \"total\": {\n      \"$sum\": {\n        \"$cond\": {\n          \"if\": { \"$gte\": [\"$price\", 100] },\n          \"then\": \"$price\",\n          \"else\": 0\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"stages/group/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Use <code>$sum: 1</code> to count documents</li> <li>Use <code>$cond</code> or <code>$map</code> to pre-process values</li> <li>Output field names can differ from input fields</li> </ul>"},{"location":"stages/group/#related-stages","title":"\ud83d\udd17 Related Stages","text":"<ul> <li><code>$project</code></li> <li><code>$bucket</code></li> <li><code>$facet</code></li> <li><code>$replaceRoot</code></li> </ul>"},{"location":"stages/limit/","title":"$limit","text":"<p>Limits the number of documents passed to the next stage.</p>"},{"location":"stages/limit/#syntax","title":"Syntax","text":"<pre><code>{ \"$limit\": &lt;positiveInteger&gt; }\n</code></pre> <p>The integer caps how many documents are emitted downstream.</p>"},{"location":"stages/limit/#basic-example","title":"\u2705 Basic Example","text":""},{"location":"stages/limit/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{\n  \"$limit\": 2\n}\n</code></pre>"},{"location":"stages/limit/#input","title":"\ud83d\udce5 Input","text":"<pre><code>[\n  {\n    \"a\": 1\n  },\n  {\n    \"a\": 2\n  },\n  {\n    \"a\": 3\n  }\n]\n</code></pre>"},{"location":"stages/limit/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"a\": 1\n  },\n  {\n    \"a\": 2\n  }\n]\n</code></pre>"},{"location":"stages/limit/#deep-nested-pipeline-usage-ecommerce","title":"\ud83e\uddf1 Deep Nested Pipeline Usage (Ecommerce)","text":"<pre><code>[\n  {\n    \"$match\": {\n      \"status\": \"active\"\n    }\n  },\n  {\n    \"$limit\": 1\n  }\n]\n</code></pre>"},{"location":"stages/limit/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  {\n    \"status\": \"active\"\n  },\n  {\n    \"status\": \"inactive\"\n  }\n]\n</code></pre>"},{"location":"stages/limit/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  {\n    \"status\": \"active\"\n  }\n]\n</code></pre>"},{"location":"stages/limit/#supported-accumulators","title":"\u2795 Supported Accumulators","text":"<p>None for this stage</p>"},{"location":"stages/limit/#common-operators","title":"\ud83d\udd27 Common Operators","text":"<p>None</p>"},{"location":"stages/lookup/","title":"$lookup","text":"<p>The <code>$lookup</code> stage performs a left outer join to another collection in the same database to enrich documents with matching data.</p>"},{"location":"stages/lookup/#syntax-basic-form","title":"\ud83d\udccc Syntax (Basic Form)","text":"<pre><code>{\n  \"$lookup\": {\n    \"from\": \"&lt;foreign_collection&gt;\",\n    \"localField\": \"&lt;field_in_local_doc&gt;\",\n    \"foreignField\": \"&lt;field_in_foreign_doc&gt;\",\n    \"as\": \"&lt;output_field&gt;\"\n  }\n}\n</code></pre>"},{"location":"stages/lookup/#base-example-enrich-orders-with-product-details","title":"\u2705 Base Example \u2013 Enrich Orders with Product Details","text":""},{"location":"stages/lookup/#input-document-order","title":"\ud83d\udce5 Input Document (Order)","text":"<pre><code>{ \"orderId\": 1, \"productId\": 101 }\n</code></pre>"},{"location":"stages/lookup/#foreign-collection-products","title":"\ud83d\udcda Foreign Collection (<code>products</code>)","text":"<pre><code>[\n  { \"_id\": 101, \"name\": \"Mouse\", \"price\": 50 },\n  { \"_id\": 102, \"name\": \"Keyboard\", \"price\": 100 }\n]\n</code></pre>"},{"location":"stages/lookup/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{\n  \"$lookup\": {\n    \"from\": \"products\",\n    \"localField\": \"productId\",\n    \"foreignField\": \"_id\",\n    \"as\": \"productDetails\"\n  }\n}\n</code></pre>"},{"location":"stages/lookup/#output-document","title":"\ud83d\udce4 Output Document","text":"<pre><code>{\n  \"orderId\": 1,\n  \"productId\": 101,\n  \"productDetails\": [\n    { \"_id\": 101, \"name\": \"Mouse\", \"price\": 50 }\n  ]\n}\n</code></pre>"},{"location":"stages/lookup/#deep-nested-pipeline-example-filter-transform-product-match","title":"\ud83e\uddf1 Deep Nested Pipeline Example \u2013 Filter + Transform Product Match","text":"<pre><code>{\n  \"$lookup\": {\n    \"from\": \"products\",\n    \"let\": { \"pid\": \"$productId\" },\n    \"pipeline\": [\n      {\n        \"$match\": {\n          \"$expr\": { \"$eq\": [\"$_id\", \"$$pid\"] }\n        }\n      },\n      {\n        \"$project\": {\n          \"name\": 1,\n          \"price\": 1,\n          \"isExpensive\": { \"$gt\": [\"$price\", 100] },\n          \"_id\": 0\n        }\n      }\n    ],\n    \"as\": \"productInfo\"\n  }\n}\n</code></pre>"},{"location":"stages/lookup/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{ \"productId\": 102 }\n</code></pre>"},{"location":"stages/lookup/#foreign-collection-products_1","title":"\ud83d\udcda Foreign Collection (<code>products</code>)","text":"<pre><code>[\n  { \"_id\": 102, \"name\": \"Keyboard\", \"price\": 120 },\n  { \"_id\": 103, \"name\": \"Monitor\", \"price\": 200 }\n]\n</code></pre>"},{"location":"stages/lookup/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"productId\": 102,\n  \"productInfo\": [\n    {\n      \"name\": \"Keyboard\",\n      \"price\": 120,\n      \"isExpensive\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"stages/lookup/#supported-accumulators-used-after-unwind","title":"\u2795 Supported Accumulators (Used After <code>$unwind</code>)","text":"<p>If joined documents are unwound, you can apply grouping with these:</p> Accumulator Description <code>$sum</code> Count or total values <code>$avg</code> Mean of numeric values <code>$min</code> / <code>$max</code> Min/max across joined fields <code>$push</code> Collect into array <code>$addToSet</code> Unique values only <code>$first</code> / <code>$last</code> First/last matched records"},{"location":"stages/lookup/#common-operators-used-in-lookup-pipelines","title":"\ud83d\udd27 Common Operators Used in <code>$lookup</code> Pipelines","text":"Operator Purpose <code>$eq</code> Join condition (via <code>$expr</code>) <code>$project</code> Field reshaping <code>$match</code> Filter after join <code>$let</code> / <code>$$var</code> Use variables in pipeline <code>$gt</code>, <code>$cond</code> Conditional logic in projections"},{"location":"stages/lookup/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<ul> <li>Use <code>$unwind</code> after <code>$lookup</code> when expecting a single match</li> <li>Use <code>$project</code> to clean large foreign documents</li> <li>Use <code>$let</code> + <code>$expr</code> for flexible joins</li> </ul>"},{"location":"stages/lookup/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$unwind</code> \u2013 deconstruct joined arrays</li> <li><code>$group</code> \u2013 aggregate joined data</li> <li><code>$expr</code>, <code>$function</code> \u2013 join on expressions</li> </ul>"},{"location":"stages/match/","title":"$match","text":"<p>Filters documents by a condition.</p>"},{"location":"stages/match/#syntax","title":"Syntax","text":"<pre><code>{ \"$match\": { &lt;fieldOrOperator&gt;: &lt;valueOrExpression&gt; } }\n</code></pre> <p>Use the same field and operator syntax as MongoDB queries (<code>$eq</code>, <code>$gte</code>, logical expressions, nested documents, etc.).</p>"},{"location":"stages/match/#basic-example","title":"\u2705 Basic Example","text":""},{"location":"stages/match/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{\n  \"$match\": {\n    \"status\": \"active\"\n  }\n}\n</code></pre>"},{"location":"stages/match/#input","title":"\ud83d\udce5 Input","text":"<pre><code>{\n  \"orderId\": 1,\n  \"status\": \"active\",\n  \"total\": 1200\n}\n</code></pre>"},{"location":"stages/match/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"orderId\": 1,\n  \"status\": \"active\",\n  \"total\": 1200\n}\n</code></pre>"},{"location":"stages/match/#deep-nested-pipeline-usage-ecommerce","title":"\ud83e\uddf1 Deep Nested Pipeline Usage (Ecommerce)","text":"<pre><code>[\n  {\n    \"$match\": {\n      \"orderDate\": {\n        \"$gte\": \"2024-01-01\"\n      }\n    }\n  },\n  {\n    \"$unwind\": \"$items\"\n  },\n  {\n    \"$match\": {\n      \"items.price\": {\n        \"$gt\": 100\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"stages/match/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 2,\n  \"orderDate\": \"2025-02-10\",\n  \"items\": [\n    {\n      \"name\": \"Laptop\",\n      \"price\": 900\n    },\n    {\n      \"name\": \"Mouse\",\n      \"price\": 50\n    }\n  ]\n}\n</code></pre>"},{"location":"stages/match/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  {\n    \"orderId\": 2,\n    \"orderDate\": \"2025-02-10\",\n    \"items\": {\n      \"name\": \"Laptop\",\n      \"price\": 900\n    }\n  }\n]\n</code></pre>"},{"location":"stages/match/#supported-accumulators","title":"\u2795 Supported Accumulators","text":"<p>None for this stage</p>"},{"location":"stages/match/#common-operators","title":"\ud83d\udd27 Common Operators","text":"<p>$gte, $lt, $eq, $expr</p>"},{"location":"stages/merge/","title":"$merge","text":"<p>Fluxion Core runs pipelines entirely in memory and does not implement <code>$merge</code> today. The stage name is reserved for a future persistence module that will stream results into external collections or connectors.</p>"},{"location":"stages/merge/#status","title":"Status","text":"<ul> <li>\u274c Not available in the <code>PipelineExecutor</code> / StageRegistry.</li> <li>\u2705 Planned for a forthcoming connectors release that will handle write-backs.</li> </ul>"},{"location":"stages/merge/#suggested-alternative","title":"Suggested Alternative","text":"<p>Persist the pipeline output explicitly in your service until the connective module ships:</p> <pre><code>List&lt;Document&gt; results = executor.run(input, pipeline, Map.of());\nresults.forEach(doc -&gt; orderRepository.save(doc.toMap()));\n</code></pre> <p>This approach keeps the pipeline focused on transformation while the application layer performs the final write.</p>"},{"location":"stages/merge/#notes-for-llms-integrators","title":"Notes for LLMs &amp; Integrators","text":"<ul> <li>When asked for <code>$merge</code> examples, respond that it is not supported in Fluxion Core.</li> <li>Recommend saving results via the host application or waiting for the dedicated streaming/persistence module.</li> </ul>"},{"location":"stages/out/","title":"$out","text":"<p>Fluxion Core does not currently implement <code>$out</code>. The stage is reserved for a future module that will stream pipeline results into persistent storage.</p>"},{"location":"stages/out/#status","title":"Status","text":"<ul> <li>\u274c Unsupported in the in-memory runtime (<code>PipelineExecutor</code>).</li> <li>\u2705 Planned alongside the connectors/persistence module.</li> </ul>"},{"location":"stages/out/#recommended-pattern","title":"Recommended Pattern","text":"<p>Handle persistence explicitly after running the pipeline:</p> <pre><code>List&lt;Document&gt; processed = executor.run(input, pipeline, Map.of());\nprocessed.forEach(doc -&gt; archiveService.store(doc));\n</code></pre> <p>This mirrors the intent of <code>$out</code> while keeping responsibilities clear in today\u2019s architecture.</p>"},{"location":"stages/out/#notes-for-llms-documentation-consumers","title":"Notes for LLMs &amp; Documentation Consumers","text":"<ul> <li>Clearly state that <code>$out</code> is not available yet when generating answers or code.</li> <li>Suggest application-level persistence or waiting for the upcoming streaming connectors module.</li> </ul>"},{"location":"stages/project/","title":"$project","text":"<p>Reshapes documents by including, excluding, or computing fields.</p>"},{"location":"stages/project/#syntax","title":"Syntax","text":"<pre><code>{ \"$project\": { \"&lt;field&gt;\": &lt;0|1|expression&gt;, ... } }\n</code></pre> <ul> <li>Set a field to <code>1</code> to include it, <code>0</code> to exclude it.</li> <li>Provide an expression to compute a new value (aliasing is allowed by assigning to a new field name).</li> <li><code>_id</code> is included by default; set <code>\"_id\": 0</code> to drop it.</li> </ul>"},{"location":"stages/project/#basic-example","title":"\u2705 Basic Example","text":""},{"location":"stages/project/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{\n  \"$project\": {\n    \"product\": 1,\n    \"price\": 1,\n    \"_id\": 0\n  }\n}\n</code></pre>"},{"location":"stages/project/#input","title":"\ud83d\udce5 Input","text":"<pre><code>{\n  \"product\": \"Laptop\",\n  \"price\": 1200,\n  \"internal\": true\n}\n</code></pre>"},{"location":"stages/project/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Laptop\",\n  \"price\": 1200\n}\n</code></pre>"},{"location":"stages/project/#deep-nested-pipeline-usage-ecommerce","title":"\ud83e\uddf1 Deep Nested Pipeline Usage (Ecommerce)","text":"<pre><code>[\n  {\n    \"$unwind\": \"$items\"\n  },\n  {\n    \"$project\": {\n      \"item\": \"$items.name\",\n      \"cost\": \"$items.price\"\n    }\n  }\n]\n</code></pre>"},{"location":"stages/project/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 1,\n  \"items\": [\n    {\n      \"name\": \"Phone\",\n      \"price\": 500\n    },\n    {\n      \"name\": \"Case\",\n      \"price\": 30\n    }\n  ]\n}\n</code></pre>"},{"location":"stages/project/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  {\n    \"item\": \"Phone\",\n    \"cost\": 500\n  },\n  {\n    \"item\": \"Case\",\n    \"cost\": 30\n  }\n]\n</code></pre>"},{"location":"stages/project/#supported-accumulators","title":"\u2795 Supported Accumulators","text":"<p>None for this stage</p>"},{"location":"stages/project/#common-operators","title":"\ud83d\udd27 Common Operators","text":"<p>$literal, $ifNull, $toUpper</p>"},{"location":"stages/replaceRoot/","title":"$replaceRoot","text":"<p>The <code>$replaceRoot</code> stage replaces the entire input document with a specified subdocument.</p>"},{"location":"stages/replaceRoot/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$replaceRoot\": { \"newRoot\": &lt;expression&gt; } }\n</code></pre>"},{"location":"stages/replaceRoot/#base-example-replace-root-with-embedded-customer-object","title":"\u2705 Base Example \u2013 Replace Root with Embedded Customer Object","text":""},{"location":"stages/replaceRoot/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"_id\": 1,\n  \"orderId\": 22,\n  \"customer\": {\n    \"name\": \"Alice\",\n    \"email\": \"alice@example.com\"\n  },\n  \"items\": [{ \"name\": \"Book\" }]\n}\n</code></pre>"},{"location":"stages/replaceRoot/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{ \"$replaceRoot\": { \"newRoot\": \"$customer\" } }\n</code></pre>"},{"location":"stages/replaceRoot/#output-document","title":"\ud83d\udce4 Output Document","text":"<pre><code>{\n  \"name\": \"Alice\",\n  \"email\": \"alice@example.com\"\n}\n</code></pre>"},{"location":"stages/replaceRoot/#common-operators","title":"\ud83d\udd27 Common Operators","text":"<ul> <li><code>$mergeObjects</code>, <code>$ifNull</code>, <code>$project</code></li> </ul>"},{"location":"stages/replaceRoot/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$replaceWith</code>, <code>$project</code>, <code>$unwind</code></li> </ul>"},{"location":"stages/replaceWith/","title":"$replaceWith","text":"<p>The <code>$replaceWith</code> stage is an alias for <code>$replaceRoot</code> but supports any expression, not just a field path.</p>"},{"location":"stages/replaceWith/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$replaceWith\": &lt;expression&gt; }\n</code></pre>"},{"location":"stages/replaceWith/#base-example-replace-with-embedded-customer","title":"\u2705 Base Example \u2013 Replace With Embedded Customer","text":"<pre><code>{ \"$replaceWith\": \"$customer\" }\n</code></pre>"},{"location":"stages/replaceWith/#deep-nested-example-merge-order-id-with-customer-info","title":"\ud83e\uddf1 Deep Nested Example \u2013 Merge Order ID with Customer Info","text":""},{"location":"stages/replaceWith/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{\n  \"$replaceWith\": {\n    \"$mergeObjects\": [\"$customer\", { \"orderId\": \"$orderId\" }]\n  }\n}\n</code></pre>"},{"location":"stages/replaceWith/#input","title":"\ud83d\udce5 Input","text":"<pre><code>{\n  \"orderId\": 55,\n  \"customer\": {\n    \"name\": \"Bob\",\n    \"email\": \"bob@example.com\"\n  }\n}\n</code></pre>"},{"location":"stages/replaceWith/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"name\": \"Bob\",\n  \"email\": \"bob@example.com\",\n  \"orderId\": 55\n}\n</code></pre>"},{"location":"stages/replaceWith/#common-operators","title":"\ud83d\udd27 Common Operators","text":"<ul> <li><code>$mergeObjects</code>, <code>$map</code>, <code>$reduce</code>, <code>$cond</code></li> </ul>"},{"location":"stages/replaceWith/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$replaceRoot</code>, <code>$addFields</code>, <code>$project</code></li> </ul>"},{"location":"stages/sampleRate/","title":"$sampleRate","text":"<p>Emits each document with the given probability. Useful for lightweight sampling or throttling without shuffling the pipeline.</p>"},{"location":"stages/sampleRate/#syntax","title":"Syntax","text":"<pre><code>{ \"$sampleRate\": &lt;rate&gt; }\n</code></pre> <pre><code>{ \"$sampleRate\": { \"rate\": &lt;rate&gt;, \"seed\": &lt;number&gt; } }\n</code></pre> <ul> <li><code>rate</code> must be between <code>0</code> and <code>1</code>. A document is kept when a random draw is less than or equal to the rate.</li> <li><code>seed</code> (optional) makes the sampling deterministic, which is handy for tests.</li> </ul>"},{"location":"stages/sampleRate/#example","title":"Example","text":""},{"location":"stages/sampleRate/#input","title":"Input","text":"<pre><code>[\n  { \"eventId\": 1 },\n  { \"eventId\": 2 },\n  { \"eventId\": 3 },\n  { \"eventId\": 4 }\n]\n</code></pre>"},{"location":"stages/sampleRate/#stage","title":"Stage","text":"<pre><code>{ \"$sampleRate\": { \"rate\": 0.5, \"seed\": 42 } }\n</code></pre>"},{"location":"stages/sampleRate/#output","title":"Output","text":"<pre><code>[\n  { \"eventId\": 2 },\n  { \"eventId\": 3 },\n  { \"eventId\": 4 }\n]\n</code></pre> <p>With the provided seed, events 2, 3, and 4 are retained. Without a seed, the sample varies across executions.</p>"},{"location":"stages/sampleRate/#tips","title":"Tips","text":"<ul> <li>Apply <code>$match</code> or <code>$project</code> before sampling to reduce payload size.</li> <li>Use after <code>$sort</code> if you need sampling from a specific ordering of documents.</li> </ul>"},{"location":"stages/search/","title":"$search","text":"<p>Fluxion does not bundle Atlas Search or Lucene integration today, so the <code>$search</code> stage is not implemented. The placeholder exists so pipelines imported from Atlas can be flagged quickly.</p>"},{"location":"stages/search/#status","title":"Status","text":"<ul> <li>\u274c Unsupported in Fluxion Core.</li> <li>\ud83d\udd2c Under consideration for a future module that integrates with external search services.</li> </ul>"},{"location":"stages/search/#guidance","title":"Guidance","text":"<ul> <li>Keep search-specific filters in your application or upstream data source.</li> <li>If you need full-text search today, run the lookup externally (e.g., Elastic, Atlas Search) and feed the results into Fluxion afterwards.</li> </ul>"},{"location":"stages/search/#notes-for-llms","title":"Notes for LLMs","text":"<ul> <li>Return an explicit warning: \u201c<code>$search</code> is not available in Fluxion Core`\u201d.</li> <li>Suggest alternative flows (external search + Fluxion for shaping results).</li> </ul>"},{"location":"stages/set/","title":"$set","text":"<p>Adds or modifies fields in documents (alias for $addFields).</p>"},{"location":"stages/set/#syntax","title":"Syntax","text":"<pre><code>{ \"$set\": { \"fieldName\": &lt;expression&gt;, ... } }\n</code></pre> <p><code>$set</code> accepts the same payload as <code>$addFields</code>; both names map to the same stage handler.</p>"},{"location":"stages/set/#basic-example","title":"\u2705 Basic Example","text":""},{"location":"stages/set/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{\n  \"$set\": {\n    \"shippingFee\": 10\n  }\n}\n</code></pre>"},{"location":"stages/set/#input","title":"\ud83d\udce5 Input","text":"<pre><code>{\n  \"product\": \"Laptop\",\n  \"price\": 1200\n}\n</code></pre>"},{"location":"stages/set/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Laptop\",\n  \"price\": 1200,\n  \"shippingFee\": 10\n}\n</code></pre>"},{"location":"stages/set/#deep-nested-pipeline-usage-ecommerce","title":"\ud83e\uddf1 Deep Nested Pipeline Usage (Ecommerce)","text":"<pre><code>[\n  {\n    \"$set\": {\n      \"totalWithTax\": {\n        \"$add\": [\n          \"$total\",\n          {\n            \"$multiply\": [\n              \"$total\",\n              0.13\n            ]\n          }\n        ]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"stages/set/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"total\": 1000\n}\n</code></pre>"},{"location":"stages/set/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>{\n  \"total\": 1000,\n  \"totalWithTax\": 1130.0\n}\n</code></pre>"},{"location":"stages/set/#supported-accumulators","title":"\u2795 Supported Accumulators","text":"<p>None for this stage</p>"},{"location":"stages/set/#common-operators","title":"\ud83d\udd27 Common Operators","text":"<p>$add, $multiply</p>"},{"location":"stages/setWindowFields/","title":"$setWindowFields","text":"<p>The <code>$setWindowFields</code> stage annotates each input document with one or more windowed expressions. Documents are partitioned and sorted, and the specified window functions are evaluated per row, producing new fields alongside the original payload.</p>"},{"location":"stages/setWindowFields/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{\n  \"$setWindowFields\": {\n    \"partitionBy\": &lt;expression&gt;,          // optional\n    \"sortBy\": { \"&lt;field&gt;\": 1 | -1 },\n    \"output\": {\n      \"&lt;field&gt;\": {\n        \"&lt;windowFunction&gt;\": &lt;spec&gt;,\n        \"window\": { \"documents\": [ &lt;lower&gt;, &lt;upper&gt; ] } // optional bounds\n      },\n      ...\n    }\n  }\n}\n</code></pre> <p>Bounds accept <code>\"unbounded\"</code>, <code>\"current\"</code>, or integer offsets relative to the current document, just like MongoDB. Omit <code>window</code> to default to <code>[\"unbounded\", \"current\"]</code>.</p>"},{"location":"stages/setWindowFields/#key-options","title":"\ud83e\udde0 Key Options","text":"Option Description <code>partitionBy</code> Groups documents into independent partitions before applying window functions. <code>sortBy</code> Required ordering within each partition. Accepts a single field with ascending or descending direction. <code>output</code> Map of output field names to window function specs. Each spec may also include a custom <code>window</code> bound."},{"location":"stages/setWindowFields/#example-rolling-metrics-per-customer-tier","title":"\ud83d\uded2 Example \u2013 Rolling Metrics Per Customer Tier","text":"<pre><code>{\n  \"$setWindowFields\": {\n    \"partitionBy\": \"$customer.tier\",\n    \"sortBy\": { \"eventTime\": 1 },\n    \"output\": {\n      \"prevOrder\": {\n        \"$shift\": { \"output\": \"$order.total\", \"by\": 1, \"default\": null }\n      },\n      \"rank\": { \"$rank\": {} },\n      \"velocity\": {\n        \"$derivative\": { \"input\": \"$order.total\", \"unit\": \"minute\" },\n        \"window\": { \"documents\": [ -1, 0 ] }\n      }\n    }\n  }\n}\n</code></pre> <p>Each emitted document keeps the original fields and adds <code>prevOrder</code>, <code>rank</code>, and <code>velocity</code> computed over the partitioned, ordered stream.</p>"},{"location":"stages/setWindowFields/#input","title":"\ud83d\udce5 Input","text":"<pre><code>[\n  { \"customer\": { \"tier\": \"gold\" }, \"eventTime\": 1, \"order\": { \"total\": 100 } },\n  { \"customer\": { \"tier\": \"gold\" }, \"eventTime\": 2, \"order\": { \"total\": 120 } },\n  { \"customer\": { \"tier\": \"gold\" }, \"eventTime\": 3, \"order\": { \"total\": 90 } }\n]\n</code></pre>"},{"location":"stages/setWindowFields/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"customer\": { \"tier\": \"gold\" },\n    \"eventTime\": 1,\n    \"order\": { \"total\": 100 },\n    \"prevOrder\": null,\n    \"rank\": 1,\n    \"velocity\": null\n  },\n  {\n    \"customer\": { \"tier\": \"gold\" },\n    \"eventTime\": 2,\n    \"order\": { \"total\": 120 },\n    \"prevOrder\": 100,\n    \"rank\": 2,\n    \"velocity\": 20\n  },\n  {\n    \"customer\": { \"tier\": \"gold\" },\n    \"eventTime\": 3,\n    \"order\": { \"total\": 90 },\n    \"prevOrder\": 120,\n    \"rank\": 3,\n    \"velocity\": -30\n  }\n]\n</code></pre>"},{"location":"stages/setWindowFields/#supported-window-functions","title":"\ud83e\udde9 Supported Window Functions","text":"Function Description <code>$shift</code> Returns a value at a relative row offset, with optional default. <code>$rank</code> / <code>$denseRank</code> Positional rank (with or without gaps) within the partition. <code>$derivative</code> Rate of change across the window, scaled by a time unit. <code>$integral</code> Trapezoidal integration of numeric values over elapsed time. <code>$expMovingAvg</code> Exponential moving average; accepts <code>alpha</code> or <code>N</code>. <code>$stdDevPop</code>, <code>$stdDevSamp</code> Population or sample standard deviation of numeric input. <code>$covariancePop</code>, <code>$covarianceSamp</code> Covariance of paired expressions across the window. <p>Standard accumulators (<code>$sum</code>, <code>$avg</code>, <code>$min</code>, <code>$max</code>, etc.) are also available through the shared accumulator registry.</p>"},{"location":"stages/setWindowFields/#tips","title":"\ud83d\udca1 Tips","text":"<ul> <li>Ensure the <code>sortBy</code> field is monotonic (numeric epoch or ISO string). <code>$derivative</code> and <code>$integral</code> rely on the resolved time delta.</li> <li>Combine <code>partitionBy</code> with compound expressions to segment by tenant, device, region, etc.</li> <li>Bounds of <code>[ \"unbounded\", \"current\" ]</code> produce cumulative metrics. Use offsets like <code>[-2, 0]</code> for sliding windows.</li> <li>Custom accumulators registered via the Fluxion registry are automatically available inside <code>$setWindowFields</code>.</li> </ul>"},{"location":"stages/setWindowFields/#related-stages","title":"\ud83d\udd17 Related Stages","text":"<ul> <li><code>$group</code></li> <li><code>$bucket</code></li> <li><code>$bucketAuto</code></li> <li><code>$sort</code></li> </ul>"},{"location":"stages/skip/","title":"$skip","text":"<p>Skips over a specified number of documents.</p>"},{"location":"stages/skip/#syntax","title":"Syntax","text":"<pre><code>{ \"$skip\": &lt;nonNegativeInteger&gt; }\n</code></pre> <p>The integer specifies how many leading documents to drop before emitting results.</p>"},{"location":"stages/skip/#basic-example","title":"\u2705 Basic Example","text":""},{"location":"stages/skip/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{\n  \"$skip\": 1\n}\n</code></pre>"},{"location":"stages/skip/#input","title":"\ud83d\udce5 Input","text":"<pre><code>[\n  {\n    \"a\": 1\n  },\n  {\n    \"a\": 2\n  },\n  {\n    \"a\": 3\n  }\n]\n</code></pre>"},{"location":"stages/skip/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  {\n    \"a\": 2\n  },\n  {\n    \"a\": 3\n  }\n]\n</code></pre>"},{"location":"stages/skip/#deep-nested-pipeline-usage-ecommerce","title":"\ud83e\uddf1 Deep Nested Pipeline Usage (Ecommerce)","text":"<pre><code>[\n  {\n    \"$sort\": {\n      \"price\": 1\n    }\n  },\n  {\n    \"$skip\": 2\n  }\n]\n</code></pre>"},{"location":"stages/skip/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>[\n  {\n    \"price\": 10\n  },\n  {\n    \"price\": 30\n  },\n  {\n    \"price\": 20\n  }\n]\n</code></pre>"},{"location":"stages/skip/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  {\n    \"price\": 30\n  }\n]\n</code></pre>"},{"location":"stages/skip/#supported-accumulators","title":"\u2795 Supported Accumulators","text":"<p>None for this stage</p>"},{"location":"stages/skip/#common-operators","title":"\ud83d\udd27 Common Operators","text":"<p>None</p>"},{"location":"stages/sort/","title":"$sort","text":"<p>The <code>$sort</code> stage sorts all input documents and passes them along in sorted order.</p> <p>You can sort by multiple fields and directions (<code>1</code> for ascending, <code>-1</code> for descending).</p>"},{"location":"stages/sort/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$sort\": { \"&lt;field1&gt;\": 1, \"&lt;field2&gt;\": -1 } }\n</code></pre>"},{"location":"stages/sort/#base-example-sort-products-by-price-descending","title":"\u2705 Base Example \u2013 Sort Products by Price (Descending)","text":""},{"location":"stages/sort/#input-documents","title":"\ud83d\udce5 Input Documents","text":"<pre><code>[\n  { \"product\": \"Book\", \"price\": 10 },\n  { \"product\": \"Monitor\", \"price\": 200 },\n  { \"product\": \"Mouse\", \"price\": 50 }\n]\n</code></pre>"},{"location":"stages/sort/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{ \"$sort\": { \"price\": -1 } }\n</code></pre>"},{"location":"stages/sort/#output","title":"\ud83d\udce4 Output","text":"<pre><code>[\n  { \"product\": \"Monitor\", \"price\": 200 },\n  { \"product\": \"Mouse\", \"price\": 50 },\n  { \"product\": \"Book\", \"price\": 10 }\n]\n</code></pre>"},{"location":"stages/sort/#deep-nested-example-filter-compute-total-then-sort","title":"\ud83e\uddf1 Deep Nested Example \u2013 Filter, Compute Total, then Sort","text":""},{"location":"stages/sort/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$project\": {\n      \"item\": \"$items.name\",\n      \"total\": {\n        \"$multiply\": [\"$items.price\", \"$items.quantity\"]\n      }\n    }\n  },\n  { \"$sort\": { \"total\": -1 } }\n]\n</code></pre>"},{"location":"stages/sort/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 1,\n  \"items\": [\n    { \"name\": \"Laptop\", \"price\": 1000, \"quantity\": 1 },\n    { \"name\": \"Mouse\", \"price\": 50, \"quantity\": 2 }\n  ]\n}\n</code></pre>"},{"location":"stages/sort/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  { \"item\": \"Laptop\", \"total\": 1000 },\n  { \"item\": \"Mouse\", \"total\": 100 }\n]\n</code></pre>"},{"location":"stages/sort/#accumulators-used-post-sort-grouping","title":"\u2795 Accumulators Used (Post-Sort Grouping)","text":"<p>You can combine <code>$sort</code> with stages like <code>$group</code>:</p> Accumulator Use Case <code>$sum</code> Group totals after sorting <code>$avg</code> Find top averages <code>$max</code> / <code>$min</code> Determine max/min sorted results <code>$first</code> / <code>$last</code> Retain first/last after sort <code>$push</code> Preserve full value sequence"},{"location":"stages/sort/#common-operators-in-sort-pipelines","title":"\ud83d\udd27 Common Operators in $sort Pipelines","text":"Operator Purpose <code>$multiply</code> Compute totals before sorting <code>$project</code> Shape fields before sort <code>$unwind</code> Flatten arrays for item-level sorting <code>$cond</code>, <code>$add</code> Conditional or derived fields"},{"location":"stages/sort/#tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Use index-backed sort for better performance</li> <li>Avoid sorting huge datasets unless paginated</li> <li>Chain <code>$limit</code> after <code>$sort</code> for top-N</li> </ul>"},{"location":"stages/sort/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$limit</code>, <code>$skip</code> \u2013 pagination</li> <li><code>$group</code> \u2013 post-sort aggregation</li> <li><code>$project</code> \u2013 prep sort field</li> </ul>"},{"location":"stages/sortByCount/","title":"$sortByCount","text":"<p>Groups documents by the supplied expression, counts each group, and sorts the results by count in descending order.</p>"},{"location":"stages/sortByCount/#syntax","title":"Syntax","text":"<pre><code>{ \"$sortByCount\": &lt;expression&gt; }\n</code></pre> <ul> <li>The expression can be a field path (<code>\"$status\"</code>), system variable, or computed expression.</li> <li>The output documents contain <code>_id</code> (group key) and <code>count</code>.</li> </ul>"},{"location":"stages/sortByCount/#example","title":"Example","text":""},{"location":"stages/sortByCount/#input","title":"Input","text":"<pre><code>[\n  { \"status\": \"OPEN\" },\n  { \"status\": \"OPEN\" },\n  { \"status\": \"CLOSED\" },\n  { \"status\": \"FAILED\" },\n  { \"status\": \"OPEN\" }\n]\n</code></pre>"},{"location":"stages/sortByCount/#stage","title":"Stage","text":"<pre><code>{ \"$sortByCount\": \"$status\" }\n</code></pre>"},{"location":"stages/sortByCount/#output","title":"Output","text":"<pre><code>[\n  { \"_id\": \"OPEN\", \"count\": 3 },\n  { \"_id\": \"CLOSED\", \"count\": 1 },\n  { \"_id\": \"FAILED\", \"count\": 1 }\n]\n</code></pre>"},{"location":"stages/sortByCount/#tips","title":"Tips","text":"<ul> <li>When you already have grouped data, consider <code>$group</code> + <code>$sort</code> for more control over additional fields.</li> <li>Combine with <code>$match</code> beforehand to limit the documents being counted.</li> </ul>"},{"location":"stages/unset/","title":"$unset","text":"<p>Removes specified fields from documents.</p>"},{"location":"stages/unset/#syntax","title":"Syntax","text":"<pre><code>{ \"$unset\": \"&lt;fieldName&gt;\" }\n</code></pre> <pre><code>{ \"$unset\": [\"&lt;field1&gt;\", \"&lt;field2&gt;\", ...] }\n</code></pre> <ul> <li>Accepts either a single string or an array of field names.</li> <li>To remove nested fields, specify the path (for example <code>\"shipping.trackingNumber\"</code>).</li> </ul>"},{"location":"stages/unset/#basic-example","title":"\u2705 Basic Example","text":""},{"location":"stages/unset/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{\n  \"$unset\": \"internal\"\n}\n</code></pre>"},{"location":"stages/unset/#input","title":"\ud83d\udce5 Input","text":"<pre><code>{\n  \"product\": \"Phone\",\n  \"internal\": true\n}\n</code></pre>"},{"location":"stages/unset/#output","title":"\ud83d\udce4 Output","text":"<pre><code>{\n  \"product\": \"Phone\"\n}\n</code></pre>"},{"location":"stages/unset/#deep-nested-pipeline-usage-ecommerce","title":"\ud83e\uddf1 Deep Nested Pipeline Usage (Ecommerce)","text":"<pre><code>[\n  {\n    \"$unset\": [\n      \"internal\",\n      \"archived\"\n    ]\n  }\n]\n</code></pre>"},{"location":"stages/unset/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"name\": \"Shoes\",\n  \"archived\": false,\n  \"internal\": true\n}\n</code></pre>"},{"location":"stages/unset/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>{\n  \"name\": \"Shoes\"\n}\n</code></pre>"},{"location":"stages/unset/#supported-accumulators","title":"\u2795 Supported Accumulators","text":"<p>None for this stage</p>"},{"location":"stages/unset/#common-operators","title":"\ud83d\udd27 Common Operators","text":"<p>None</p>"},{"location":"stages/unwind/","title":"$unwind","text":"<p>The <code>$unwind</code> stage deconstructs an array field from the input document to output a document for each element.</p>"},{"location":"stages/unwind/#syntax","title":"\ud83d\udccc Syntax","text":"<pre><code>{ \"$unwind\": \"$&lt;arrayField&gt;\" }\n</code></pre>"},{"location":"stages/unwind/#base-example-unwind-items-in-order","title":"\u2705 Base Example \u2013 Unwind Items in Order","text":""},{"location":"stages/unwind/#input-document","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 1,\n  \"items\": [\n    { \"name\": \"Laptop\", \"price\": 1200 },\n    { \"name\": \"Mouse\", \"price\": 50 }\n  ]\n}\n</code></pre>"},{"location":"stages/unwind/#stage","title":"\ud83d\udccc Stage","text":"<pre><code>{ \"$unwind\": \"$items\" }\n</code></pre>"},{"location":"stages/unwind/#output-documents","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  {\n    \"orderId\": 1,\n    \"items\": { \"name\": \"Laptop\", \"price\": 1200 }\n  },\n  {\n    \"orderId\": 1,\n    \"items\": { \"name\": \"Mouse\", \"price\": 50 }\n  }\n]\n</code></pre>"},{"location":"stages/unwind/#deep-nested-example-unwind-compute-and-group-by-category","title":"\ud83e\uddf1 Deep Nested Example \u2013 Unwind, Compute, and Group by Category","text":""},{"location":"stages/unwind/#pipeline","title":"\ud83d\udccc Pipeline","text":"<pre><code>[\n  { \"$unwind\": \"$items\" },\n  {\n    \"$group\": {\n      \"_id\": \"$items.category\",\n      \"totalSales\": { \"$sum\": \"$items.price\" },\n      \"count\": { \"$sum\": 1 }\n    }\n  },\n  { \"$sort\": { \"totalSales\": -1 } }\n]\n</code></pre>"},{"location":"stages/unwind/#input-document_1","title":"\ud83d\udce5 Input Document","text":"<pre><code>{\n  \"orderId\": 5,\n  \"items\": [\n    { \"name\": \"Laptop\", \"price\": 1000, \"category\": \"Electronics\" },\n    { \"name\": \"Shoes\", \"price\": 150, \"category\": \"Fashion\" },\n    { \"name\": \"Monitor\", \"price\": 500, \"category\": \"Electronics\" }\n  ]\n}\n</code></pre>"},{"location":"stages/unwind/#output-documents_1","title":"\ud83d\udce4 Output Documents","text":"<pre><code>[\n  { \"_id\": \"Electronics\", \"totalSales\": 1500, \"count\": 2 },\n  { \"_id\": \"Fashion\", \"totalSales\": 150, \"count\": 1 }\n]\n</code></pre>"},{"location":"stages/unwind/#accumulators-used-with-unwind-group","title":"\u2795 Accumulators Used with <code>$unwind</code> + <code>$group</code>","text":"Accumulator Use Case <code>$sum</code> Count or compute totals <code>$avg</code> Category-level average price <code>$min</code> / <code>$max</code> Lowest/highest item per category <code>$push</code> List all item names per category <code>$addToSet</code> Unique brands per category"},{"location":"stages/unwind/#common-operators","title":"\ud83d\udd27 Common Operators","text":"Operator Use Case <code>$group</code> Aggregate after unwinding <code>$project</code> Select item fields <code>$sort</code> Rank results by totals <code>$multiply</code> Compute per-item total"},{"location":"stages/unwind/#tips","title":"\ud83e\udde0 Tips","text":"<ul> <li>Combine with <code>$group</code> for powerful analytics</li> <li>Preserve empty arrays with: <code>json   { \"$unwind\": { \"path\": \"$items\", \"preserveNullAndEmptyArrays\": true } }</code></li> <li>Works well with deeply nested item structures</li> </ul>"},{"location":"stages/unwind/#related","title":"\ud83d\udd17 Related","text":"<ul> <li><code>$group</code>, <code>$bucket</code>, <code>$facet</code> \u2013 to summarize arrays</li> <li><code>$project</code>, <code>$replaceRoot</code> \u2013 to restructure</li> </ul>"},{"location":"stages/vectorSearch/","title":"$vectorSearch","text":"<p>Fluxion Core does not currently embed a vector index or ANN service, so <code>$vectorSearch</code> is not supported. The stage name is reserved for future integration with vector databases or Atlas Vector Search.</p>"},{"location":"stages/vectorSearch/#status","title":"Status","text":"<ul> <li>\u274c Unsupported in the in-memory runtime.</li> <li>\ud83e\uddea Potential future work once an external vector store module is available.</li> </ul>"},{"location":"stages/vectorSearch/#workarounds","title":"Workarounds","text":"<ul> <li>Perform vector similarity search in your preferred service (Pinecone, Qdrant, Atlas, etc.) and feed the resulting document IDs into Fluxion for post-processing.</li> <li>Cache vector results when possible to avoid repeated lookups while Fluxion handles reshaping and enrichment.</li> </ul>"},{"location":"stages/vectorSearch/#notes-for-llm-responses","title":"Notes for LLM Responses","text":"<ul> <li>Clearly state \u201c<code>$vectorSearch</code> is not implemented in Fluxion Core`\u201d.</li> <li>Recommend external vector search + Fluxion pipeline composition.</li> </ul>"},{"location":"streaming/","title":"Streaming Engine Overview","text":"<p>The streaming runtime turns Fluxion\u2019s aggregation engine into an always-on orchestrator. It reads from connectors, executes declarative pipelines, applies error policies, stores checkpoints, and exposes metrics so teams can operate deterministic data flows.</p>"},{"location":"streaming/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Fluxion modules <code>fluxion-core</code>, <code>fluxion-connect</code>, <code>fluxion-enrich</code> (optional), plus your pipeline definitions. Runtime host JVM service/worker that runs streaming executors. Checkpoint store JDBC/Redis/custom store for offsets and state. Observability <code>StreamingMetricsListener</code> or Micrometer binding for metrics. Scaling plan Strategy for partitions/shards to avoid contention."},{"location":"streaming/#2-architecture-components","title":"2. Architecture components","text":"Component Purpose Streaming pipeline definition Binds a <code>StreamingSource</code>, a list of Fluxion stages, and a <code>StreamingSink</code>. Streaming pipeline orchestrator Drives fetch \u2192 transform \u2192 deliver cycles, enforces batching, checkpoints, retries, and invokes metrics hooks. Streaming context Carries per-run metadata (cursor positions, retry counters, shared attributes). Error policies Describe how the orchestrator reacts to failures (retry, skip, dead-letter, fail fast)."},{"location":"streaming/#module-relationships","title":"Module relationships","text":"Module Role in streaming Fluxion Core Executes stages deterministically. Fluxion Connect Supplies ingress/egress connectors. Fluxion Enrich Adds network-aware operators (<code>$httpCall</code>, <code>$sqlQuery</code>, \u2026)."},{"location":"streaming/#3-pipeline-lifecycle","title":"3. Pipeline lifecycle","text":"<ol> <li>Fetch \u2013 Read a batch from the configured <code>StreamingSource</code>.</li> <li>Transform \u2013 Run Fluxion stages (and Enrich operators) on the batch.</li> <li>Deliver \u2013 Push results to the <code>StreamingSink</code>.</li> <li>Checkpoint \u2013 Persist offsets/state so restarts resume correctly.</li> <li>Observe \u2013 Emit metrics via <code>StreamingMetricsListener</code> for dashboards/alerts.</li> </ol> <p>Each step is pluggable; you can swap sources, sinks, error policies, and listeners without altering pipeline definitions.</p>"},{"location":"streaming/#4-error-handling-strategies","title":"4. Error-handling strategies","text":"<p><code>StreamingErrorPolicy</code> dictates how an exception is handled. Common choices:</p> Policy Behaviour Use when <code>failFast()</code> Abort immediately. CI/tests or fail-open systems. <code>retry(int maxAttempts)</code> Exponential backoff until limit. Transient network/service instability. <code>skipAndContinue()</code> Drop the batch and keep going. Non-critical enrichment where gaps are acceptable. <code>deadLetter(StreamingSink)</code> Send the batch to a DLQ and continue. Audit-heavy workloads needing post-mortems. Builder pattern Compose custom retries, circuit breakers, alerts. Complex pipelines with bespoke recovery. <p>Fine-grained handling can be embedded in individual stages (e.g., <code>$function</code> with custom try/catch logic).</p>"},{"location":"streaming/#5-observability","title":"5. Observability","text":"<p>Typical metrics captured via <code>StreamingMetricsListener</code> or Micrometer:</p> <ul> <li><code>stream.batch.duration</code> \u2013 processing time per batch.</li> <li><code>stream.batch.size</code> \u2013 documents in/out per cycle.</li> <li><code>stream.lag</code> \u2013 source lag (Kafka offsets, cursor age, etc.).</li> <li><code>stream.retries</code> / <code>stream.failures</code> \u2013 counts when error policies trigger.</li> <li><code>stream.backpressure</code> \u2013 queue depth or wait time between fetches.</li> </ul> <p>Tag metrics with pipeline name, connector ID, environment, tenant, etc. Route critical alerts (lag spikes, sustained retries) to on-call channels.</p>"},{"location":"streaming/#6-deployment-checklist","title":"6. Deployment checklist","text":"Item Why it matters Batch sizing Stay within connector quotas (Kafka often 250\u20131000 records). Scaling strategy Partition-aware scaling prevents checkpoint contention. Secrets/config Load connector credentials from a secret manager; avoid hard-coded values. Rolling upgrades Warm standby instances, verify checkpoint compatibility before deploying. Canary/validation Replay or synthetic runs to confirm deterministic outputs. Failure drills Regularly test retries, DLQ routing, and checkpoint recovery."},{"location":"streaming/#7-when-to-choose-streaming","title":"7. When to choose streaming","text":"<p>Use the Streaming Engine when you need:</p> <ul> <li>Continuous ingestion/fan-out (Kafka, HTTP, Event Hubs, custom sources).</li> <li>Deterministic replay with durable checkpoints for compliance and audit.</li> <li>Real-time enrichment, windowing, or anomaly detection.</li> <li>Built-in metrics for throughput, lag, and retries.</li> </ul> <p>Prefer the Rule Engine for single-document evaluation, request/response services, or approval workflows orchestrated via Temporal.</p>"},{"location":"streaming/#8-stage-selection","title":"8. Stage selection","text":"<p>Not every aggregation stage is stream-friendly. Refer to the Stage Support Matrix for accumulator guidance and stream-vs-batch recommendations.</p>"},{"location":"streaming/#9-reference-files","title":"9. Reference files","text":"Path Description <code>fluxion-core/src/main/java/.../StreamingPipelineExecutor.java</code> Core execution loop (fetch/transform/deliver/checkpoint). <code>fluxion-core/src/main/java/.../StreamingPipelineOrchestrator.java</code> Builder/orchestrator API for configuring pipelines. <code>fluxion-core/src/main/java/.../StreamingRuntimeConfig.java</code> Runtime options (batch size, listeners, error policy). <code>fluxion-core/src/main/java/.../StreamingErrorPolicy.java</code> Error-handling strategies. <code>fluxion-docs/docs/streaming/quickstart.md</code> Hands-on tutorial building a Kafka \u2192 HTTP pipeline. <p>Use these resources when implementing or reviewing streaming integrations.</p>"},{"location":"streaming/quickstart/","title":"Streaming Engine Quick Start","text":"<p>This walkthrough demonstrates how to stand up a simple streaming pipeline that ingests events from Kafka, applies a Fluxion Core aggregation, and delivers the results to an HTTP endpoint.</p>"},{"location":"streaming/quickstart/#prerequisites","title":"Prerequisites","text":"Requirement Notes Fluxion modules <code>fluxion-core</code>, <code>fluxion-connect</code>, optionally <code>fluxion-enrich</code>. Kafka cluster Bootstrap servers + topic for ingest. Runtime Java 21+ (examples use records, builders, switch expressions). Checkpoint store JDBC or in-memory store for offsets (shown with <code>JdbcCheckpointStore</code>)."},{"location":"streaming/quickstart/#1-define-the-aggregation-stages","title":"1. Define the aggregation stages","text":"<p>Create the same JSON/DSL snippet you would run inside the Rule Engine. The Streaming Engine executes identical stages, so behavioural parity is guaranteed. Persisting or forwarding the results happens through the sink, not a <code>$merge</code> stage.</p> <pre><code>{\n  \"pipeline\": [\n    {\"$match\": {\"status\": \"PAID\"}},\n    {\"$group\": {\n      \"_id\": \"$customerId\",\n      \"orderCount\": {\"$count\": {}},\n      \"lifetimeValue\": {\"$sum\": \"$orderValue\"}\n    }}\n  ]\n}\n</code></pre>"},{"location":"streaming/quickstart/#2-wire-up-source-and-sink-connectors","title":"2. Wire up source and sink connectors","text":"<pre><code>KafkaStreamingSource source =\n    KafkaStreamingSource.builder()\n        .bootstrapServers(System.getenv(\"KAFKA_BOOTSTRAP\"))\n        .topic(\"orders.v1\")\n        .groupId(\"fluxion-ltv\")\n        .build();\n\nHttpStreamingSink sink =\n    HttpStreamingSink.builder()\n        .endpoint(\"https://api.example.com/ltv\")\n        .method(\"POST\")\n        .retryPolicy(RetryPolicy.exponentialBackoff())\n        .transformer(documents -&gt; documents.stream()\n            .map(document -&gt; Map.of(\n                \"customerId\", document.getString(\"_id\"),\n                \"orderCount\", document.getInteger(\"orderCount\"),\n                \"lifetimeValue\", document.getDouble(\"lifetimeValue\")))\n            .toList())\n        .build();\n</code></pre> <p>Both connectors implement <code>StreamingSource</code> / <code>StreamingSink</code> and can be swapped for custom implementations as needed.</p>"},{"location":"streaming/quickstart/#3-configure-the-orchestrator","title":"3. Configure the orchestrator","text":"<pre><code>StreamingRuntimeConfig config =\n    StreamingRuntimeConfig.builder()\n        .pipelineName(\"orders-ltv\")\n        .batchSize(500)\n        .metricsListener(new MicrometerStreamingMetrics())\n        .checkpointStore(new JdbcCheckpointStore(dataSource))\n        .errorPolicy(StreamingErrorPolicy.retry(3))\n        .build();\n</code></pre> <p>The configuration captures operational concerns: batching, metrics, checkpoint storage, and error handling.</p>"},{"location":"streaming/quickstart/#4-run-the-pipeline","title":"4. Run the pipeline","text":"<pre><code>StreamingPipelineDefinition definition =\n    StreamingPipelineDefinition.builder(source)\n        .stages(JsonStageLoader.load(\"rules/orders-ltv.json\"))\n        .sink(sink)\n        .build();\n\nnew StreamingPipelineOrchestrator().run(definition, config);\n</code></pre> <p>The orchestrator handles the execution loop until the source signals completion or a fatal error policy triggers a shutdown.</p>"},{"location":"streaming/quickstart/#5-observe-and-iterate","title":"5. Observe and iterate","text":"<ul> <li>Use the built-in metrics hooks (<code>StreamingMetricsListener</code>) to track lag,   throughput, and error rates.</li> <li>Checkpoint stores allow controlled restarts by persisting offsets/cursors.</li> <li>Adjust error policies to determine whether a failure retries, skips, or routes   events to a dead-letter queue.</li> </ul>"},{"location":"streaming/quickstart/#next-steps","title":"Next steps","text":"<ol> <li>Explore additional sink/source combos in the Fluxion Connect section.</li> <li>Add enrichment by dropping <code>$httpCall</code> or <code>$sqlQuery</code> operators from the    Fluxion Enrich module into your stages.</li> <li>Harden the pipeline with the operational guides on resilience, metrics, and    deployment in production environments.</li> <li>Dive into advanced topics for error policies, observability, and deployment    in the Streaming Engine overview.</li> <li>Review which aggregation stages fit streaming versus batch workloads in the    Stage Support Matrix.</li> <li>Run the streaming module tests with <code>mvn -pl fluxion-core -am test</code> to    validate connectors and executors before deploying.</li> </ol>"},{"location":"streaming/stage-compatibility/","title":"Stage Support Matrix","text":"<p>Fluxion exposes the full MongoDB-style aggregation vocabulary, but the runtime you choose determines how practical a stage is. The Streaming Engine must emit results incrementally, whereas a future batch job engine can materialise whole result sets before emitting. This guide calls out how each stage behaves today.</p> <p>Legend \u2705 \u2013 Well suited to streaming pipelines \u26a0\ufe0f \u2013 Supported with caveats (state, ordering, performance) \u23f3 \u2013 More appropriate for batch-style execution; avoid in streaming unless the     pipeline structure is tightly controlled.</p>"},{"location":"streaming/stage-compatibility/#statelessdocument-scoped-stages","title":"Stateless/document-scoped stages","text":"Stage Streaming Batch Notes <code>$match</code> \u2705 \u2705 Filters each document; ideal for ingress throttling. <code>$project</code> / <code>$set</code> / <code>$addFields</code> \u2705 \u2705 Reshape or add computed fields without global state. <code>$unset</code> / <code>$replaceRoot</code> / <code>$replaceWith</code> \u2705 \u2705 Useful for tidying payloads before sinks receive them. <code>$limit</code> / <code>$skip</code> \u26a0\ufe0f \u2705 Limit/skip only make sense in streaming when used after <code>$unwind</code> to constrain per-document arrays. For global limits, prefer batch mode. <code>$unwind</code> \u2705 \u2705 Enables array fan-out. Unlocks later stages (e.g., <code>$group</code>) because repeated keys now represent atomic events. <code>$sampleRate</code> \u2705 \u2705 Streaming-safe sampling for observability or rate limiting."},{"location":"streaming/stage-compatibility/#stateful-aggregations","title":"Stateful aggregations","text":"Stage Streaming Batch Notes <code>$group</code> \u26a0\ufe0f \u2705 Supported in streaming when grouping by a stable key (e.g., customerId) and using incremental accumulators (<code>$sum</code>, <code>$avg</code>, <code>$min</code>, <code>$max</code>, <code>$count</code>, <code>$push</code>, <code>$addToSet</code>). Avoid grouping by expressions that require whole-stream ordering or accumulators that need global knowledge (<code>$first</code>, <code>$last</code>, <code>$stdDevSamp</code>, <code>$stdDevPop</code>). See the $group reference for the full accumulator catalogue. <code>$setWindowFields</code> \u26a0\ufe0f \u2705 Works with streaming windows (tumbling, hopping) when a bounded window is declared. Window functions such as <code>$rank</code>, <code>$shift</code>, <code>$derivative</code>, and accumulator-backed windows (<code>$sum</code>, <code>$avg</code>, etc.) are safe in streaming if the window bounds are finite and the partition key is stable. Unbounded windows devolve into global state\u2014reserve them for batch use. See the $setWindowFields guide for function specifics. <code>$bucket</code> / <code>$bucketAuto</code> \u23f3 \u2705 Require knowledge of global min/max or distribution. Reserve for batch or bounded replays. <code>$densify</code> \u23f3 \u2705 Needs complete interval knowledge to backfill gaps; better suited to batch jobs. <code>$facet</code> \u26a0\ufe0f \u2705 Streaming facets run the same pipeline on the same event, so ensure each sub-pipeline is itself streaming-friendly. Fan-out to sinks if results diverge wildly. <code>$sort</code> \u23f3 \u2705 Global sort is incompatible with infinite streams. For streaming, sort within a window (e.g., by using <code>$setWindowFields</code> + <code>$push</code> + client-side ordering) or rely on upstream ordering."},{"location":"streaming/stage-compatibility/#expression-focused-stages","title":"Expression-focused stages","text":"Stage Streaming Batch Notes <code>$fill</code> \u26a0\ufe0f \u2705 Works in streaming when backing values can be sourced from window state or defaults. Window-aware fills that need previous/next documents should run inside bounded windows. <code>$function</code> \u2705 \u2705 Ideal for bespoke logic. In streaming, ensure functions are side-effect safe and idempotent to support retries. <code>$densify</code> / <code>$sampleRate</code> see above see above Already covered but included here for quick scanning."},{"location":"streaming/stage-compatibility/#output-oriented-stages","title":"Output-oriented stages","text":"Stage Streaming Batch Notes <code>$merge</code> / <code>$out</code> \u23f3 \u2705 Not part of the current Fluxion stage set. For streaming, write to sinks through Fluxion Connect instead. Once batch jobs are available, <code>$out</code>-style materialisation becomes more attractive. <code>$lookup</code> \u26a0\ufe0f \u2705 Supported via Enrich or native stages. Streaming lookups must guard against high latency; pair with caching or asynchronous enrichment. <code>$graphLookup</code> \u23f3 \u2705 Depth-first traversal is expensive for streaming; reserve for batch workloads."},{"location":"streaming/stage-compatibility/#guidance-for-structuring-pipelines","title":"Guidance for structuring pipelines","text":"<ol> <li>Normalise arrays early. Apply <code>$unwind</code> as soon as possible so downstream    stages operate on single logical events. This is especially important in    streaming pipelines that need <code>$group</code> or <code>$setWindowFields</code>.</li> <li>Isolate batch-heavy logic. If a pipeline requires <code>$sort</code>, <code>$densify</code>,    or <code>$bucketAuto</code>, split it: stream the critical detection piece, and hand off    the expensive report-building stages to a scheduled batch job.</li> <li>Use sinks for persistence. Until a batch job engine ships with <code>$out</code>    semantics, the recommended way to materialise results is via Fluxion Connect    sinks (HTTP, SQL, Kafka, MongoDB, \u2026).</li> <li>Budget state carefully. Stateful stages keep per-key accumulators in    memory. Pick grouping keys with bounded cardinality and monitor metrics such    as <code>stream.state.size</code>.</li> </ol>"},{"location":"streaming/stage-compatibility/#looking-ahead-batch-job-engine","title":"Looking ahead: batch job engine","text":"<p>The forthcoming batch job engine will reuse the same pipeline definitions but execute over bounded document sets. Expect the following stages to shine in that environment:</p> <ul> <li><code>$bucket</code> / <code>$bucketAuto</code> for histogramming over complete datasets.</li> <li><code>$densify</code> and <code>$fill</code> for time series repair.</li> <li><code>$sort</code> + <code>$group</code> for report-ready ordering.</li> <li><code>$graphLookup</code> or expensive <code>$lookup</code> joins that need full data stores.</li> </ul> <p>Document your intent using pipeline metadata today so it is clear which stages assume bounded versus unbounded inputs. That will make migrating to batch execution straightforward once the engine lands.</p>"},{"location":"streaming/stage-compatibility/#accumulator-cheat-sheet-for-streaming","title":"Accumulator cheat sheet for streaming","text":"<p>The following accumulators are generally safe in long-lived pipelines because they can be updated incrementally per key:</p> <ul> <li><code>$sum</code>, <code>$avg</code>, <code>$min</code>, <code>$max</code>, <code>$count</code></li> <li><code>$push</code>, <code>$addToSet</code> (monitor cardinality to avoid unbounded arrays)</li> <li><code>$first</code> / <code>$last</code> only when scoped to a finite window (e.g., inside <code>$setWindowFields</code> with bounded bounds)</li> </ul> <p>Prefer to defer these accumulators to batch execution where the full dataset is available:</p> <ul> <li><code>$stdDevPop</code>, <code>$stdDevSamp</code>, <code>$covariancePop</code>, <code>$covarianceSamp</code></li> <li><code>$mergeObjects</code> when it expects to see all documents to build a final shape</li> <li><code>$bottomN</code> / <code>$topN</code> style accumulators (coming soon) that inherently need global ordering</li> </ul> <p>For a comprehensive list of accumulators and their semantics, see the operators reference. Use this matrix to decide when a feature is practical in streaming\u2014then dive into the stage documentation for syntax details and examples.</p>"},{"location":"workflow/temporal/","title":"Temporal Workflow Bridge","text":"<p>This developer guide shows how to orchestrate Fluxion rule pipelines from Temporal workflows using the <code>fluxion-workflow</code> module. It includes concrete setup steps, full code samples, configuration hints, and testing instructions\u2014so that an engineer or an AI assistant can reproduce the wiring end-to-end.</p>"},{"location":"workflow/temporal/#1-prerequisites","title":"1. Prerequisites","text":"Requirement Notes Java 21+ Temporal\u2019s Java SDK and Fluxion modules target Java 21. Temporal backend Temporal Cloud, a self-hosted cluster, or Temporalite. Maven/Gradle Commands below use Maven. Fluxion modules <code>fluxion-core</code>, <code>fluxion-rules</code>, <code>fluxion-workflow</code>. <p>\ud83d\udec8 For local integration tests you can rely on Temporal\u2019s <code>TestWorkflowEnvironment</code> (no external server needed). For production you must point the worker at a real Temporal service.</p>"},{"location":"workflow/temporal/#2-add-dependencies","title":"2. Add dependencies","text":"<p>pom.xml</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;ai.fluxion&lt;/groupId&gt;\n  &lt;artifactId&gt;fluxion-workflow&lt;/artifactId&gt;\n  &lt;version&gt;${fluxion.version}&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n  &lt;groupId&gt;io.temporal&lt;/groupId&gt;\n  &lt;artifactId&gt;temporal-sdk&lt;/artifactId&gt;\n  &lt;version&gt;${temporal.sdk.version}&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>Also ensure <code>fluxion-core</code> and <code>fluxion-rules</code> are already present (they provide stage registries and rule abstractions).</p>"},{"location":"workflow/temporal/#3-register-activities-and-workflows","title":"3. Register activities and workflows","text":"<p>Create a Temporal worker (here using plain Java; in Spring Boot you would wire this inside a configuration class):</p> <pre><code>WorkflowServiceStubs service = WorkflowServiceStubs.newInstance();\nWorkflowClient client = WorkflowClient.newInstance(service);\nWorkerFactory factory = WorkerFactory.newInstance(client);\nWorker worker = factory.newWorker(\"fluxion-task-queue\");\n\nworker.registerActivitiesImplementations(new FluxionRuleActivitiesImpl());\nworker.registerWorkflowImplementationTypes(FluxionRuleWorkflowImpl.class);\n\nfactory.start();\n</code></pre> <p>Key points for LLMs/developers:</p> <ul> <li><code>FluxionRuleActivitiesImpl</code> delegates to the Fluxion <code>RuleEngine</code>.</li> <li><code>FluxionRuleWorkflowImpl</code> is a thin reference workflow. You can provide your   own implementation if you prefer.</li> <li><code>factory.start()</code> is required to begin polling the task queue.</li> </ul>"},{"location":"workflow/temporal/#4-call-the-activity-from-a-workflow","title":"4. Call the activity from a workflow","text":"<p>A minimal workflow that evaluates a Fluxion rule set:</p> <pre><code>import ai.fluxion.core.model.Document;\nimport ai.fluxion.rules.domain.RuleSet;\nimport ai.fluxion.workflow.temporal.activities.FluxionRuleActivities;\nimport ai.fluxion.workflow.temporal.activities.RuleActivityRequest;\nimport ai.fluxion.workflow.temporal.activities.RuleActivityResult;\nimport io.temporal.activity.ActivityOptions;\nimport io.temporal.workflow.Workflow;\nimport io.temporal.workflow.WorkflowInterface;\nimport io.temporal.workflow.WorkflowMethod;\n\nimport java.time.Duration;\n\n@WorkflowInterface\npublic interface OrderEvaluationWorkflow {\n    @WorkflowMethod\n    RuleActivityResult evaluate(Document document, RuleSet ruleSet);\n}\n\npublic final class OrderEvaluationWorkflowImpl implements OrderEvaluationWorkflow {\n\n    private final FluxionRuleActivities activities = Workflow.newActivityStub(\n            FluxionRuleActivities.class,\n            ActivityOptions.newBuilder()\n                    .setStartToCloseTimeout(Duration.ofMinutes(1))\n                    .build());\n\n    @Override\n    public RuleActivityResult evaluate(Document document, RuleSet ruleSet) {\n        RuleActivityRequest request = RuleActivityRequest.evaluate(document, ruleSet);\n        return activities.evaluateRuleSet(request);\n    }\n}\n</code></pre> <p><code>RuleActivityResult</code> exposes:</p> <ul> <li><code>ruleSetId</code>, <code>ruleSetName</code>, <code>ruleSetVersion</code></li> <li><code>document</code> (the original <code>Document</code>)</li> <li><code>sharedAttributes</code> (the rule engine\u2019s context map)</li> <li><code>passes</code> (list of rule pass summaries including rule id/name, salience,   logical action names)</li> </ul> <p>Use those fields to branch your workflow logic.</p>"},{"location":"workflow/temporal/#5-human-in-the-loop-manual-review-pattern","title":"5. Human-in-the-loop / manual review pattern","text":"<p>Many approval flows require a human decision after Fluxion flags an order. The repository ships a test-only example in <code>fluxion-workflow/src/test/java/ai/fluxion/workflow/temporal/workflows/OrderApprovalWorkflowTest.java</code>.</p> <p>Pattern overview:</p> <ol> <li>Run the Fluxion rule activity with <code>executeActions=true</code> so shared attributes    are populated.</li> <li>Check the shared map for <code>flag=review</code> (or whatever marker your rules set).</li> <li>If a review is required, invoke a custom manual-approval activity:    <code>java    boolean approved = manualApprovalActivities.requestApproval(orderId, amount);</code></li> <li>Set additional attributes (e.g., <code>manualApproval=true/false</code>) and return a    workflow-specific result object.</li> </ol> <p>You can copy the workflow from the test into application code, swap in a real manual-approval activity (email, ticketing system, Slack bot, etc.), and reuse Fluxion\u2019s declarative rules to drive the decisions.</p>"},{"location":"workflow/temporal/#6-configuration-hints","title":"6. Configuration hints","text":"Configuration Where Default Task queue Worker creation (<code>factory.newWorker(...)</code>) \u2013 Activity timeouts <code>ActivityOptions</code> You must set at least Start-to-close Retry policy <code>ActivityOptions.Builder#setRetryOptions</code> Inherit Temporal default Manual approval activity Custom stub implementing <code>ManualApprovalActivities</code> Depends on business logic <p>Remember to pass any environment-specific values (e.g., Temporal target, namespace) via env vars or application config.</p>"},{"location":"workflow/temporal/#7-end-to-end-testing","title":"7. End-to-end testing","text":"<p>Use Temporal\u2019s <code>TestWorkflowEnvironment</code> to run deterministic tests without a real Temporal server. Example from <code>OrderApprovalWorkflowTest</code>:</p> <pre><code>TestWorkflowEnvironment env = TestWorkflowEnvironment.newInstance();\nWorker worker = env.newWorker(\"orders-queue\");\nworker.registerActivitiesImplementations(new FluxionRuleActivitiesImpl(), new AlwaysApproveManualActivity());\nworker.registerWorkflowImplementationTypes(TestOrderApprovalWorkflow.class);\nenv.start();\n</code></pre>"},{"location":"workflow/temporal/#build-run-tests","title":"Build &amp; run tests","text":"<p>Always build dependent modules so the Fluxion stage registry is present:</p> <pre><code>mvn -pl fluxion-workflow -am test\n</code></pre> <p>The <code>-am</code> (also-make) flag ensures Maven builds <code>fluxion-core</code> and <code>fluxion-rules</code> before executing the workflow tests.</p>"},{"location":"workflow/temporal/#8-production-checklist","title":"8. Production checklist","text":"<ul> <li>Temporal persistence \u2013 point the worker at a real Temporal service (host   and namespace). The SDK by itself does not persist state.</li> <li>Observability \u2013 wrap <code>FluxionRuleActivitiesImpl</code> if you need structured   logging, metrics, or tracing.</li> <li>Rules lifecycle \u2013 manage rule-set versions so Fluxion changes are rolled   out alongside workflow changes.</li> <li>Dependency alignment \u2013 keep <code>temporal-sdk</code> and <code>fluxion-workflow</code>   versions in sync across workers.</li> </ul>"},{"location":"workflow/temporal/#9-reference-files","title":"9. Reference files","text":"Path Purpose <code>fluxion-workflow/src/main/java/.../FluxionRuleActivitiesImpl.java</code> Activity implementation used by workers. <code>fluxion-workflow/src/main/java/.../FluxionRuleWorkflowImpl.java</code> Reference workflow invoking the activity. <code>fluxion-workflow/src/test/java/.../OrderApprovalWorkflowTest.java</code> End-to-end order approval example with manual review pattern. <p>Use these files as canonical examples when generating code or onboarding new teams.</p>"}]}